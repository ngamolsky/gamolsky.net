/* eslint-disable */

/* THIS FILE IS AUTOGENERATED. CHANGES WILL BE LOST ON SUBSEQUENT RUNS. */

declare namespace Queries {

type Maybe<T> = T | null;
type InputMaybe<T> = T | null;
type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
type Scalars = {
  /** The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID. */
  ID: string;
  /** The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text. */
  String: string;
  /** The `Boolean` scalar type represents `true` or `false`. */
  Boolean: boolean;
  /** The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. */
  Int: number;
  /** The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point). */
  Float: number;
  /** A date string, such as 2007-12-03, compliant with the ISO 8601 standard for representation of dates and times using the Gregorian calendar. */
  Date: string;
  GatsbyImageData: import('gatsby-plugin-image').IGatsbyImageData;
  /** The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */
  JSON: Record<string, unknown>;
};

type AVIFOptions = {
  readonly lossless: InputMaybe<Scalars['Boolean']>;
  readonly quality: InputMaybe<Scalars['Int']>;
  readonly speed: InputMaybe<Scalars['Int']>;
};

type BlurredOptions = {
  /** Force the output format for the low-res preview. Default is to use the same format as the input. You should rarely need to change this */
  readonly toFormat: InputMaybe<ImageFormat>;
  /** Width of the generated low-res preview. Default is 20px */
  readonly width: InputMaybe<Scalars['Int']>;
};

type BooleanQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Boolean']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Boolean']>>>;
  readonly ne: InputMaybe<Scalars['Boolean']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Boolean']>>>;
};

type DateQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Date']>;
  readonly gt: InputMaybe<Scalars['Date']>;
  readonly gte: InputMaybe<Scalars['Date']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Date']>>>;
  readonly lt: InputMaybe<Scalars['Date']>;
  readonly lte: InputMaybe<Scalars['Date']>;
  readonly ne: InputMaybe<Scalars['Date']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Date']>>>;
};

type Directory = Node & {
  readonly absolutePath: Scalars['String'];
  readonly accessTime: Scalars['Date'];
  readonly atime: Scalars['Date'];
  readonly atimeMs: Scalars['Float'];
  readonly base: Scalars['String'];
  readonly birthTime: Scalars['Date'];
  /** @deprecated Use `birthTime` instead */
  readonly birthtime: Maybe<Scalars['Date']>;
  /** @deprecated Use `birthTime` instead */
  readonly birthtimeMs: Maybe<Scalars['Float']>;
  readonly changeTime: Scalars['Date'];
  readonly children: ReadonlyArray<Node>;
  readonly ctime: Scalars['Date'];
  readonly ctimeMs: Scalars['Float'];
  readonly dev: Scalars['Int'];
  readonly dir: Scalars['String'];
  readonly ext: Scalars['String'];
  readonly extension: Scalars['String'];
  readonly gid: Scalars['Int'];
  readonly id: Scalars['ID'];
  readonly ino: Scalars['Float'];
  readonly internal: Internal;
  readonly mode: Scalars['Int'];
  readonly modifiedTime: Scalars['Date'];
  readonly mtime: Scalars['Date'];
  readonly mtimeMs: Scalars['Float'];
  readonly name: Scalars['String'];
  readonly nlink: Scalars['Int'];
  readonly parent: Maybe<Node>;
  readonly prettySize: Scalars['String'];
  readonly rdev: Scalars['Int'];
  readonly relativeDirectory: Scalars['String'];
  readonly relativePath: Scalars['String'];
  readonly root: Scalars['String'];
  readonly size: Scalars['Int'];
  readonly sourceInstanceName: Scalars['String'];
  readonly uid: Scalars['Int'];
};


type Directory_accessTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_atimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_birthTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_changeTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_ctimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_modifiedTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Directory_mtimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type DirectoryConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<DirectoryEdge>;
  readonly group: ReadonlyArray<DirectoryGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Directory>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type DirectoryConnection_distinctArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryConnection_groupArgs = {
  field: DirectoryFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type DirectoryConnection_maxArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryConnection_minArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryConnection_sumArgs = {
  field: DirectoryFieldSelector;
};

type DirectoryEdge = {
  readonly next: Maybe<Directory>;
  readonly node: Directory;
  readonly previous: Maybe<Directory>;
};

type DirectoryFieldSelector = {
  readonly absolutePath: InputMaybe<FieldSelectorEnum>;
  readonly accessTime: InputMaybe<FieldSelectorEnum>;
  readonly atime: InputMaybe<FieldSelectorEnum>;
  readonly atimeMs: InputMaybe<FieldSelectorEnum>;
  readonly base: InputMaybe<FieldSelectorEnum>;
  readonly birthTime: InputMaybe<FieldSelectorEnum>;
  readonly birthtime: InputMaybe<FieldSelectorEnum>;
  readonly birthtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly changeTime: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly ctime: InputMaybe<FieldSelectorEnum>;
  readonly ctimeMs: InputMaybe<FieldSelectorEnum>;
  readonly dev: InputMaybe<FieldSelectorEnum>;
  readonly dir: InputMaybe<FieldSelectorEnum>;
  readonly ext: InputMaybe<FieldSelectorEnum>;
  readonly extension: InputMaybe<FieldSelectorEnum>;
  readonly gid: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly ino: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly mode: InputMaybe<FieldSelectorEnum>;
  readonly modifiedTime: InputMaybe<FieldSelectorEnum>;
  readonly mtime: InputMaybe<FieldSelectorEnum>;
  readonly mtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly nlink: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly prettySize: InputMaybe<FieldSelectorEnum>;
  readonly rdev: InputMaybe<FieldSelectorEnum>;
  readonly relativeDirectory: InputMaybe<FieldSelectorEnum>;
  readonly relativePath: InputMaybe<FieldSelectorEnum>;
  readonly root: InputMaybe<FieldSelectorEnum>;
  readonly size: InputMaybe<FieldSelectorEnum>;
  readonly sourceInstanceName: InputMaybe<FieldSelectorEnum>;
  readonly uid: InputMaybe<FieldSelectorEnum>;
};

type DirectoryFilterInput = {
  readonly absolutePath: InputMaybe<StringQueryOperatorInput>;
  readonly accessTime: InputMaybe<DateQueryOperatorInput>;
  readonly atime: InputMaybe<DateQueryOperatorInput>;
  readonly atimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly base: InputMaybe<StringQueryOperatorInput>;
  readonly birthTime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly changeTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly ctime: InputMaybe<DateQueryOperatorInput>;
  readonly ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly dev: InputMaybe<IntQueryOperatorInput>;
  readonly dir: InputMaybe<StringQueryOperatorInput>;
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly extension: InputMaybe<StringQueryOperatorInput>;
  readonly gid: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly ino: InputMaybe<FloatQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly mode: InputMaybe<IntQueryOperatorInput>;
  readonly modifiedTime: InputMaybe<DateQueryOperatorInput>;
  readonly mtime: InputMaybe<DateQueryOperatorInput>;
  readonly mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nlink: InputMaybe<IntQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly prettySize: InputMaybe<StringQueryOperatorInput>;
  readonly rdev: InputMaybe<IntQueryOperatorInput>;
  readonly relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  readonly relativePath: InputMaybe<StringQueryOperatorInput>;
  readonly root: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<IntQueryOperatorInput>;
  readonly sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  readonly uid: InputMaybe<IntQueryOperatorInput>;
};

type DirectoryGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<DirectoryEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<DirectoryGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Directory>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type DirectoryGroupConnection_distinctArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryGroupConnection_groupArgs = {
  field: DirectoryFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type DirectoryGroupConnection_maxArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryGroupConnection_minArgs = {
  field: DirectoryFieldSelector;
};


type DirectoryGroupConnection_sumArgs = {
  field: DirectoryFieldSelector;
};

type DirectorySortInput = {
  readonly absolutePath: InputMaybe<SortOrderEnum>;
  readonly accessTime: InputMaybe<SortOrderEnum>;
  readonly atime: InputMaybe<SortOrderEnum>;
  readonly atimeMs: InputMaybe<SortOrderEnum>;
  readonly base: InputMaybe<SortOrderEnum>;
  readonly birthTime: InputMaybe<SortOrderEnum>;
  readonly birthtime: InputMaybe<SortOrderEnum>;
  readonly birthtimeMs: InputMaybe<SortOrderEnum>;
  readonly changeTime: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly ctime: InputMaybe<SortOrderEnum>;
  readonly ctimeMs: InputMaybe<SortOrderEnum>;
  readonly dev: InputMaybe<SortOrderEnum>;
  readonly dir: InputMaybe<SortOrderEnum>;
  readonly ext: InputMaybe<SortOrderEnum>;
  readonly extension: InputMaybe<SortOrderEnum>;
  readonly gid: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly ino: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly mode: InputMaybe<SortOrderEnum>;
  readonly modifiedTime: InputMaybe<SortOrderEnum>;
  readonly mtime: InputMaybe<SortOrderEnum>;
  readonly mtimeMs: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly nlink: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly prettySize: InputMaybe<SortOrderEnum>;
  readonly rdev: InputMaybe<SortOrderEnum>;
  readonly relativeDirectory: InputMaybe<SortOrderEnum>;
  readonly relativePath: InputMaybe<SortOrderEnum>;
  readonly root: InputMaybe<SortOrderEnum>;
  readonly size: InputMaybe<SortOrderEnum>;
  readonly sourceInstanceName: InputMaybe<SortOrderEnum>;
  readonly uid: InputMaybe<SortOrderEnum>;
};

type DuotoneGradient = {
  readonly highlight: Scalars['String'];
  readonly opacity: InputMaybe<Scalars['Int']>;
  readonly shadow: Scalars['String'];
};

type FieldSelectorEnum =
  | 'SELECT';

type File = Node & {
  readonly absolutePath: Scalars['String'];
  readonly accessTime: Scalars['Date'];
  readonly atime: Scalars['Date'];
  readonly atimeMs: Scalars['Float'];
  readonly base: Scalars['String'];
  readonly birthTime: Scalars['Date'];
  /** @deprecated Use `birthTime` instead */
  readonly birthtime: Maybe<Scalars['Date']>;
  /** @deprecated Use `birthTime` instead */
  readonly birthtimeMs: Maybe<Scalars['Float']>;
  readonly blksize: Maybe<Scalars['Int']>;
  readonly blocks: Maybe<Scalars['Int']>;
  readonly changeTime: Scalars['Date'];
  /** Returns the first child node of type ImageSharp or null if there are no children of given type on this node */
  readonly childImageSharp: Maybe<ImageSharp>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type ImageSharp */
  readonly childrenImageSharp: Maybe<ReadonlyArray<Maybe<ImageSharp>>>;
  readonly ctime: Scalars['Date'];
  readonly ctimeMs: Scalars['Float'];
  readonly dev: Scalars['Int'];
  readonly dir: Scalars['String'];
  readonly ext: Scalars['String'];
  readonly extension: Scalars['String'];
  readonly gid: Scalars['Int'];
  readonly id: Scalars['ID'];
  readonly ino: Scalars['Float'];
  readonly internal: Internal;
  readonly mode: Scalars['Int'];
  readonly modifiedTime: Scalars['Date'];
  readonly mtime: Scalars['Date'];
  readonly mtimeMs: Scalars['Float'];
  readonly name: Scalars['String'];
  readonly nlink: Scalars['Int'];
  readonly parent: Maybe<Node>;
  readonly prettySize: Scalars['String'];
  /** Copy file to static directory and return public url to it */
  readonly publicURL: Maybe<Scalars['String']>;
  readonly rdev: Scalars['Int'];
  readonly relativeDirectory: Scalars['String'];
  readonly relativePath: Scalars['String'];
  readonly root: Scalars['String'];
  readonly size: Scalars['Int'];
  readonly sourceInstanceName: Scalars['String'];
  readonly uid: Scalars['Int'];
  readonly url: Maybe<Scalars['String']>;
};


type File_accessTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_atimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_birthTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_changeTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_ctimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_modifiedTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type File_mtimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type FileConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<FileEdge>;
  readonly group: ReadonlyArray<FileGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<File>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type FileConnection_distinctArgs = {
  field: FileFieldSelector;
};


type FileConnection_groupArgs = {
  field: FileFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type FileConnection_maxArgs = {
  field: FileFieldSelector;
};


type FileConnection_minArgs = {
  field: FileFieldSelector;
};


type FileConnection_sumArgs = {
  field: FileFieldSelector;
};

type FileEdge = {
  readonly next: Maybe<File>;
  readonly node: File;
  readonly previous: Maybe<File>;
};

type FileFieldSelector = {
  readonly absolutePath: InputMaybe<FieldSelectorEnum>;
  readonly accessTime: InputMaybe<FieldSelectorEnum>;
  readonly atime: InputMaybe<FieldSelectorEnum>;
  readonly atimeMs: InputMaybe<FieldSelectorEnum>;
  readonly base: InputMaybe<FieldSelectorEnum>;
  readonly birthTime: InputMaybe<FieldSelectorEnum>;
  readonly birthtime: InputMaybe<FieldSelectorEnum>;
  readonly birthtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly blksize: InputMaybe<FieldSelectorEnum>;
  readonly blocks: InputMaybe<FieldSelectorEnum>;
  readonly changeTime: InputMaybe<FieldSelectorEnum>;
  readonly childImageSharp: InputMaybe<ImageSharpFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly childrenImageSharp: InputMaybe<ImageSharpFieldSelector>;
  readonly ctime: InputMaybe<FieldSelectorEnum>;
  readonly ctimeMs: InputMaybe<FieldSelectorEnum>;
  readonly dev: InputMaybe<FieldSelectorEnum>;
  readonly dir: InputMaybe<FieldSelectorEnum>;
  readonly ext: InputMaybe<FieldSelectorEnum>;
  readonly extension: InputMaybe<FieldSelectorEnum>;
  readonly gid: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly ino: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly mode: InputMaybe<FieldSelectorEnum>;
  readonly modifiedTime: InputMaybe<FieldSelectorEnum>;
  readonly mtime: InputMaybe<FieldSelectorEnum>;
  readonly mtimeMs: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly nlink: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly prettySize: InputMaybe<FieldSelectorEnum>;
  readonly publicURL: InputMaybe<FieldSelectorEnum>;
  readonly rdev: InputMaybe<FieldSelectorEnum>;
  readonly relativeDirectory: InputMaybe<FieldSelectorEnum>;
  readonly relativePath: InputMaybe<FieldSelectorEnum>;
  readonly root: InputMaybe<FieldSelectorEnum>;
  readonly size: InputMaybe<FieldSelectorEnum>;
  readonly sourceInstanceName: InputMaybe<FieldSelectorEnum>;
  readonly uid: InputMaybe<FieldSelectorEnum>;
  readonly url: InputMaybe<FieldSelectorEnum>;
};

type FileFilterInput = {
  readonly absolutePath: InputMaybe<StringQueryOperatorInput>;
  readonly accessTime: InputMaybe<DateQueryOperatorInput>;
  readonly atime: InputMaybe<DateQueryOperatorInput>;
  readonly atimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly base: InputMaybe<StringQueryOperatorInput>;
  readonly birthTime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtime: InputMaybe<DateQueryOperatorInput>;
  readonly birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly blksize: InputMaybe<IntQueryOperatorInput>;
  readonly blocks: InputMaybe<IntQueryOperatorInput>;
  readonly changeTime: InputMaybe<DateQueryOperatorInput>;
  readonly childImageSharp: InputMaybe<ImageSharpFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenImageSharp: InputMaybe<ImageSharpFilterListInput>;
  readonly ctime: InputMaybe<DateQueryOperatorInput>;
  readonly ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly dev: InputMaybe<IntQueryOperatorInput>;
  readonly dir: InputMaybe<StringQueryOperatorInput>;
  readonly ext: InputMaybe<StringQueryOperatorInput>;
  readonly extension: InputMaybe<StringQueryOperatorInput>;
  readonly gid: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly ino: InputMaybe<FloatQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly mode: InputMaybe<IntQueryOperatorInput>;
  readonly modifiedTime: InputMaybe<DateQueryOperatorInput>;
  readonly mtime: InputMaybe<DateQueryOperatorInput>;
  readonly mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nlink: InputMaybe<IntQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly prettySize: InputMaybe<StringQueryOperatorInput>;
  readonly publicURL: InputMaybe<StringQueryOperatorInput>;
  readonly rdev: InputMaybe<IntQueryOperatorInput>;
  readonly relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  readonly relativePath: InputMaybe<StringQueryOperatorInput>;
  readonly root: InputMaybe<StringQueryOperatorInput>;
  readonly size: InputMaybe<IntQueryOperatorInput>;
  readonly sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  readonly uid: InputMaybe<IntQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

type FileGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<FileEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<FileGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<File>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type FileGroupConnection_distinctArgs = {
  field: FileFieldSelector;
};


type FileGroupConnection_groupArgs = {
  field: FileFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type FileGroupConnection_maxArgs = {
  field: FileFieldSelector;
};


type FileGroupConnection_minArgs = {
  field: FileFieldSelector;
};


type FileGroupConnection_sumArgs = {
  field: FileFieldSelector;
};

type FileSortInput = {
  readonly absolutePath: InputMaybe<SortOrderEnum>;
  readonly accessTime: InputMaybe<SortOrderEnum>;
  readonly atime: InputMaybe<SortOrderEnum>;
  readonly atimeMs: InputMaybe<SortOrderEnum>;
  readonly base: InputMaybe<SortOrderEnum>;
  readonly birthTime: InputMaybe<SortOrderEnum>;
  readonly birthtime: InputMaybe<SortOrderEnum>;
  readonly birthtimeMs: InputMaybe<SortOrderEnum>;
  readonly blksize: InputMaybe<SortOrderEnum>;
  readonly blocks: InputMaybe<SortOrderEnum>;
  readonly changeTime: InputMaybe<SortOrderEnum>;
  readonly childImageSharp: InputMaybe<ImageSharpSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly childrenImageSharp: InputMaybe<ImageSharpSortInput>;
  readonly ctime: InputMaybe<SortOrderEnum>;
  readonly ctimeMs: InputMaybe<SortOrderEnum>;
  readonly dev: InputMaybe<SortOrderEnum>;
  readonly dir: InputMaybe<SortOrderEnum>;
  readonly ext: InputMaybe<SortOrderEnum>;
  readonly extension: InputMaybe<SortOrderEnum>;
  readonly gid: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly ino: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly mode: InputMaybe<SortOrderEnum>;
  readonly modifiedTime: InputMaybe<SortOrderEnum>;
  readonly mtime: InputMaybe<SortOrderEnum>;
  readonly mtimeMs: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly nlink: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly prettySize: InputMaybe<SortOrderEnum>;
  readonly publicURL: InputMaybe<SortOrderEnum>;
  readonly rdev: InputMaybe<SortOrderEnum>;
  readonly relativeDirectory: InputMaybe<SortOrderEnum>;
  readonly relativePath: InputMaybe<SortOrderEnum>;
  readonly root: InputMaybe<SortOrderEnum>;
  readonly size: InputMaybe<SortOrderEnum>;
  readonly sourceInstanceName: InputMaybe<SortOrderEnum>;
  readonly uid: InputMaybe<SortOrderEnum>;
  readonly url: InputMaybe<SortOrderEnum>;
};

type FloatQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Float']>;
  readonly gt: InputMaybe<Scalars['Float']>;
  readonly gte: InputMaybe<Scalars['Float']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
  readonly lt: InputMaybe<Scalars['Float']>;
  readonly lte: InputMaybe<Scalars['Float']>;
  readonly ne: InputMaybe<Scalars['Float']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
};

type GatsbyImageDataQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['GatsbyImageData']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['GatsbyImageData']>>>;
  readonly ne: InputMaybe<Scalars['GatsbyImageData']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['GatsbyImageData']>>>;
};

type GatsbyImageFormat =
  | 'auto'
  | 'avif'
  | 'jpg'
  | ''
  | 'png'
  | 'webp';

type GatsbyImageLayout =
  | 'constrained'
  | 'fixed'
  | 'fullWidth';

type GatsbyImagePlaceholder =
  | 'blurred'
  | 'dominantColor'
  | 'none'
  | 'tracedSVG';

type ImageCropFocus =
  | 17
  | 0
  | 2
  | 16
  | 1
  | 5
  | 8
  | 3
  | 6
  | 7
  | 4;

type ImageFit =
  | 'contain'
  | 'cover'
  | 'fill'
  | 'inside'
  | 'outside';

type ImageFormat =
  | ''
  | 'avif'
  | 'jpg'
  | ''
  | 'png'
  | 'webp';

type ImageLayout =
  | 'constrained'
  | 'fixed'
  | 'fullWidth';

type ImagePlaceholder =
  | 'blurred'
  | 'dominantColor'
  | 'none'
  | 'tracedSVG';

type ImageSharp = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly fixed: Maybe<ImageSharpFixed>;
  readonly fluid: Maybe<ImageSharpFluid>;
  readonly gatsbyImageData: Scalars['GatsbyImageData'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly original: Maybe<ImageSharpOriginal>;
  readonly parent: Maybe<Node>;
  readonly resize: Maybe<ImageSharpResize>;
};


type ImageSharp_fixedArgs = {
  background?: InputMaybe<Scalars['String']>;
  base64Width: InputMaybe<Scalars['Int']>;
  cropFocus?: InputMaybe<ImageCropFocus>;
  duotone: InputMaybe<DuotoneGradient>;
  fit?: InputMaybe<ImageFit>;
  grayscale?: InputMaybe<Scalars['Boolean']>;
  height: InputMaybe<Scalars['Int']>;
  jpegProgressive?: InputMaybe<Scalars['Boolean']>;
  jpegQuality: InputMaybe<Scalars['Int']>;
  pngCompressionSpeed?: InputMaybe<Scalars['Int']>;
  pngQuality: InputMaybe<Scalars['Int']>;
  quality: InputMaybe<Scalars['Int']>;
  rotate?: InputMaybe<Scalars['Int']>;
  toFormat?: InputMaybe<ImageFormat>;
  toFormatBase64?: InputMaybe<ImageFormat>;
  traceSVG: InputMaybe<Potrace>;
  trim?: InputMaybe<Scalars['Float']>;
  webpQuality: InputMaybe<Scalars['Int']>;
  width: InputMaybe<Scalars['Int']>;
};


type ImageSharp_fluidArgs = {
  background?: InputMaybe<Scalars['String']>;
  base64Width: InputMaybe<Scalars['Int']>;
  cropFocus?: InputMaybe<ImageCropFocus>;
  duotone: InputMaybe<DuotoneGradient>;
  fit?: InputMaybe<ImageFit>;
  grayscale?: InputMaybe<Scalars['Boolean']>;
  jpegProgressive?: InputMaybe<Scalars['Boolean']>;
  jpegQuality: InputMaybe<Scalars['Int']>;
  maxHeight: InputMaybe<Scalars['Int']>;
  maxWidth: InputMaybe<Scalars['Int']>;
  pngCompressionSpeed?: InputMaybe<Scalars['Int']>;
  pngQuality: InputMaybe<Scalars['Int']>;
  quality: InputMaybe<Scalars['Int']>;
  rotate?: InputMaybe<Scalars['Int']>;
  sizes?: InputMaybe<Scalars['String']>;
  srcSetBreakpoints?: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  toFormat?: InputMaybe<ImageFormat>;
  toFormatBase64?: InputMaybe<ImageFormat>;
  traceSVG: InputMaybe<Potrace>;
  trim?: InputMaybe<Scalars['Float']>;
  webpQuality: InputMaybe<Scalars['Int']>;
};


type ImageSharp_gatsbyImageDataArgs = {
  aspectRatio: InputMaybe<Scalars['Float']>;
  avifOptions: InputMaybe<AVIFOptions>;
  backgroundColor: InputMaybe<Scalars['String']>;
  blurredOptions: InputMaybe<BlurredOptions>;
  breakpoints: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  formats: InputMaybe<ReadonlyArray<InputMaybe<ImageFormat>>>;
  height: InputMaybe<Scalars['Int']>;
  jpgOptions: InputMaybe<JPGOptions>;
  layout?: InputMaybe<ImageLayout>;
  outputPixelDensities: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Float']>>>;
  placeholder: InputMaybe<ImagePlaceholder>;
  pngOptions: InputMaybe<PNGOptions>;
  quality: InputMaybe<Scalars['Int']>;
  sizes: InputMaybe<Scalars['String']>;
  tracedSVGOptions: InputMaybe<Potrace>;
  transformOptions: InputMaybe<TransformOptions>;
  webpOptions: InputMaybe<WebPOptions>;
  width: InputMaybe<Scalars['Int']>;
};


type ImageSharp_resizeArgs = {
  background?: InputMaybe<Scalars['String']>;
  base64?: InputMaybe<Scalars['Boolean']>;
  cropFocus?: InputMaybe<ImageCropFocus>;
  duotone: InputMaybe<DuotoneGradient>;
  fit?: InputMaybe<ImageFit>;
  grayscale?: InputMaybe<Scalars['Boolean']>;
  height: InputMaybe<Scalars['Int']>;
  jpegProgressive?: InputMaybe<Scalars['Boolean']>;
  jpegQuality: InputMaybe<Scalars['Int']>;
  pngCompressionLevel?: InputMaybe<Scalars['Int']>;
  pngCompressionSpeed?: InputMaybe<Scalars['Int']>;
  pngQuality: InputMaybe<Scalars['Int']>;
  quality: InputMaybe<Scalars['Int']>;
  rotate?: InputMaybe<Scalars['Int']>;
  toFormat?: InputMaybe<ImageFormat>;
  traceSVG: InputMaybe<Potrace>;
  trim?: InputMaybe<Scalars['Float']>;
  webpQuality: InputMaybe<Scalars['Int']>;
  width: InputMaybe<Scalars['Int']>;
};

type ImageSharpConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ImageSharpEdge>;
  readonly group: ReadonlyArray<ImageSharpGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ImageSharp>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ImageSharpConnection_distinctArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpConnection_groupArgs = {
  field: ImageSharpFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ImageSharpConnection_maxArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpConnection_minArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpConnection_sumArgs = {
  field: ImageSharpFieldSelector;
};

type ImageSharpEdge = {
  readonly next: Maybe<ImageSharp>;
  readonly node: ImageSharp;
  readonly previous: Maybe<ImageSharp>;
};

type ImageSharpFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly fixed: InputMaybe<ImageSharpFixedFieldSelector>;
  readonly fluid: InputMaybe<ImageSharpFluidFieldSelector>;
  readonly gatsbyImageData: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly original: InputMaybe<ImageSharpOriginalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly resize: InputMaybe<ImageSharpResizeFieldSelector>;
};

type ImageSharpFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly fixed: InputMaybe<ImageSharpFixedFilterInput>;
  readonly fluid: InputMaybe<ImageSharpFluidFilterInput>;
  readonly gatsbyImageData: InputMaybe<GatsbyImageDataQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly original: InputMaybe<ImageSharpOriginalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly resize: InputMaybe<ImageSharpResizeFilterInput>;
};

type ImageSharpFilterListInput = {
  readonly elemMatch: InputMaybe<ImageSharpFilterInput>;
};

type ImageSharpFixed = {
  readonly aspectRatio: Maybe<Scalars['Float']>;
  readonly base64: Maybe<Scalars['String']>;
  readonly height: Scalars['Float'];
  readonly originalName: Maybe<Scalars['String']>;
  readonly src: Scalars['String'];
  readonly srcSet: Scalars['String'];
  readonly srcSetWebp: Maybe<Scalars['String']>;
  readonly srcWebp: Maybe<Scalars['String']>;
  readonly tracedSVG: Maybe<Scalars['String']>;
  readonly width: Scalars['Float'];
};

type ImageSharpFixedFieldSelector = {
  readonly aspectRatio: InputMaybe<FieldSelectorEnum>;
  readonly base64: InputMaybe<FieldSelectorEnum>;
  readonly height: InputMaybe<FieldSelectorEnum>;
  readonly originalName: InputMaybe<FieldSelectorEnum>;
  readonly src: InputMaybe<FieldSelectorEnum>;
  readonly srcSet: InputMaybe<FieldSelectorEnum>;
  readonly srcSetWebp: InputMaybe<FieldSelectorEnum>;
  readonly srcWebp: InputMaybe<FieldSelectorEnum>;
  readonly tracedSVG: InputMaybe<FieldSelectorEnum>;
  readonly width: InputMaybe<FieldSelectorEnum>;
};

type ImageSharpFixedFilterInput = {
  readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>;
  readonly base64: InputMaybe<StringQueryOperatorInput>;
  readonly height: InputMaybe<FloatQueryOperatorInput>;
  readonly originalName: InputMaybe<StringQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly srcSet: InputMaybe<StringQueryOperatorInput>;
  readonly srcSetWebp: InputMaybe<StringQueryOperatorInput>;
  readonly srcWebp: InputMaybe<StringQueryOperatorInput>;
  readonly tracedSVG: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<FloatQueryOperatorInput>;
};

type ImageSharpFixedSortInput = {
  readonly aspectRatio: InputMaybe<SortOrderEnum>;
  readonly base64: InputMaybe<SortOrderEnum>;
  readonly height: InputMaybe<SortOrderEnum>;
  readonly originalName: InputMaybe<SortOrderEnum>;
  readonly src: InputMaybe<SortOrderEnum>;
  readonly srcSet: InputMaybe<SortOrderEnum>;
  readonly srcSetWebp: InputMaybe<SortOrderEnum>;
  readonly srcWebp: InputMaybe<SortOrderEnum>;
  readonly tracedSVG: InputMaybe<SortOrderEnum>;
  readonly width: InputMaybe<SortOrderEnum>;
};

type ImageSharpFluid = {
  readonly aspectRatio: Scalars['Float'];
  readonly base64: Maybe<Scalars['String']>;
  readonly originalImg: Maybe<Scalars['String']>;
  readonly originalName: Maybe<Scalars['String']>;
  readonly presentationHeight: Scalars['Int'];
  readonly presentationWidth: Scalars['Int'];
  readonly sizes: Scalars['String'];
  readonly src: Scalars['String'];
  readonly srcSet: Scalars['String'];
  readonly srcSetWebp: Maybe<Scalars['String']>;
  readonly srcWebp: Maybe<Scalars['String']>;
  readonly tracedSVG: Maybe<Scalars['String']>;
};

type ImageSharpFluidFieldSelector = {
  readonly aspectRatio: InputMaybe<FieldSelectorEnum>;
  readonly base64: InputMaybe<FieldSelectorEnum>;
  readonly originalImg: InputMaybe<FieldSelectorEnum>;
  readonly originalName: InputMaybe<FieldSelectorEnum>;
  readonly presentationHeight: InputMaybe<FieldSelectorEnum>;
  readonly presentationWidth: InputMaybe<FieldSelectorEnum>;
  readonly sizes: InputMaybe<FieldSelectorEnum>;
  readonly src: InputMaybe<FieldSelectorEnum>;
  readonly srcSet: InputMaybe<FieldSelectorEnum>;
  readonly srcSetWebp: InputMaybe<FieldSelectorEnum>;
  readonly srcWebp: InputMaybe<FieldSelectorEnum>;
  readonly tracedSVG: InputMaybe<FieldSelectorEnum>;
};

type ImageSharpFluidFilterInput = {
  readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>;
  readonly base64: InputMaybe<StringQueryOperatorInput>;
  readonly originalImg: InputMaybe<StringQueryOperatorInput>;
  readonly originalName: InputMaybe<StringQueryOperatorInput>;
  readonly presentationHeight: InputMaybe<IntQueryOperatorInput>;
  readonly presentationWidth: InputMaybe<IntQueryOperatorInput>;
  readonly sizes: InputMaybe<StringQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly srcSet: InputMaybe<StringQueryOperatorInput>;
  readonly srcSetWebp: InputMaybe<StringQueryOperatorInput>;
  readonly srcWebp: InputMaybe<StringQueryOperatorInput>;
  readonly tracedSVG: InputMaybe<StringQueryOperatorInput>;
};

type ImageSharpFluidSortInput = {
  readonly aspectRatio: InputMaybe<SortOrderEnum>;
  readonly base64: InputMaybe<SortOrderEnum>;
  readonly originalImg: InputMaybe<SortOrderEnum>;
  readonly originalName: InputMaybe<SortOrderEnum>;
  readonly presentationHeight: InputMaybe<SortOrderEnum>;
  readonly presentationWidth: InputMaybe<SortOrderEnum>;
  readonly sizes: InputMaybe<SortOrderEnum>;
  readonly src: InputMaybe<SortOrderEnum>;
  readonly srcSet: InputMaybe<SortOrderEnum>;
  readonly srcSetWebp: InputMaybe<SortOrderEnum>;
  readonly srcWebp: InputMaybe<SortOrderEnum>;
  readonly tracedSVG: InputMaybe<SortOrderEnum>;
};

type ImageSharpGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<ImageSharpEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<ImageSharpGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<ImageSharp>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type ImageSharpGroupConnection_distinctArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpGroupConnection_groupArgs = {
  field: ImageSharpFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type ImageSharpGroupConnection_maxArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpGroupConnection_minArgs = {
  field: ImageSharpFieldSelector;
};


type ImageSharpGroupConnection_sumArgs = {
  field: ImageSharpFieldSelector;
};

type ImageSharpOriginal = {
  readonly height: Maybe<Scalars['Float']>;
  readonly src: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Float']>;
};

type ImageSharpOriginalFieldSelector = {
  readonly height: InputMaybe<FieldSelectorEnum>;
  readonly src: InputMaybe<FieldSelectorEnum>;
  readonly width: InputMaybe<FieldSelectorEnum>;
};

type ImageSharpOriginalFilterInput = {
  readonly height: InputMaybe<FloatQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<FloatQueryOperatorInput>;
};

type ImageSharpOriginalSortInput = {
  readonly height: InputMaybe<SortOrderEnum>;
  readonly src: InputMaybe<SortOrderEnum>;
  readonly width: InputMaybe<SortOrderEnum>;
};

type ImageSharpResize = {
  readonly aspectRatio: Maybe<Scalars['Float']>;
  readonly height: Maybe<Scalars['Int']>;
  readonly originalName: Maybe<Scalars['String']>;
  readonly src: Maybe<Scalars['String']>;
  readonly tracedSVG: Maybe<Scalars['String']>;
  readonly width: Maybe<Scalars['Int']>;
};

type ImageSharpResizeFieldSelector = {
  readonly aspectRatio: InputMaybe<FieldSelectorEnum>;
  readonly height: InputMaybe<FieldSelectorEnum>;
  readonly originalName: InputMaybe<FieldSelectorEnum>;
  readonly src: InputMaybe<FieldSelectorEnum>;
  readonly tracedSVG: InputMaybe<FieldSelectorEnum>;
  readonly width: InputMaybe<FieldSelectorEnum>;
};

type ImageSharpResizeFilterInput = {
  readonly aspectRatio: InputMaybe<FloatQueryOperatorInput>;
  readonly height: InputMaybe<IntQueryOperatorInput>;
  readonly originalName: InputMaybe<StringQueryOperatorInput>;
  readonly src: InputMaybe<StringQueryOperatorInput>;
  readonly tracedSVG: InputMaybe<StringQueryOperatorInput>;
  readonly width: InputMaybe<IntQueryOperatorInput>;
};

type ImageSharpResizeSortInput = {
  readonly aspectRatio: InputMaybe<SortOrderEnum>;
  readonly height: InputMaybe<SortOrderEnum>;
  readonly originalName: InputMaybe<SortOrderEnum>;
  readonly src: InputMaybe<SortOrderEnum>;
  readonly tracedSVG: InputMaybe<SortOrderEnum>;
  readonly width: InputMaybe<SortOrderEnum>;
};

type ImageSharpSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly fixed: InputMaybe<ImageSharpFixedSortInput>;
  readonly fluid: InputMaybe<ImageSharpFluidSortInput>;
  readonly gatsbyImageData: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly original: InputMaybe<ImageSharpOriginalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly resize: InputMaybe<ImageSharpResizeSortInput>;
};

type IntQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['Int']>;
  readonly gt: InputMaybe<Scalars['Int']>;
  readonly gte: InputMaybe<Scalars['Int']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
  readonly lt: InputMaybe<Scalars['Int']>;
  readonly lte: InputMaybe<Scalars['Int']>;
  readonly ne: InputMaybe<Scalars['Int']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['Int']>>>;
};

type Internal = {
  readonly content: Maybe<Scalars['String']>;
  readonly contentDigest: Scalars['String'];
  readonly contentFilePath: Maybe<Scalars['String']>;
  readonly description: Maybe<Scalars['String']>;
  readonly fieldOwners: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly ignoreType: Maybe<Scalars['Boolean']>;
  readonly mediaType: Maybe<Scalars['String']>;
  readonly owner: Scalars['String'];
  readonly type: Scalars['String'];
};

type InternalFieldSelector = {
  readonly content: InputMaybe<FieldSelectorEnum>;
  readonly contentDigest: InputMaybe<FieldSelectorEnum>;
  readonly contentFilePath: InputMaybe<FieldSelectorEnum>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly fieldOwners: InputMaybe<FieldSelectorEnum>;
  readonly ignoreType: InputMaybe<FieldSelectorEnum>;
  readonly mediaType: InputMaybe<FieldSelectorEnum>;
  readonly owner: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type InternalFilterInput = {
  readonly content: InputMaybe<StringQueryOperatorInput>;
  readonly contentDigest: InputMaybe<StringQueryOperatorInput>;
  readonly contentFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly fieldOwners: InputMaybe<StringQueryOperatorInput>;
  readonly ignoreType: InputMaybe<BooleanQueryOperatorInput>;
  readonly mediaType: InputMaybe<StringQueryOperatorInput>;
  readonly owner: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type InternalSortInput = {
  readonly content: InputMaybe<SortOrderEnum>;
  readonly contentDigest: InputMaybe<SortOrderEnum>;
  readonly contentFilePath: InputMaybe<SortOrderEnum>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly fieldOwners: InputMaybe<SortOrderEnum>;
  readonly ignoreType: InputMaybe<SortOrderEnum>;
  readonly mediaType: InputMaybe<SortOrderEnum>;
  readonly owner: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type JPGOptions = {
  readonly progressive: InputMaybe<Scalars['Boolean']>;
  readonly quality: InputMaybe<Scalars['Int']>;
};

type JSONQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['JSON']>;
  readonly glob: InputMaybe<Scalars['JSON']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['JSON']>>>;
  readonly ne: InputMaybe<Scalars['JSON']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['JSON']>>>;
  readonly regex: InputMaybe<Scalars['JSON']>;
};

type MarkdownExcerptFormats =
  | 'HTML'
  | 'MARKDOWN'
  | 'PLAIN';

type MarkdownHeading = {
  readonly depth: Maybe<Scalars['Int']>;
  readonly id: Maybe<Scalars['String']>;
  readonly value: Maybe<Scalars['String']>;
};

type MarkdownHeadingFieldSelector = {
  readonly depth: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly value: InputMaybe<FieldSelectorEnum>;
};

type MarkdownHeadingFilterInput = {
  readonly depth: InputMaybe<IntQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly value: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownHeadingFilterListInput = {
  readonly elemMatch: InputMaybe<MarkdownHeadingFilterInput>;
};

type MarkdownHeadingLevels =
  | 'h1'
  | 'h2'
  | 'h3'
  | 'h4'
  | 'h5'
  | 'h6';

type MarkdownHeadingSortInput = {
  readonly depth: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly value: InputMaybe<SortOrderEnum>;
};

type MarkdownRemark = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly excerpt: Maybe<Scalars['String']>;
  readonly excerptAst: Maybe<Scalars['JSON']>;
  readonly frontmatter: Maybe<MarkdownRemarkFrontmatter>;
  readonly headings: Maybe<ReadonlyArray<Maybe<MarkdownHeading>>>;
  readonly html: Maybe<Scalars['String']>;
  readonly htmlAst: Maybe<Scalars['JSON']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
  readonly rawMarkdownBody: Maybe<Scalars['String']>;
  readonly tableOfContents: Maybe<Scalars['String']>;
  readonly timeToRead: Maybe<Scalars['Int']>;
  readonly wordCount: Maybe<MarkdownWordCount>;
};


type MarkdownRemark_excerptArgs = {
  format?: InputMaybe<MarkdownExcerptFormats>;
  pruneLength?: InputMaybe<Scalars['Int']>;
  truncate?: InputMaybe<Scalars['Boolean']>;
};


type MarkdownRemark_excerptAstArgs = {
  pruneLength?: InputMaybe<Scalars['Int']>;
  truncate?: InputMaybe<Scalars['Boolean']>;
};


type MarkdownRemark_headingsArgs = {
  depth: InputMaybe<MarkdownHeadingLevels>;
};


type MarkdownRemark_tableOfContentsArgs = {
  absolute?: InputMaybe<Scalars['Boolean']>;
  heading: InputMaybe<Scalars['String']>;
  maxDepth: InputMaybe<Scalars['Int']>;
  pathToSlugField?: InputMaybe<Scalars['String']>;
};

type MarkdownRemarkConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<MarkdownRemarkEdge>;
  readonly group: ReadonlyArray<MarkdownRemarkGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<MarkdownRemark>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type MarkdownRemarkConnection_distinctArgs = {
  field: MarkdownRemarkFieldSelector;
};


type MarkdownRemarkConnection_groupArgs = {
  field: MarkdownRemarkFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type MarkdownRemarkConnection_maxArgs = {
  field: MarkdownRemarkFieldSelector;
};


type MarkdownRemarkConnection_minArgs = {
  field: MarkdownRemarkFieldSelector;
};


type MarkdownRemarkConnection_sumArgs = {
  field: MarkdownRemarkFieldSelector;
};

type MarkdownRemarkEdge = {
  readonly next: Maybe<MarkdownRemark>;
  readonly node: MarkdownRemark;
  readonly previous: Maybe<MarkdownRemark>;
};

type MarkdownRemarkFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly excerpt: InputMaybe<FieldSelectorEnum>;
  readonly excerptAst: InputMaybe<FieldSelectorEnum>;
  readonly frontmatter: InputMaybe<MarkdownRemarkFrontmatterFieldSelector>;
  readonly headings: InputMaybe<MarkdownHeadingFieldSelector>;
  readonly html: InputMaybe<FieldSelectorEnum>;
  readonly htmlAst: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly rawMarkdownBody: InputMaybe<FieldSelectorEnum>;
  readonly tableOfContents: InputMaybe<FieldSelectorEnum>;
  readonly timeToRead: InputMaybe<FieldSelectorEnum>;
  readonly wordCount: InputMaybe<MarkdownWordCountFieldSelector>;
};

type MarkdownRemarkFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly excerpt: InputMaybe<StringQueryOperatorInput>;
  readonly excerptAst: InputMaybe<JSONQueryOperatorInput>;
  readonly frontmatter: InputMaybe<MarkdownRemarkFrontmatterFilterInput>;
  readonly headings: InputMaybe<MarkdownHeadingFilterListInput>;
  readonly html: InputMaybe<StringQueryOperatorInput>;
  readonly htmlAst: InputMaybe<JSONQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly rawMarkdownBody: InputMaybe<StringQueryOperatorInput>;
  readonly tableOfContents: InputMaybe<StringQueryOperatorInput>;
  readonly timeToRead: InputMaybe<IntQueryOperatorInput>;
  readonly wordCount: InputMaybe<MarkdownWordCountFilterInput>;
};

type MarkdownRemarkFilterListInput = {
  readonly elemMatch: InputMaybe<MarkdownRemarkFilterInput>;
};

type MarkdownRemarkFrontmatter = {
  readonly actionLink: Maybe<Scalars['String']>;
  readonly description: Maybe<Scalars['String']>;
  readonly displayOnSite: Maybe<Scalars['Boolean']>;
  readonly githubLink: Maybe<Scalars['String']>;
  readonly lastEdited: Maybe<Scalars['Date']>;
  readonly readableId: Maybe<Scalars['String']>;
  readonly status: Maybe<MarkdownRemarkFrontmatterStatus>;
  readonly tags: Maybe<ReadonlyArray<Maybe<MarkdownRemarkFrontmatterTags>>>;
  readonly thumbnailImage: Maybe<ReadonlyArray<Maybe<MarkdownRemarkFrontmatterThumbnailImage>>>;
  readonly title: Maybe<Scalars['String']>;
};


type MarkdownRemarkFrontmatter_lastEditedArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type MarkdownRemarkFrontmatterFieldSelector = {
  readonly actionLink: InputMaybe<FieldSelectorEnum>;
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly displayOnSite: InputMaybe<FieldSelectorEnum>;
  readonly githubLink: InputMaybe<FieldSelectorEnum>;
  readonly lastEdited: InputMaybe<FieldSelectorEnum>;
  readonly readableId: InputMaybe<FieldSelectorEnum>;
  readonly status: InputMaybe<MarkdownRemarkFrontmatterStatusFieldSelector>;
  readonly tags: InputMaybe<MarkdownRemarkFrontmatterTagsFieldSelector>;
  readonly thumbnailImage: InputMaybe<MarkdownRemarkFrontmatterThumbnailImageFieldSelector>;
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type MarkdownRemarkFrontmatterFilterInput = {
  readonly actionLink: InputMaybe<StringQueryOperatorInput>;
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly displayOnSite: InputMaybe<BooleanQueryOperatorInput>;
  readonly githubLink: InputMaybe<StringQueryOperatorInput>;
  readonly lastEdited: InputMaybe<DateQueryOperatorInput>;
  readonly readableId: InputMaybe<StringQueryOperatorInput>;
  readonly status: InputMaybe<MarkdownRemarkFrontmatterStatusFilterInput>;
  readonly tags: InputMaybe<MarkdownRemarkFrontmatterTagsFilterListInput>;
  readonly thumbnailImage: InputMaybe<MarkdownRemarkFrontmatterThumbnailImageFilterListInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownRemarkFrontmatterSortInput = {
  readonly actionLink: InputMaybe<SortOrderEnum>;
  readonly description: InputMaybe<SortOrderEnum>;
  readonly displayOnSite: InputMaybe<SortOrderEnum>;
  readonly githubLink: InputMaybe<SortOrderEnum>;
  readonly lastEdited: InputMaybe<SortOrderEnum>;
  readonly readableId: InputMaybe<SortOrderEnum>;
  readonly status: InputMaybe<MarkdownRemarkFrontmatterStatusSortInput>;
  readonly tags: InputMaybe<MarkdownRemarkFrontmatterTagsSortInput>;
  readonly thumbnailImage: InputMaybe<MarkdownRemarkFrontmatterThumbnailImageSortInput>;
  readonly title: InputMaybe<SortOrderEnum>;
};

type MarkdownRemarkFrontmatterStatus = {
  readonly color: Maybe<Scalars['String']>;
  readonly id: Maybe<Scalars['String']>;
  readonly name: Maybe<Scalars['String']>;
};

type MarkdownRemarkFrontmatterStatusFieldSelector = {
  readonly color: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
};

type MarkdownRemarkFrontmatterStatusFilterInput = {
  readonly color: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownRemarkFrontmatterStatusSortInput = {
  readonly color: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
};

type MarkdownRemarkFrontmatterTags = {
  readonly color: Maybe<Scalars['String']>;
  readonly id: Maybe<Scalars['String']>;
  readonly name: Maybe<Scalars['String']>;
};

type MarkdownRemarkFrontmatterTagsFieldSelector = {
  readonly color: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
};

type MarkdownRemarkFrontmatterTagsFilterInput = {
  readonly color: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownRemarkFrontmatterTagsFilterListInput = {
  readonly elemMatch: InputMaybe<MarkdownRemarkFrontmatterTagsFilterInput>;
};

type MarkdownRemarkFrontmatterTagsSortInput = {
  readonly color: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
};

type MarkdownRemarkFrontmatterThumbnailImage = {
  readonly file: Maybe<MarkdownRemarkFrontmatterThumbnailImageFile>;
  readonly name: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
};

type MarkdownRemarkFrontmatterThumbnailImageFieldSelector = {
  readonly file: InputMaybe<MarkdownRemarkFrontmatterThumbnailImageFileFieldSelector>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type MarkdownRemarkFrontmatterThumbnailImageFile = {
  readonly expiry_time: Maybe<Scalars['Date']>;
  readonly url: Maybe<Scalars['String']>;
};


type MarkdownRemarkFrontmatterThumbnailImageFile_expiry_timeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type MarkdownRemarkFrontmatterThumbnailImageFileFieldSelector = {
  readonly expiry_time: InputMaybe<FieldSelectorEnum>;
  readonly url: InputMaybe<FieldSelectorEnum>;
};

type MarkdownRemarkFrontmatterThumbnailImageFileFilterInput = {
  readonly expiry_time: InputMaybe<DateQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownRemarkFrontmatterThumbnailImageFileSortInput = {
  readonly expiry_time: InputMaybe<SortOrderEnum>;
  readonly url: InputMaybe<SortOrderEnum>;
};

type MarkdownRemarkFrontmatterThumbnailImageFilterInput = {
  readonly file: InputMaybe<MarkdownRemarkFrontmatterThumbnailImageFileFilterInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type MarkdownRemarkFrontmatterThumbnailImageFilterListInput = {
  readonly elemMatch: InputMaybe<MarkdownRemarkFrontmatterThumbnailImageFilterInput>;
};

type MarkdownRemarkFrontmatterThumbnailImageSortInput = {
  readonly file: InputMaybe<MarkdownRemarkFrontmatterThumbnailImageFileSortInput>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type MarkdownRemarkGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<MarkdownRemarkEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<MarkdownRemarkGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<MarkdownRemark>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type MarkdownRemarkGroupConnection_distinctArgs = {
  field: MarkdownRemarkFieldSelector;
};


type MarkdownRemarkGroupConnection_groupArgs = {
  field: MarkdownRemarkFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type MarkdownRemarkGroupConnection_maxArgs = {
  field: MarkdownRemarkFieldSelector;
};


type MarkdownRemarkGroupConnection_minArgs = {
  field: MarkdownRemarkFieldSelector;
};


type MarkdownRemarkGroupConnection_sumArgs = {
  field: MarkdownRemarkFieldSelector;
};

type MarkdownRemarkSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly excerpt: InputMaybe<SortOrderEnum>;
  readonly excerptAst: InputMaybe<SortOrderEnum>;
  readonly frontmatter: InputMaybe<MarkdownRemarkFrontmatterSortInput>;
  readonly headings: InputMaybe<MarkdownHeadingSortInput>;
  readonly html: InputMaybe<SortOrderEnum>;
  readonly htmlAst: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly rawMarkdownBody: InputMaybe<SortOrderEnum>;
  readonly tableOfContents: InputMaybe<SortOrderEnum>;
  readonly timeToRead: InputMaybe<SortOrderEnum>;
  readonly wordCount: InputMaybe<MarkdownWordCountSortInput>;
};

type MarkdownWordCount = {
  readonly paragraphs: Maybe<Scalars['Int']>;
  readonly sentences: Maybe<Scalars['Int']>;
  readonly words: Maybe<Scalars['Int']>;
};

type MarkdownWordCountFieldSelector = {
  readonly paragraphs: InputMaybe<FieldSelectorEnum>;
  readonly sentences: InputMaybe<FieldSelectorEnum>;
  readonly words: InputMaybe<FieldSelectorEnum>;
};

type MarkdownWordCountFilterInput = {
  readonly paragraphs: InputMaybe<IntQueryOperatorInput>;
  readonly sentences: InputMaybe<IntQueryOperatorInput>;
  readonly words: InputMaybe<IntQueryOperatorInput>;
};

type MarkdownWordCountSortInput = {
  readonly paragraphs: InputMaybe<SortOrderEnum>;
  readonly sentences: InputMaybe<SortOrderEnum>;
  readonly words: InputMaybe<SortOrderEnum>;
};

/** Node Interface */
type Node = {
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};

type NodeFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type NodeFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type NodeFilterListInput = {
  readonly elemMatch: InputMaybe<NodeFilterInput>;
};

type NodeSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type Notion = Node & {
  readonly archived: Maybe<Scalars['Boolean']>;
  /** Returns the first child node of type MarkdownRemark or null if there are no children of given type on this node */
  readonly childMarkdownRemark: Maybe<MarkdownRemark>;
  readonly children: ReadonlyArray<Node>;
  /** Returns all children nodes filtered by type MarkdownRemark */
  readonly childrenMarkdownRemark: Maybe<ReadonlyArray<Maybe<MarkdownRemark>>>;
  readonly createdAt: Maybe<Scalars['Date']>;
  readonly fields: Maybe<NotionFields>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly json: Maybe<Scalars['String']>;
  readonly markdownString: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly properties: Maybe<NotionProperties>;
  readonly raw: Maybe<NotionRaw>;
  readonly thumbnailImg: Maybe<File>;
  readonly title: Maybe<Scalars['String']>;
  readonly updatedAt: Maybe<Scalars['Date']>;
};


type Notion_createdAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type Notion_updatedAtArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type NotionConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<NotionEdge>;
  readonly group: ReadonlyArray<NotionGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Notion>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type NotionConnection_distinctArgs = {
  field: NotionFieldSelector;
};


type NotionConnection_groupArgs = {
  field: NotionFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type NotionConnection_maxArgs = {
  field: NotionFieldSelector;
};


type NotionConnection_minArgs = {
  field: NotionFieldSelector;
};


type NotionConnection_sumArgs = {
  field: NotionFieldSelector;
};

type NotionEdge = {
  readonly next: Maybe<Notion>;
  readonly node: Notion;
  readonly previous: Maybe<Notion>;
};

type NotionFieldSelector = {
  readonly archived: InputMaybe<FieldSelectorEnum>;
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFieldSelector>;
  readonly createdAt: InputMaybe<FieldSelectorEnum>;
  readonly fields: InputMaybe<NotionFieldsFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly json: InputMaybe<FieldSelectorEnum>;
  readonly markdownString: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly properties: InputMaybe<NotionPropertiesFieldSelector>;
  readonly raw: InputMaybe<NotionRawFieldSelector>;
  readonly thumbnailImg: InputMaybe<FileFieldSelector>;
  readonly title: InputMaybe<FieldSelectorEnum>;
  readonly updatedAt: InputMaybe<FieldSelectorEnum>;
};

type NotionFields = {
  readonly localFile: Maybe<Scalars['String']>;
};

type NotionFieldsFieldSelector = {
  readonly localFile: InputMaybe<FieldSelectorEnum>;
};

type NotionFieldsFilterInput = {
  readonly localFile: InputMaybe<StringQueryOperatorInput>;
};

type NotionFieldsSortInput = {
  readonly localFile: InputMaybe<SortOrderEnum>;
};

type NotionFilterInput = {
  readonly archived: InputMaybe<BooleanQueryOperatorInput>;
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  readonly createdAt: InputMaybe<DateQueryOperatorInput>;
  readonly fields: InputMaybe<NotionFieldsFilterInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly json: InputMaybe<StringQueryOperatorInput>;
  readonly markdownString: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly properties: InputMaybe<NotionPropertiesFilterInput>;
  readonly raw: InputMaybe<NotionRawFilterInput>;
  readonly thumbnailImg: InputMaybe<FileFilterInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly updatedAt: InputMaybe<DateQueryOperatorInput>;
};

type NotionGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<NotionEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<NotionGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Notion>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type NotionGroupConnection_distinctArgs = {
  field: NotionFieldSelector;
};


type NotionGroupConnection_groupArgs = {
  field: NotionFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type NotionGroupConnection_maxArgs = {
  field: NotionFieldSelector;
};


type NotionGroupConnection_minArgs = {
  field: NotionFieldSelector;
};


type NotionGroupConnection_sumArgs = {
  field: NotionFieldSelector;
};

type NotionProperties = {
  readonly actionLink: Maybe<NotionPropertiesActionLink>;
  readonly description: Maybe<NotionPropertiesDescription>;
  readonly displayOnSite: Maybe<NotionPropertiesDisplayOnSite>;
  readonly githubLink: Maybe<NotionPropertiesGithubLink>;
  readonly lastEdited: Maybe<NotionPropertiesLastEdited>;
  readonly readableId: Maybe<NotionPropertiesReadableId>;
  readonly status: Maybe<NotionPropertiesStatus>;
  readonly tags: Maybe<NotionPropertiesTags>;
  readonly thumbnailImage: Maybe<NotionPropertiesThumbnailImage>;
};

type NotionPropertiesActionLink = {
  readonly id: Maybe<Scalars['String']>;
  readonly key: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
  readonly value: Maybe<Scalars['String']>;
};

type NotionPropertiesActionLinkFieldSelector = {
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly key: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
  readonly value: InputMaybe<FieldSelectorEnum>;
};

type NotionPropertiesActionLinkFilterInput = {
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly key: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
  readonly value: InputMaybe<StringQueryOperatorInput>;
};

type NotionPropertiesActionLinkSortInput = {
  readonly id: InputMaybe<SortOrderEnum>;
  readonly key: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
  readonly value: InputMaybe<SortOrderEnum>;
};

type NotionPropertiesDescription = {
  readonly id: Maybe<Scalars['String']>;
  readonly key: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
  readonly value: Maybe<Scalars['String']>;
};

type NotionPropertiesDescriptionFieldSelector = {
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly key: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
  readonly value: InputMaybe<FieldSelectorEnum>;
};

type NotionPropertiesDescriptionFilterInput = {
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly key: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
  readonly value: InputMaybe<StringQueryOperatorInput>;
};

type NotionPropertiesDescriptionSortInput = {
  readonly id: InputMaybe<SortOrderEnum>;
  readonly key: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
  readonly value: InputMaybe<SortOrderEnum>;
};

type NotionPropertiesDisplayOnSite = {
  readonly id: Maybe<Scalars['String']>;
  readonly key: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
  readonly value: Maybe<Scalars['Boolean']>;
};

type NotionPropertiesDisplayOnSiteFieldSelector = {
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly key: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
  readonly value: InputMaybe<FieldSelectorEnum>;
};

type NotionPropertiesDisplayOnSiteFilterInput = {
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly key: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
  readonly value: InputMaybe<BooleanQueryOperatorInput>;
};

type NotionPropertiesDisplayOnSiteSortInput = {
  readonly id: InputMaybe<SortOrderEnum>;
  readonly key: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
  readonly value: InputMaybe<SortOrderEnum>;
};

type NotionPropertiesFieldSelector = {
  readonly actionLink: InputMaybe<NotionPropertiesActionLinkFieldSelector>;
  readonly description: InputMaybe<NotionPropertiesDescriptionFieldSelector>;
  readonly displayOnSite: InputMaybe<NotionPropertiesDisplayOnSiteFieldSelector>;
  readonly githubLink: InputMaybe<NotionPropertiesGithubLinkFieldSelector>;
  readonly lastEdited: InputMaybe<NotionPropertiesLastEditedFieldSelector>;
  readonly readableId: InputMaybe<NotionPropertiesReadableIdFieldSelector>;
  readonly status: InputMaybe<NotionPropertiesStatusFieldSelector>;
  readonly tags: InputMaybe<NotionPropertiesTagsFieldSelector>;
  readonly thumbnailImage: InputMaybe<NotionPropertiesThumbnailImageFieldSelector>;
};

type NotionPropertiesFilterInput = {
  readonly actionLink: InputMaybe<NotionPropertiesActionLinkFilterInput>;
  readonly description: InputMaybe<NotionPropertiesDescriptionFilterInput>;
  readonly displayOnSite: InputMaybe<NotionPropertiesDisplayOnSiteFilterInput>;
  readonly githubLink: InputMaybe<NotionPropertiesGithubLinkFilterInput>;
  readonly lastEdited: InputMaybe<NotionPropertiesLastEditedFilterInput>;
  readonly readableId: InputMaybe<NotionPropertiesReadableIdFilterInput>;
  readonly status: InputMaybe<NotionPropertiesStatusFilterInput>;
  readonly tags: InputMaybe<NotionPropertiesTagsFilterInput>;
  readonly thumbnailImage: InputMaybe<NotionPropertiesThumbnailImageFilterInput>;
};

type NotionPropertiesGithubLink = {
  readonly id: Maybe<Scalars['String']>;
  readonly key: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
  readonly value: Maybe<Scalars['String']>;
};

type NotionPropertiesGithubLinkFieldSelector = {
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly key: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
  readonly value: InputMaybe<FieldSelectorEnum>;
};

type NotionPropertiesGithubLinkFilterInput = {
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly key: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
  readonly value: InputMaybe<StringQueryOperatorInput>;
};

type NotionPropertiesGithubLinkSortInput = {
  readonly id: InputMaybe<SortOrderEnum>;
  readonly key: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
  readonly value: InputMaybe<SortOrderEnum>;
};

type NotionPropertiesLastEdited = {
  readonly id: Maybe<Scalars['String']>;
  readonly key: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
  readonly value: Maybe<Scalars['Date']>;
};


type NotionPropertiesLastEdited_valueArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type NotionPropertiesLastEditedFieldSelector = {
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly key: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
  readonly value: InputMaybe<FieldSelectorEnum>;
};

type NotionPropertiesLastEditedFilterInput = {
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly key: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
  readonly value: InputMaybe<DateQueryOperatorInput>;
};

type NotionPropertiesLastEditedSortInput = {
  readonly id: InputMaybe<SortOrderEnum>;
  readonly key: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
  readonly value: InputMaybe<SortOrderEnum>;
};

type NotionPropertiesReadableId = {
  readonly id: Maybe<Scalars['String']>;
  readonly key: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
  readonly value: Maybe<Scalars['String']>;
};

type NotionPropertiesReadableIdFieldSelector = {
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly key: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
  readonly value: InputMaybe<FieldSelectorEnum>;
};

type NotionPropertiesReadableIdFilterInput = {
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly key: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
  readonly value: InputMaybe<StringQueryOperatorInput>;
};

type NotionPropertiesReadableIdSortInput = {
  readonly id: InputMaybe<SortOrderEnum>;
  readonly key: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
  readonly value: InputMaybe<SortOrderEnum>;
};

type NotionPropertiesSortInput = {
  readonly actionLink: InputMaybe<NotionPropertiesActionLinkSortInput>;
  readonly description: InputMaybe<NotionPropertiesDescriptionSortInput>;
  readonly displayOnSite: InputMaybe<NotionPropertiesDisplayOnSiteSortInput>;
  readonly githubLink: InputMaybe<NotionPropertiesGithubLinkSortInput>;
  readonly lastEdited: InputMaybe<NotionPropertiesLastEditedSortInput>;
  readonly readableId: InputMaybe<NotionPropertiesReadableIdSortInput>;
  readonly status: InputMaybe<NotionPropertiesStatusSortInput>;
  readonly tags: InputMaybe<NotionPropertiesTagsSortInput>;
  readonly thumbnailImage: InputMaybe<NotionPropertiesThumbnailImageSortInput>;
};

type NotionPropertiesStatus = {
  readonly id: Maybe<Scalars['String']>;
  readonly key: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
  readonly value: Maybe<NotionPropertiesStatusValue>;
};

type NotionPropertiesStatusFieldSelector = {
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly key: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
  readonly value: InputMaybe<NotionPropertiesStatusValueFieldSelector>;
};

type NotionPropertiesStatusFilterInput = {
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly key: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
  readonly value: InputMaybe<NotionPropertiesStatusValueFilterInput>;
};

type NotionPropertiesStatusSortInput = {
  readonly id: InputMaybe<SortOrderEnum>;
  readonly key: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
  readonly value: InputMaybe<NotionPropertiesStatusValueSortInput>;
};

type NotionPropertiesStatusValue = {
  readonly color: Maybe<Scalars['String']>;
  readonly id: Maybe<Scalars['String']>;
  readonly name: Maybe<Scalars['String']>;
};

type NotionPropertiesStatusValueFieldSelector = {
  readonly color: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
};

type NotionPropertiesStatusValueFilterInput = {
  readonly color: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
};

type NotionPropertiesStatusValueSortInput = {
  readonly color: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
};

type NotionPropertiesTags = {
  readonly id: Maybe<Scalars['String']>;
  readonly key: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
  readonly value: Maybe<ReadonlyArray<Maybe<NotionPropertiesTagsValue>>>;
};

type NotionPropertiesTagsFieldSelector = {
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly key: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
  readonly value: InputMaybe<NotionPropertiesTagsValueFieldSelector>;
};

type NotionPropertiesTagsFilterInput = {
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly key: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
  readonly value: InputMaybe<NotionPropertiesTagsValueFilterListInput>;
};

type NotionPropertiesTagsSortInput = {
  readonly id: InputMaybe<SortOrderEnum>;
  readonly key: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
  readonly value: InputMaybe<NotionPropertiesTagsValueSortInput>;
};

type NotionPropertiesTagsValue = {
  readonly color: Maybe<Scalars['String']>;
  readonly id: Maybe<Scalars['String']>;
  readonly name: Maybe<Scalars['String']>;
};

type NotionPropertiesTagsValueFieldSelector = {
  readonly color: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
};

type NotionPropertiesTagsValueFilterInput = {
  readonly color: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
};

type NotionPropertiesTagsValueFilterListInput = {
  readonly elemMatch: InputMaybe<NotionPropertiesTagsValueFilterInput>;
};

type NotionPropertiesTagsValueSortInput = {
  readonly color: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
};

type NotionPropertiesThumbnailImage = {
  readonly id: Maybe<Scalars['String']>;
  readonly key: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
  readonly value: Maybe<ReadonlyArray<Maybe<NotionPropertiesThumbnailImageValue>>>;
};

type NotionPropertiesThumbnailImageFieldSelector = {
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly key: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
  readonly value: InputMaybe<NotionPropertiesThumbnailImageValueFieldSelector>;
};

type NotionPropertiesThumbnailImageFilterInput = {
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly key: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
  readonly value: InputMaybe<NotionPropertiesThumbnailImageValueFilterListInput>;
};

type NotionPropertiesThumbnailImageSortInput = {
  readonly id: InputMaybe<SortOrderEnum>;
  readonly key: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
  readonly value: InputMaybe<NotionPropertiesThumbnailImageValueSortInput>;
};

type NotionPropertiesThumbnailImageValue = {
  readonly file: Maybe<NotionPropertiesThumbnailImageValueFile>;
  readonly name: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
};

type NotionPropertiesThumbnailImageValueFieldSelector = {
  readonly file: InputMaybe<NotionPropertiesThumbnailImageValueFileFieldSelector>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type NotionPropertiesThumbnailImageValueFile = {
  readonly expiry_time: Maybe<Scalars['Date']>;
  readonly url: Maybe<Scalars['String']>;
};


type NotionPropertiesThumbnailImageValueFile_expiry_timeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type NotionPropertiesThumbnailImageValueFileFieldSelector = {
  readonly expiry_time: InputMaybe<FieldSelectorEnum>;
  readonly url: InputMaybe<FieldSelectorEnum>;
};

type NotionPropertiesThumbnailImageValueFileFilterInput = {
  readonly expiry_time: InputMaybe<DateQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

type NotionPropertiesThumbnailImageValueFileSortInput = {
  readonly expiry_time: InputMaybe<SortOrderEnum>;
  readonly url: InputMaybe<SortOrderEnum>;
};

type NotionPropertiesThumbnailImageValueFilterInput = {
  readonly file: InputMaybe<NotionPropertiesThumbnailImageValueFileFilterInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type NotionPropertiesThumbnailImageValueFilterListInput = {
  readonly elemMatch: InputMaybe<NotionPropertiesThumbnailImageValueFilterInput>;
};

type NotionPropertiesThumbnailImageValueSortInput = {
  readonly file: InputMaybe<NotionPropertiesThumbnailImageValueFileSortInput>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type NotionRaw = {
  readonly archived: Maybe<Scalars['Boolean']>;
  readonly children: Maybe<ReadonlyArray<Maybe<NotionRawChildren>>>;
  readonly created_by: Maybe<NotionRawCreated_by>;
  readonly created_time: Maybe<Scalars['Date']>;
  readonly icon: Maybe<NotionRawIcon>;
  readonly id: Maybe<Scalars['String']>;
  readonly last_edited_by: Maybe<NotionRawLast_edited_by>;
  readonly last_edited_time: Maybe<Scalars['Date']>;
  readonly object: Maybe<Scalars['String']>;
  readonly parent: Maybe<NotionRawParent>;
  readonly properties: Maybe<NotionRawProperties>;
  readonly public_url: Maybe<Scalars['String']>;
  readonly url: Maybe<Scalars['String']>;
};


type NotionRaw_created_timeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type NotionRaw_last_edited_timeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type NotionRawChildren = {
  readonly archived: Maybe<Scalars['Boolean']>;
  readonly bookmark: Maybe<NotionRawChildrenBookmark>;
  readonly bulleted_list_item: Maybe<NotionRawChildrenBulleted_list_item>;
  readonly child_database: Maybe<NotionRawChildrenChild_database>;
  readonly child_page: Maybe<NotionRawChildrenChild_page>;
  readonly children: Maybe<ReadonlyArray<Maybe<NotionRawChildrenChildren>>>;
  readonly code: Maybe<NotionRawChildrenCode>;
  readonly created_by: Maybe<NotionRawChildrenCreated_by>;
  readonly created_time: Maybe<Scalars['Date']>;
  readonly has_children: Maybe<Scalars['Boolean']>;
  readonly heading_1: Maybe<NotionRawChildrenHeading_1>;
  readonly heading_2: Maybe<NotionRawChildrenHeading_2>;
  readonly heading_3: Maybe<NotionRawChildrenHeading_3>;
  readonly id: Maybe<Scalars['String']>;
  readonly last_edited_by: Maybe<NotionRawChildrenLast_edited_by>;
  readonly last_edited_time: Maybe<Scalars['Date']>;
  readonly numbered_list_item: Maybe<NotionRawChildrenNumbered_list_item>;
  readonly object: Maybe<Scalars['String']>;
  readonly paragraph: Maybe<NotionRawChildrenParagraph>;
  readonly parent: Maybe<NotionRawChildrenParent>;
  readonly table_of_contents: Maybe<NotionRawChildrenTable_of_contents>;
  readonly to_do: Maybe<NotionRawChildrenTo_do>;
  readonly toggle: Maybe<NotionRawChildrenToggle>;
  readonly type: Maybe<Scalars['String']>;
};


type NotionRawChildren_created_timeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type NotionRawChildren_last_edited_timeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type NotionRawChildrenBookmark = {
  readonly url: Maybe<Scalars['String']>;
};

type NotionRawChildrenBookmarkFieldSelector = {
  readonly url: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenBookmarkFilterInput = {
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawChildrenBookmarkSortInput = {
  readonly url: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenBulleted_list_item = {
  readonly color: Maybe<Scalars['String']>;
  readonly text: Maybe<ReadonlyArray<Maybe<NotionRawChildrenBulleted_list_itemText>>>;
};

type NotionRawChildrenBulleted_list_itemFieldSelector = {
  readonly color: InputMaybe<FieldSelectorEnum>;
  readonly text: InputMaybe<NotionRawChildrenBulleted_list_itemTextFieldSelector>;
};

type NotionRawChildrenBulleted_list_itemFilterInput = {
  readonly color: InputMaybe<StringQueryOperatorInput>;
  readonly text: InputMaybe<NotionRawChildrenBulleted_list_itemTextFilterListInput>;
};

type NotionRawChildrenBulleted_list_itemSortInput = {
  readonly color: InputMaybe<SortOrderEnum>;
  readonly text: InputMaybe<NotionRawChildrenBulleted_list_itemTextSortInput>;
};

type NotionRawChildrenBulleted_list_itemText = {
  readonly annotations: Maybe<NotionRawChildrenBulleted_list_itemTextAnnotations>;
  readonly href: Maybe<Scalars['String']>;
  readonly plain_text: Maybe<Scalars['String']>;
  readonly text: Maybe<NotionRawChildrenBulleted_list_itemTextText>;
  readonly type: Maybe<Scalars['String']>;
};

type NotionRawChildrenBulleted_list_itemTextAnnotations = {
  readonly bold: Maybe<Scalars['Boolean']>;
  readonly code: Maybe<Scalars['Boolean']>;
  readonly color: Maybe<Scalars['String']>;
  readonly italic: Maybe<Scalars['Boolean']>;
  readonly strikethrough: Maybe<Scalars['Boolean']>;
  readonly underline: Maybe<Scalars['Boolean']>;
};

type NotionRawChildrenBulleted_list_itemTextAnnotationsFieldSelector = {
  readonly bold: InputMaybe<FieldSelectorEnum>;
  readonly code: InputMaybe<FieldSelectorEnum>;
  readonly color: InputMaybe<FieldSelectorEnum>;
  readonly italic: InputMaybe<FieldSelectorEnum>;
  readonly strikethrough: InputMaybe<FieldSelectorEnum>;
  readonly underline: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenBulleted_list_itemTextAnnotationsFilterInput = {
  readonly bold: InputMaybe<BooleanQueryOperatorInput>;
  readonly code: InputMaybe<BooleanQueryOperatorInput>;
  readonly color: InputMaybe<StringQueryOperatorInput>;
  readonly italic: InputMaybe<BooleanQueryOperatorInput>;
  readonly strikethrough: InputMaybe<BooleanQueryOperatorInput>;
  readonly underline: InputMaybe<BooleanQueryOperatorInput>;
};

type NotionRawChildrenBulleted_list_itemTextAnnotationsSortInput = {
  readonly bold: InputMaybe<SortOrderEnum>;
  readonly code: InputMaybe<SortOrderEnum>;
  readonly color: InputMaybe<SortOrderEnum>;
  readonly italic: InputMaybe<SortOrderEnum>;
  readonly strikethrough: InputMaybe<SortOrderEnum>;
  readonly underline: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenBulleted_list_itemTextFieldSelector = {
  readonly annotations: InputMaybe<NotionRawChildrenBulleted_list_itemTextAnnotationsFieldSelector>;
  readonly href: InputMaybe<FieldSelectorEnum>;
  readonly plain_text: InputMaybe<FieldSelectorEnum>;
  readonly text: InputMaybe<NotionRawChildrenBulleted_list_itemTextTextFieldSelector>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenBulleted_list_itemTextFilterInput = {
  readonly annotations: InputMaybe<NotionRawChildrenBulleted_list_itemTextAnnotationsFilterInput>;
  readonly href: InputMaybe<StringQueryOperatorInput>;
  readonly plain_text: InputMaybe<StringQueryOperatorInput>;
  readonly text: InputMaybe<NotionRawChildrenBulleted_list_itemTextTextFilterInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawChildrenBulleted_list_itemTextFilterListInput = {
  readonly elemMatch: InputMaybe<NotionRawChildrenBulleted_list_itemTextFilterInput>;
};

type NotionRawChildrenBulleted_list_itemTextSortInput = {
  readonly annotations: InputMaybe<NotionRawChildrenBulleted_list_itemTextAnnotationsSortInput>;
  readonly href: InputMaybe<SortOrderEnum>;
  readonly plain_text: InputMaybe<SortOrderEnum>;
  readonly text: InputMaybe<NotionRawChildrenBulleted_list_itemTextTextSortInput>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenBulleted_list_itemTextText = {
  readonly content: Maybe<Scalars['String']>;
  readonly link: Maybe<NotionRawChildrenBulleted_list_itemTextTextLink>;
};

type NotionRawChildrenBulleted_list_itemTextTextFieldSelector = {
  readonly content: InputMaybe<FieldSelectorEnum>;
  readonly link: InputMaybe<NotionRawChildrenBulleted_list_itemTextTextLinkFieldSelector>;
};

type NotionRawChildrenBulleted_list_itemTextTextFilterInput = {
  readonly content: InputMaybe<StringQueryOperatorInput>;
  readonly link: InputMaybe<NotionRawChildrenBulleted_list_itemTextTextLinkFilterInput>;
};

type NotionRawChildrenBulleted_list_itemTextTextLink = {
  readonly url: Maybe<Scalars['String']>;
};

type NotionRawChildrenBulleted_list_itemTextTextLinkFieldSelector = {
  readonly url: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenBulleted_list_itemTextTextLinkFilterInput = {
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawChildrenBulleted_list_itemTextTextLinkSortInput = {
  readonly url: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenBulleted_list_itemTextTextSortInput = {
  readonly content: InputMaybe<SortOrderEnum>;
  readonly link: InputMaybe<NotionRawChildrenBulleted_list_itemTextTextLinkSortInput>;
};

type NotionRawChildrenChild_database = {
  readonly title: Maybe<Scalars['String']>;
};

type NotionRawChildrenChild_databaseFieldSelector = {
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenChild_databaseFilterInput = {
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawChildrenChild_databaseSortInput = {
  readonly title: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenChild_page = {
  readonly title: Maybe<Scalars['String']>;
};

type NotionRawChildrenChild_pageFieldSelector = {
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenChild_pageFilterInput = {
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawChildrenChild_pageSortInput = {
  readonly title: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenChildren = {
  readonly archived: Maybe<Scalars['Boolean']>;
  readonly bulleted_list_item: Maybe<NotionRawChildrenChildrenBulleted_list_item>;
  readonly child_page: Maybe<NotionRawChildrenChildrenChild_page>;
  readonly children: Maybe<ReadonlyArray<Maybe<NotionRawChildrenChildrenChildren>>>;
  readonly created_by: Maybe<NotionRawChildrenChildrenCreated_by>;
  readonly created_time: Maybe<Scalars['Date']>;
  readonly has_children: Maybe<Scalars['Boolean']>;
  readonly heading_1: Maybe<NotionRawChildrenChildrenHeading_1>;
  readonly heading_2: Maybe<NotionRawChildrenChildrenHeading_2>;
  readonly heading_3: Maybe<NotionRawChildrenChildrenHeading_3>;
  readonly id: Maybe<Scalars['String']>;
  readonly last_edited_by: Maybe<NotionRawChildrenChildrenLast_edited_by>;
  readonly last_edited_time: Maybe<Scalars['Date']>;
  readonly link_preview: Maybe<NotionRawChildrenChildrenLink_preview>;
  readonly object: Maybe<Scalars['String']>;
  readonly paragraph: Maybe<NotionRawChildrenChildrenParagraph>;
  readonly parent: Maybe<NotionRawChildrenChildrenParent>;
  readonly quote: Maybe<NotionRawChildrenChildrenQuote>;
  readonly table_of_contents: Maybe<NotionRawChildrenChildrenTable_of_contents>;
  readonly type: Maybe<Scalars['String']>;
};


type NotionRawChildrenChildren_created_timeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type NotionRawChildrenChildren_last_edited_timeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type NotionRawChildrenChildrenBulleted_list_item = {
  readonly color: Maybe<Scalars['String']>;
  readonly text: Maybe<ReadonlyArray<Maybe<NotionRawChildrenChildrenBulleted_list_itemText>>>;
};

type NotionRawChildrenChildrenBulleted_list_itemFieldSelector = {
  readonly color: InputMaybe<FieldSelectorEnum>;
  readonly text: InputMaybe<NotionRawChildrenChildrenBulleted_list_itemTextFieldSelector>;
};

type NotionRawChildrenChildrenBulleted_list_itemFilterInput = {
  readonly color: InputMaybe<StringQueryOperatorInput>;
  readonly text: InputMaybe<NotionRawChildrenChildrenBulleted_list_itemTextFilterListInput>;
};

type NotionRawChildrenChildrenBulleted_list_itemSortInput = {
  readonly color: InputMaybe<SortOrderEnum>;
  readonly text: InputMaybe<NotionRawChildrenChildrenBulleted_list_itemTextSortInput>;
};

type NotionRawChildrenChildrenBulleted_list_itemText = {
  readonly annotations: Maybe<NotionRawChildrenChildrenBulleted_list_itemTextAnnotations>;
  readonly href: Maybe<Scalars['String']>;
  readonly plain_text: Maybe<Scalars['String']>;
  readonly text: Maybe<NotionRawChildrenChildrenBulleted_list_itemTextText>;
  readonly type: Maybe<Scalars['String']>;
};

type NotionRawChildrenChildrenBulleted_list_itemTextAnnotations = {
  readonly bold: Maybe<Scalars['Boolean']>;
  readonly code: Maybe<Scalars['Boolean']>;
  readonly color: Maybe<Scalars['String']>;
  readonly italic: Maybe<Scalars['Boolean']>;
  readonly strikethrough: Maybe<Scalars['Boolean']>;
  readonly underline: Maybe<Scalars['Boolean']>;
};

type NotionRawChildrenChildrenBulleted_list_itemTextAnnotationsFieldSelector = {
  readonly bold: InputMaybe<FieldSelectorEnum>;
  readonly code: InputMaybe<FieldSelectorEnum>;
  readonly color: InputMaybe<FieldSelectorEnum>;
  readonly italic: InputMaybe<FieldSelectorEnum>;
  readonly strikethrough: InputMaybe<FieldSelectorEnum>;
  readonly underline: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenChildrenBulleted_list_itemTextAnnotationsFilterInput = {
  readonly bold: InputMaybe<BooleanQueryOperatorInput>;
  readonly code: InputMaybe<BooleanQueryOperatorInput>;
  readonly color: InputMaybe<StringQueryOperatorInput>;
  readonly italic: InputMaybe<BooleanQueryOperatorInput>;
  readonly strikethrough: InputMaybe<BooleanQueryOperatorInput>;
  readonly underline: InputMaybe<BooleanQueryOperatorInput>;
};

type NotionRawChildrenChildrenBulleted_list_itemTextAnnotationsSortInput = {
  readonly bold: InputMaybe<SortOrderEnum>;
  readonly code: InputMaybe<SortOrderEnum>;
  readonly color: InputMaybe<SortOrderEnum>;
  readonly italic: InputMaybe<SortOrderEnum>;
  readonly strikethrough: InputMaybe<SortOrderEnum>;
  readonly underline: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenChildrenBulleted_list_itemTextFieldSelector = {
  readonly annotations: InputMaybe<NotionRawChildrenChildrenBulleted_list_itemTextAnnotationsFieldSelector>;
  readonly href: InputMaybe<FieldSelectorEnum>;
  readonly plain_text: InputMaybe<FieldSelectorEnum>;
  readonly text: InputMaybe<NotionRawChildrenChildrenBulleted_list_itemTextTextFieldSelector>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenChildrenBulleted_list_itemTextFilterInput = {
  readonly annotations: InputMaybe<NotionRawChildrenChildrenBulleted_list_itemTextAnnotationsFilterInput>;
  readonly href: InputMaybe<StringQueryOperatorInput>;
  readonly plain_text: InputMaybe<StringQueryOperatorInput>;
  readonly text: InputMaybe<NotionRawChildrenChildrenBulleted_list_itemTextTextFilterInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawChildrenChildrenBulleted_list_itemTextFilterListInput = {
  readonly elemMatch: InputMaybe<NotionRawChildrenChildrenBulleted_list_itemTextFilterInput>;
};

type NotionRawChildrenChildrenBulleted_list_itemTextSortInput = {
  readonly annotations: InputMaybe<NotionRawChildrenChildrenBulleted_list_itemTextAnnotationsSortInput>;
  readonly href: InputMaybe<SortOrderEnum>;
  readonly plain_text: InputMaybe<SortOrderEnum>;
  readonly text: InputMaybe<NotionRawChildrenChildrenBulleted_list_itemTextTextSortInput>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenChildrenBulleted_list_itemTextText = {
  readonly content: Maybe<Scalars['String']>;
  readonly link: Maybe<NotionRawChildrenChildrenBulleted_list_itemTextTextLink>;
};

type NotionRawChildrenChildrenBulleted_list_itemTextTextFieldSelector = {
  readonly content: InputMaybe<FieldSelectorEnum>;
  readonly link: InputMaybe<NotionRawChildrenChildrenBulleted_list_itemTextTextLinkFieldSelector>;
};

type NotionRawChildrenChildrenBulleted_list_itemTextTextFilterInput = {
  readonly content: InputMaybe<StringQueryOperatorInput>;
  readonly link: InputMaybe<NotionRawChildrenChildrenBulleted_list_itemTextTextLinkFilterInput>;
};

type NotionRawChildrenChildrenBulleted_list_itemTextTextLink = {
  readonly url: Maybe<Scalars['String']>;
};

type NotionRawChildrenChildrenBulleted_list_itemTextTextLinkFieldSelector = {
  readonly url: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenChildrenBulleted_list_itemTextTextLinkFilterInput = {
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawChildrenChildrenBulleted_list_itemTextTextLinkSortInput = {
  readonly url: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenChildrenBulleted_list_itemTextTextSortInput = {
  readonly content: InputMaybe<SortOrderEnum>;
  readonly link: InputMaybe<NotionRawChildrenChildrenBulleted_list_itemTextTextLinkSortInput>;
};

type NotionRawChildrenChildrenChild_page = {
  readonly title: Maybe<Scalars['String']>;
};

type NotionRawChildrenChildrenChild_pageFieldSelector = {
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenChildrenChild_pageFilterInput = {
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawChildrenChildrenChild_pageSortInput = {
  readonly title: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenChildrenChildren = {
  readonly archived: Maybe<Scalars['Boolean']>;
  readonly bookmark: Maybe<NotionRawChildrenChildrenChildrenBookmark>;
  readonly bulleted_list_item: Maybe<NotionRawChildrenChildrenChildrenBulleted_list_item>;
  readonly child_page: Maybe<NotionRawChildrenChildrenChildrenChild_page>;
  readonly children: Maybe<ReadonlyArray<Maybe<NotionRawChildrenChildrenChildrenChildren>>>;
  readonly code: Maybe<NotionRawChildrenChildrenChildrenCode>;
  readonly created_by: Maybe<NotionRawChildrenChildrenChildrenCreated_by>;
  readonly created_time: Maybe<Scalars['Date']>;
  readonly has_children: Maybe<Scalars['Boolean']>;
  readonly heading_1: Maybe<NotionRawChildrenChildrenChildrenHeading_1>;
  readonly heading_2: Maybe<NotionRawChildrenChildrenChildrenHeading_2>;
  readonly heading_3: Maybe<NotionRawChildrenChildrenChildrenHeading_3>;
  readonly id: Maybe<Scalars['String']>;
  readonly last_edited_by: Maybe<NotionRawChildrenChildrenChildrenLast_edited_by>;
  readonly last_edited_time: Maybe<Scalars['Date']>;
  readonly object: Maybe<Scalars['String']>;
  readonly paragraph: Maybe<NotionRawChildrenChildrenChildrenParagraph>;
  readonly parent: Maybe<NotionRawChildrenChildrenChildrenParent>;
  readonly toggle: Maybe<NotionRawChildrenChildrenChildrenToggle>;
  readonly type: Maybe<Scalars['String']>;
};


type NotionRawChildrenChildrenChildren_created_timeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type NotionRawChildrenChildrenChildren_last_edited_timeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type NotionRawChildrenChildrenChildrenBookmark = {
  readonly url: Maybe<Scalars['String']>;
};

type NotionRawChildrenChildrenChildrenBookmarkFieldSelector = {
  readonly url: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenChildrenChildrenBookmarkFilterInput = {
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawChildrenChildrenChildrenBookmarkSortInput = {
  readonly url: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenChildrenChildrenBulleted_list_item = {
  readonly color: Maybe<Scalars['String']>;
  readonly text: Maybe<ReadonlyArray<Maybe<NotionRawChildrenChildrenChildrenBulleted_list_itemText>>>;
};

type NotionRawChildrenChildrenChildrenBulleted_list_itemFieldSelector = {
  readonly color: InputMaybe<FieldSelectorEnum>;
  readonly text: InputMaybe<NotionRawChildrenChildrenChildrenBulleted_list_itemTextFieldSelector>;
};

type NotionRawChildrenChildrenChildrenBulleted_list_itemFilterInput = {
  readonly color: InputMaybe<StringQueryOperatorInput>;
  readonly text: InputMaybe<NotionRawChildrenChildrenChildrenBulleted_list_itemTextFilterListInput>;
};

type NotionRawChildrenChildrenChildrenBulleted_list_itemSortInput = {
  readonly color: InputMaybe<SortOrderEnum>;
  readonly text: InputMaybe<NotionRawChildrenChildrenChildrenBulleted_list_itemTextSortInput>;
};

type NotionRawChildrenChildrenChildrenBulleted_list_itemText = {
  readonly annotations: Maybe<NotionRawChildrenChildrenChildrenBulleted_list_itemTextAnnotations>;
  readonly href: Maybe<Scalars['String']>;
  readonly plain_text: Maybe<Scalars['String']>;
  readonly text: Maybe<NotionRawChildrenChildrenChildrenBulleted_list_itemTextText>;
  readonly type: Maybe<Scalars['String']>;
};

type NotionRawChildrenChildrenChildrenBulleted_list_itemTextAnnotations = {
  readonly bold: Maybe<Scalars['Boolean']>;
  readonly code: Maybe<Scalars['Boolean']>;
  readonly color: Maybe<Scalars['String']>;
  readonly italic: Maybe<Scalars['Boolean']>;
  readonly strikethrough: Maybe<Scalars['Boolean']>;
  readonly underline: Maybe<Scalars['Boolean']>;
};

type NotionRawChildrenChildrenChildrenBulleted_list_itemTextAnnotationsFieldSelector = {
  readonly bold: InputMaybe<FieldSelectorEnum>;
  readonly code: InputMaybe<FieldSelectorEnum>;
  readonly color: InputMaybe<FieldSelectorEnum>;
  readonly italic: InputMaybe<FieldSelectorEnum>;
  readonly strikethrough: InputMaybe<FieldSelectorEnum>;
  readonly underline: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenChildrenChildrenBulleted_list_itemTextAnnotationsFilterInput = {
  readonly bold: InputMaybe<BooleanQueryOperatorInput>;
  readonly code: InputMaybe<BooleanQueryOperatorInput>;
  readonly color: InputMaybe<StringQueryOperatorInput>;
  readonly italic: InputMaybe<BooleanQueryOperatorInput>;
  readonly strikethrough: InputMaybe<BooleanQueryOperatorInput>;
  readonly underline: InputMaybe<BooleanQueryOperatorInput>;
};

type NotionRawChildrenChildrenChildrenBulleted_list_itemTextAnnotationsSortInput = {
  readonly bold: InputMaybe<SortOrderEnum>;
  readonly code: InputMaybe<SortOrderEnum>;
  readonly color: InputMaybe<SortOrderEnum>;
  readonly italic: InputMaybe<SortOrderEnum>;
  readonly strikethrough: InputMaybe<SortOrderEnum>;
  readonly underline: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenChildrenChildrenBulleted_list_itemTextFieldSelector = {
  readonly annotations: InputMaybe<NotionRawChildrenChildrenChildrenBulleted_list_itemTextAnnotationsFieldSelector>;
  readonly href: InputMaybe<FieldSelectorEnum>;
  readonly plain_text: InputMaybe<FieldSelectorEnum>;
  readonly text: InputMaybe<NotionRawChildrenChildrenChildrenBulleted_list_itemTextTextFieldSelector>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenChildrenChildrenBulleted_list_itemTextFilterInput = {
  readonly annotations: InputMaybe<NotionRawChildrenChildrenChildrenBulleted_list_itemTextAnnotationsFilterInput>;
  readonly href: InputMaybe<StringQueryOperatorInput>;
  readonly plain_text: InputMaybe<StringQueryOperatorInput>;
  readonly text: InputMaybe<NotionRawChildrenChildrenChildrenBulleted_list_itemTextTextFilterInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawChildrenChildrenChildrenBulleted_list_itemTextFilterListInput = {
  readonly elemMatch: InputMaybe<NotionRawChildrenChildrenChildrenBulleted_list_itemTextFilterInput>;
};

type NotionRawChildrenChildrenChildrenBulleted_list_itemTextSortInput = {
  readonly annotations: InputMaybe<NotionRawChildrenChildrenChildrenBulleted_list_itemTextAnnotationsSortInput>;
  readonly href: InputMaybe<SortOrderEnum>;
  readonly plain_text: InputMaybe<SortOrderEnum>;
  readonly text: InputMaybe<NotionRawChildrenChildrenChildrenBulleted_list_itemTextTextSortInput>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenChildrenChildrenBulleted_list_itemTextText = {
  readonly content: Maybe<Scalars['String']>;
  readonly link: Maybe<NotionRawChildrenChildrenChildrenBulleted_list_itemTextTextLink>;
};

type NotionRawChildrenChildrenChildrenBulleted_list_itemTextTextFieldSelector = {
  readonly content: InputMaybe<FieldSelectorEnum>;
  readonly link: InputMaybe<NotionRawChildrenChildrenChildrenBulleted_list_itemTextTextLinkFieldSelector>;
};

type NotionRawChildrenChildrenChildrenBulleted_list_itemTextTextFilterInput = {
  readonly content: InputMaybe<StringQueryOperatorInput>;
  readonly link: InputMaybe<NotionRawChildrenChildrenChildrenBulleted_list_itemTextTextLinkFilterInput>;
};

type NotionRawChildrenChildrenChildrenBulleted_list_itemTextTextLink = {
  readonly url: Maybe<Scalars['String']>;
};

type NotionRawChildrenChildrenChildrenBulleted_list_itemTextTextLinkFieldSelector = {
  readonly url: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenChildrenChildrenBulleted_list_itemTextTextLinkFilterInput = {
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawChildrenChildrenChildrenBulleted_list_itemTextTextLinkSortInput = {
  readonly url: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenChildrenChildrenBulleted_list_itemTextTextSortInput = {
  readonly content: InputMaybe<SortOrderEnum>;
  readonly link: InputMaybe<NotionRawChildrenChildrenChildrenBulleted_list_itemTextTextLinkSortInput>;
};

type NotionRawChildrenChildrenChildrenChild_page = {
  readonly title: Maybe<Scalars['String']>;
};

type NotionRawChildrenChildrenChildrenChild_pageFieldSelector = {
  readonly title: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenChildrenChildrenChild_pageFilterInput = {
  readonly title: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawChildrenChildrenChildrenChild_pageSortInput = {
  readonly title: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenChildrenChildrenChildren = {
  readonly archived: Maybe<Scalars['Boolean']>;
  readonly bulleted_list_item: Maybe<NotionRawChildrenChildrenChildrenChildrenBulleted_list_item>;
  readonly children: Maybe<ReadonlyArray<Maybe<NotionRawChildrenChildrenChildrenChildrenChildren>>>;
  readonly created_by: Maybe<NotionRawChildrenChildrenChildrenChildrenCreated_by>;
  readonly created_time: Maybe<Scalars['Date']>;
  readonly has_children: Maybe<Scalars['Boolean']>;
  readonly heading_1: Maybe<NotionRawChildrenChildrenChildrenChildrenHeading_1>;
  readonly heading_3: Maybe<NotionRawChildrenChildrenChildrenChildrenHeading_3>;
  readonly id: Maybe<Scalars['String']>;
  readonly last_edited_by: Maybe<NotionRawChildrenChildrenChildrenChildrenLast_edited_by>;
  readonly last_edited_time: Maybe<Scalars['Date']>;
  readonly numbered_list_item: Maybe<NotionRawChildrenChildrenChildrenChildrenNumbered_list_item>;
  readonly object: Maybe<Scalars['String']>;
  readonly paragraph: Maybe<NotionRawChildrenChildrenChildrenChildrenParagraph>;
  readonly parent: Maybe<NotionRawChildrenChildrenChildrenChildrenParent>;
  readonly table_of_contents: Maybe<NotionRawChildrenChildrenChildrenChildrenTable_of_contents>;
  readonly to_do: Maybe<NotionRawChildrenChildrenChildrenChildrenTo_do>;
  readonly type: Maybe<Scalars['String']>;
};


type NotionRawChildrenChildrenChildrenChildren_created_timeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type NotionRawChildrenChildrenChildrenChildren_last_edited_timeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type NotionRawChildrenChildrenChildrenChildrenBulleted_list_item = {
  readonly color: Maybe<Scalars['String']>;
  readonly text: Maybe<ReadonlyArray<Maybe<NotionRawChildrenChildrenChildrenChildrenBulleted_list_itemText>>>;
};

type NotionRawChildrenChildrenChildrenChildrenBulleted_list_itemFieldSelector = {
  readonly color: InputMaybe<FieldSelectorEnum>;
  readonly text: InputMaybe<NotionRawChildrenChildrenChildrenChildrenBulleted_list_itemTextFieldSelector>;
};

type NotionRawChildrenChildrenChildrenChildrenBulleted_list_itemFilterInput = {
  readonly color: InputMaybe<StringQueryOperatorInput>;
  readonly text: InputMaybe<NotionRawChildrenChildrenChildrenChildrenBulleted_list_itemTextFilterListInput>;
};

type NotionRawChildrenChildrenChildrenChildrenBulleted_list_itemSortInput = {
  readonly color: InputMaybe<SortOrderEnum>;
  readonly text: InputMaybe<NotionRawChildrenChildrenChildrenChildrenBulleted_list_itemTextSortInput>;
};

type NotionRawChildrenChildrenChildrenChildrenBulleted_list_itemText = {
  readonly annotations: Maybe<NotionRawChildrenChildrenChildrenChildrenBulleted_list_itemTextAnnotations>;
  readonly href: Maybe<Scalars['String']>;
  readonly plain_text: Maybe<Scalars['String']>;
  readonly text: Maybe<NotionRawChildrenChildrenChildrenChildrenBulleted_list_itemTextText>;
  readonly type: Maybe<Scalars['String']>;
};

type NotionRawChildrenChildrenChildrenChildrenBulleted_list_itemTextAnnotations = {
  readonly bold: Maybe<Scalars['Boolean']>;
  readonly code: Maybe<Scalars['Boolean']>;
  readonly color: Maybe<Scalars['String']>;
  readonly italic: Maybe<Scalars['Boolean']>;
  readonly strikethrough: Maybe<Scalars['Boolean']>;
  readonly underline: Maybe<Scalars['Boolean']>;
};

type NotionRawChildrenChildrenChildrenChildrenBulleted_list_itemTextAnnotationsFieldSelector = {
  readonly bold: InputMaybe<FieldSelectorEnum>;
  readonly code: InputMaybe<FieldSelectorEnum>;
  readonly color: InputMaybe<FieldSelectorEnum>;
  readonly italic: InputMaybe<FieldSelectorEnum>;
  readonly strikethrough: InputMaybe<FieldSelectorEnum>;
  readonly underline: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenChildrenChildrenChildrenBulleted_list_itemTextAnnotationsFilterInput = {
  readonly bold: InputMaybe<BooleanQueryOperatorInput>;
  readonly code: InputMaybe<BooleanQueryOperatorInput>;
  readonly color: InputMaybe<StringQueryOperatorInput>;
  readonly italic: InputMaybe<BooleanQueryOperatorInput>;
  readonly strikethrough: InputMaybe<BooleanQueryOperatorInput>;
  readonly underline: InputMaybe<BooleanQueryOperatorInput>;
};

type NotionRawChildrenChildrenChildrenChildrenBulleted_list_itemTextAnnotationsSortInput = {
  readonly bold: InputMaybe<SortOrderEnum>;
  readonly code: InputMaybe<SortOrderEnum>;
  readonly color: InputMaybe<SortOrderEnum>;
  readonly italic: InputMaybe<SortOrderEnum>;
  readonly strikethrough: InputMaybe<SortOrderEnum>;
  readonly underline: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenChildrenChildrenChildrenBulleted_list_itemTextFieldSelector = {
  readonly annotations: InputMaybe<NotionRawChildrenChildrenChildrenChildrenBulleted_list_itemTextAnnotationsFieldSelector>;
  readonly href: InputMaybe<FieldSelectorEnum>;
  readonly plain_text: InputMaybe<FieldSelectorEnum>;
  readonly text: InputMaybe<NotionRawChildrenChildrenChildrenChildrenBulleted_list_itemTextTextFieldSelector>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenChildrenChildrenChildrenBulleted_list_itemTextFilterInput = {
  readonly annotations: InputMaybe<NotionRawChildrenChildrenChildrenChildrenBulleted_list_itemTextAnnotationsFilterInput>;
  readonly href: InputMaybe<StringQueryOperatorInput>;
  readonly plain_text: InputMaybe<StringQueryOperatorInput>;
  readonly text: InputMaybe<NotionRawChildrenChildrenChildrenChildrenBulleted_list_itemTextTextFilterInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawChildrenChildrenChildrenChildrenBulleted_list_itemTextFilterListInput = {
  readonly elemMatch: InputMaybe<NotionRawChildrenChildrenChildrenChildrenBulleted_list_itemTextFilterInput>;
};

type NotionRawChildrenChildrenChildrenChildrenBulleted_list_itemTextSortInput = {
  readonly annotations: InputMaybe<NotionRawChildrenChildrenChildrenChildrenBulleted_list_itemTextAnnotationsSortInput>;
  readonly href: InputMaybe<SortOrderEnum>;
  readonly plain_text: InputMaybe<SortOrderEnum>;
  readonly text: InputMaybe<NotionRawChildrenChildrenChildrenChildrenBulleted_list_itemTextTextSortInput>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenChildrenChildrenChildrenBulleted_list_itemTextText = {
  readonly content: Maybe<Scalars['String']>;
  readonly link: Maybe<NotionRawChildrenChildrenChildrenChildrenBulleted_list_itemTextTextLink>;
};

type NotionRawChildrenChildrenChildrenChildrenBulleted_list_itemTextTextFieldSelector = {
  readonly content: InputMaybe<FieldSelectorEnum>;
  readonly link: InputMaybe<NotionRawChildrenChildrenChildrenChildrenBulleted_list_itemTextTextLinkFieldSelector>;
};

type NotionRawChildrenChildrenChildrenChildrenBulleted_list_itemTextTextFilterInput = {
  readonly content: InputMaybe<StringQueryOperatorInput>;
  readonly link: InputMaybe<NotionRawChildrenChildrenChildrenChildrenBulleted_list_itemTextTextLinkFilterInput>;
};

type NotionRawChildrenChildrenChildrenChildrenBulleted_list_itemTextTextLink = {
  readonly url: Maybe<Scalars['String']>;
};

type NotionRawChildrenChildrenChildrenChildrenBulleted_list_itemTextTextLinkFieldSelector = {
  readonly url: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenChildrenChildrenChildrenBulleted_list_itemTextTextLinkFilterInput = {
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawChildrenChildrenChildrenChildrenBulleted_list_itemTextTextLinkSortInput = {
  readonly url: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenChildrenChildrenChildrenBulleted_list_itemTextTextSortInput = {
  readonly content: InputMaybe<SortOrderEnum>;
  readonly link: InputMaybe<NotionRawChildrenChildrenChildrenChildrenBulleted_list_itemTextTextLinkSortInput>;
};

type NotionRawChildrenChildrenChildrenChildrenChildren = {
  readonly archived: Maybe<Scalars['Boolean']>;
  readonly bulleted_list_item: Maybe<NotionRawChildrenChildrenChildrenChildrenChildrenBulleted_list_item>;
  readonly created_by: Maybe<NotionRawChildrenChildrenChildrenChildrenChildrenCreated_by>;
  readonly created_time: Maybe<Scalars['Date']>;
  readonly has_children: Maybe<Scalars['Boolean']>;
  readonly id: Maybe<Scalars['String']>;
  readonly last_edited_by: Maybe<NotionRawChildrenChildrenChildrenChildrenChildrenLast_edited_by>;
  readonly last_edited_time: Maybe<Scalars['Date']>;
  readonly object: Maybe<Scalars['String']>;
  readonly paragraph: Maybe<NotionRawChildrenChildrenChildrenChildrenChildrenParagraph>;
  readonly parent: Maybe<NotionRawChildrenChildrenChildrenChildrenChildrenParent>;
  readonly to_do: Maybe<NotionRawChildrenChildrenChildrenChildrenChildrenTo_do>;
  readonly type: Maybe<Scalars['String']>;
};


type NotionRawChildrenChildrenChildrenChildrenChildren_created_timeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};


type NotionRawChildrenChildrenChildrenChildrenChildren_last_edited_timeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type NotionRawChildrenChildrenChildrenChildrenChildrenBulleted_list_item = {
  readonly color: Maybe<Scalars['String']>;
  readonly text: Maybe<ReadonlyArray<Maybe<NotionRawChildrenChildrenChildrenChildrenChildrenBulleted_list_itemText>>>;
};

type NotionRawChildrenChildrenChildrenChildrenChildrenBulleted_list_itemFieldSelector = {
  readonly color: InputMaybe<FieldSelectorEnum>;
  readonly text: InputMaybe<NotionRawChildrenChildrenChildrenChildrenChildrenBulleted_list_itemTextFieldSelector>;
};

type NotionRawChildrenChildrenChildrenChildrenChildrenBulleted_list_itemFilterInput = {
  readonly color: InputMaybe<StringQueryOperatorInput>;
  readonly text: InputMaybe<NotionRawChildrenChildrenChildrenChildrenChildrenBulleted_list_itemTextFilterListInput>;
};

type NotionRawChildrenChildrenChildrenChildrenChildrenBulleted_list_itemSortInput = {
  readonly color: InputMaybe<SortOrderEnum>;
  readonly text: InputMaybe<NotionRawChildrenChildrenChildrenChildrenChildrenBulleted_list_itemTextSortInput>;
};

type NotionRawChildrenChildrenChildrenChildrenChildrenBulleted_list_itemText = {
  readonly annotations: Maybe<NotionRawChildrenChildrenChildrenChildrenChildrenBulleted_list_itemTextAnnotations>;
  readonly plain_text: Maybe<Scalars['String']>;
  readonly text: Maybe<NotionRawChildrenChildrenChildrenChildrenChildrenBulleted_list_itemTextText>;
  readonly type: Maybe<Scalars['String']>;
};

type NotionRawChildrenChildrenChildrenChildrenChildrenBulleted_list_itemTextAnnotations = {
  readonly bold: Maybe<Scalars['Boolean']>;
  readonly code: Maybe<Scalars['Boolean']>;
  readonly color: Maybe<Scalars['String']>;
  readonly italic: Maybe<Scalars['Boolean']>;
  readonly strikethrough: Maybe<Scalars['Boolean']>;
  readonly underline: Maybe<Scalars['Boolean']>;
};

type NotionRawChildrenChildrenChildrenChildrenChildrenBulleted_list_itemTextAnnotationsFieldSelector = {
  readonly bold: InputMaybe<FieldSelectorEnum>;
  readonly code: InputMaybe<FieldSelectorEnum>;
  readonly color: InputMaybe<FieldSelectorEnum>;
  readonly italic: InputMaybe<FieldSelectorEnum>;
  readonly strikethrough: InputMaybe<FieldSelectorEnum>;
  readonly underline: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenChildrenChildrenChildrenChildrenBulleted_list_itemTextAnnotationsFilterInput = {
  readonly bold: InputMaybe<BooleanQueryOperatorInput>;
  readonly code: InputMaybe<BooleanQueryOperatorInput>;
  readonly color: InputMaybe<StringQueryOperatorInput>;
  readonly italic: InputMaybe<BooleanQueryOperatorInput>;
  readonly strikethrough: InputMaybe<BooleanQueryOperatorInput>;
  readonly underline: InputMaybe<BooleanQueryOperatorInput>;
};

type NotionRawChildrenChildrenChildrenChildrenChildrenBulleted_list_itemTextAnnotationsSortInput = {
  readonly bold: InputMaybe<SortOrderEnum>;
  readonly code: InputMaybe<SortOrderEnum>;
  readonly color: InputMaybe<SortOrderEnum>;
  readonly italic: InputMaybe<SortOrderEnum>;
  readonly strikethrough: InputMaybe<SortOrderEnum>;
  readonly underline: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenChildrenChildrenChildrenChildrenBulleted_list_itemTextFieldSelector = {
  readonly annotations: InputMaybe<NotionRawChildrenChildrenChildrenChildrenChildrenBulleted_list_itemTextAnnotationsFieldSelector>;
  readonly plain_text: InputMaybe<FieldSelectorEnum>;
  readonly text: InputMaybe<NotionRawChildrenChildrenChildrenChildrenChildrenBulleted_list_itemTextTextFieldSelector>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenChildrenChildrenChildrenChildrenBulleted_list_itemTextFilterInput = {
  readonly annotations: InputMaybe<NotionRawChildrenChildrenChildrenChildrenChildrenBulleted_list_itemTextAnnotationsFilterInput>;
  readonly plain_text: InputMaybe<StringQueryOperatorInput>;
  readonly text: InputMaybe<NotionRawChildrenChildrenChildrenChildrenChildrenBulleted_list_itemTextTextFilterInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawChildrenChildrenChildrenChildrenChildrenBulleted_list_itemTextFilterListInput = {
  readonly elemMatch: InputMaybe<NotionRawChildrenChildrenChildrenChildrenChildrenBulleted_list_itemTextFilterInput>;
};

type NotionRawChildrenChildrenChildrenChildrenChildrenBulleted_list_itemTextSortInput = {
  readonly annotations: InputMaybe<NotionRawChildrenChildrenChildrenChildrenChildrenBulleted_list_itemTextAnnotationsSortInput>;
  readonly plain_text: InputMaybe<SortOrderEnum>;
  readonly text: InputMaybe<NotionRawChildrenChildrenChildrenChildrenChildrenBulleted_list_itemTextTextSortInput>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenChildrenChildrenChildrenChildrenBulleted_list_itemTextText = {
  readonly content: Maybe<Scalars['String']>;
};

type NotionRawChildrenChildrenChildrenChildrenChildrenBulleted_list_itemTextTextFieldSelector = {
  readonly content: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenChildrenChildrenChildrenChildrenBulleted_list_itemTextTextFilterInput = {
  readonly content: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawChildrenChildrenChildrenChildrenChildrenBulleted_list_itemTextTextSortInput = {
  readonly content: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenChildrenChildrenChildrenChildrenCreated_by = {
  readonly id: Maybe<Scalars['String']>;
  readonly object: Maybe<Scalars['String']>;
};

type NotionRawChildrenChildrenChildrenChildrenChildrenCreated_byFieldSelector = {
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly object: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenChildrenChildrenChildrenChildrenCreated_byFilterInput = {
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly object: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawChildrenChildrenChildrenChildrenChildrenCreated_bySortInput = {
  readonly id: InputMaybe<SortOrderEnum>;
  readonly object: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenChildrenChildrenChildrenChildrenFieldSelector = {
  readonly archived: InputMaybe<FieldSelectorEnum>;
  readonly bulleted_list_item: InputMaybe<NotionRawChildrenChildrenChildrenChildrenChildrenBulleted_list_itemFieldSelector>;
  readonly created_by: InputMaybe<NotionRawChildrenChildrenChildrenChildrenChildrenCreated_byFieldSelector>;
  readonly created_time: InputMaybe<FieldSelectorEnum>;
  readonly has_children: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly last_edited_by: InputMaybe<NotionRawChildrenChildrenChildrenChildrenChildrenLast_edited_byFieldSelector>;
  readonly last_edited_time: InputMaybe<FieldSelectorEnum>;
  readonly object: InputMaybe<FieldSelectorEnum>;
  readonly paragraph: InputMaybe<NotionRawChildrenChildrenChildrenChildrenChildrenParagraphFieldSelector>;
  readonly parent: InputMaybe<NotionRawChildrenChildrenChildrenChildrenChildrenParentFieldSelector>;
  readonly to_do: InputMaybe<NotionRawChildrenChildrenChildrenChildrenChildrenTo_doFieldSelector>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenChildrenChildrenChildrenChildrenFilterInput = {
  readonly archived: InputMaybe<BooleanQueryOperatorInput>;
  readonly bulleted_list_item: InputMaybe<NotionRawChildrenChildrenChildrenChildrenChildrenBulleted_list_itemFilterInput>;
  readonly created_by: InputMaybe<NotionRawChildrenChildrenChildrenChildrenChildrenCreated_byFilterInput>;
  readonly created_time: InputMaybe<DateQueryOperatorInput>;
  readonly has_children: InputMaybe<BooleanQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly last_edited_by: InputMaybe<NotionRawChildrenChildrenChildrenChildrenChildrenLast_edited_byFilterInput>;
  readonly last_edited_time: InputMaybe<DateQueryOperatorInput>;
  readonly object: InputMaybe<StringQueryOperatorInput>;
  readonly paragraph: InputMaybe<NotionRawChildrenChildrenChildrenChildrenChildrenParagraphFilterInput>;
  readonly parent: InputMaybe<NotionRawChildrenChildrenChildrenChildrenChildrenParentFilterInput>;
  readonly to_do: InputMaybe<NotionRawChildrenChildrenChildrenChildrenChildrenTo_doFilterInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawChildrenChildrenChildrenChildrenChildrenFilterListInput = {
  readonly elemMatch: InputMaybe<NotionRawChildrenChildrenChildrenChildrenChildrenFilterInput>;
};

type NotionRawChildrenChildrenChildrenChildrenChildrenLast_edited_by = {
  readonly id: Maybe<Scalars['String']>;
  readonly object: Maybe<Scalars['String']>;
};

type NotionRawChildrenChildrenChildrenChildrenChildrenLast_edited_byFieldSelector = {
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly object: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenChildrenChildrenChildrenChildrenLast_edited_byFilterInput = {
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly object: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawChildrenChildrenChildrenChildrenChildrenLast_edited_bySortInput = {
  readonly id: InputMaybe<SortOrderEnum>;
  readonly object: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenChildrenChildrenChildrenChildrenParagraph = {
  readonly color: Maybe<Scalars['String']>;
  readonly text: Maybe<ReadonlyArray<Maybe<NotionRawChildrenChildrenChildrenChildrenChildrenParagraphText>>>;
};

type NotionRawChildrenChildrenChildrenChildrenChildrenParagraphFieldSelector = {
  readonly color: InputMaybe<FieldSelectorEnum>;
  readonly text: InputMaybe<NotionRawChildrenChildrenChildrenChildrenChildrenParagraphTextFieldSelector>;
};

type NotionRawChildrenChildrenChildrenChildrenChildrenParagraphFilterInput = {
  readonly color: InputMaybe<StringQueryOperatorInput>;
  readonly text: InputMaybe<NotionRawChildrenChildrenChildrenChildrenChildrenParagraphTextFilterListInput>;
};

type NotionRawChildrenChildrenChildrenChildrenChildrenParagraphSortInput = {
  readonly color: InputMaybe<SortOrderEnum>;
  readonly text: InputMaybe<NotionRawChildrenChildrenChildrenChildrenChildrenParagraphTextSortInput>;
};

type NotionRawChildrenChildrenChildrenChildrenChildrenParagraphText = {
  readonly annotations: Maybe<NotionRawChildrenChildrenChildrenChildrenChildrenParagraphTextAnnotations>;
  readonly plain_text: Maybe<Scalars['String']>;
  readonly text: Maybe<NotionRawChildrenChildrenChildrenChildrenChildrenParagraphTextText>;
  readonly type: Maybe<Scalars['String']>;
};

type NotionRawChildrenChildrenChildrenChildrenChildrenParagraphTextAnnotations = {
  readonly bold: Maybe<Scalars['Boolean']>;
  readonly code: Maybe<Scalars['Boolean']>;
  readonly color: Maybe<Scalars['String']>;
  readonly italic: Maybe<Scalars['Boolean']>;
  readonly strikethrough: Maybe<Scalars['Boolean']>;
  readonly underline: Maybe<Scalars['Boolean']>;
};

type NotionRawChildrenChildrenChildrenChildrenChildrenParagraphTextAnnotationsFieldSelector = {
  readonly bold: InputMaybe<FieldSelectorEnum>;
  readonly code: InputMaybe<FieldSelectorEnum>;
  readonly color: InputMaybe<FieldSelectorEnum>;
  readonly italic: InputMaybe<FieldSelectorEnum>;
  readonly strikethrough: InputMaybe<FieldSelectorEnum>;
  readonly underline: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenChildrenChildrenChildrenChildrenParagraphTextAnnotationsFilterInput = {
  readonly bold: InputMaybe<BooleanQueryOperatorInput>;
  readonly code: InputMaybe<BooleanQueryOperatorInput>;
  readonly color: InputMaybe<StringQueryOperatorInput>;
  readonly italic: InputMaybe<BooleanQueryOperatorInput>;
  readonly strikethrough: InputMaybe<BooleanQueryOperatorInput>;
  readonly underline: InputMaybe<BooleanQueryOperatorInput>;
};

type NotionRawChildrenChildrenChildrenChildrenChildrenParagraphTextAnnotationsSortInput = {
  readonly bold: InputMaybe<SortOrderEnum>;
  readonly code: InputMaybe<SortOrderEnum>;
  readonly color: InputMaybe<SortOrderEnum>;
  readonly italic: InputMaybe<SortOrderEnum>;
  readonly strikethrough: InputMaybe<SortOrderEnum>;
  readonly underline: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenChildrenChildrenChildrenChildrenParagraphTextFieldSelector = {
  readonly annotations: InputMaybe<NotionRawChildrenChildrenChildrenChildrenChildrenParagraphTextAnnotationsFieldSelector>;
  readonly plain_text: InputMaybe<FieldSelectorEnum>;
  readonly text: InputMaybe<NotionRawChildrenChildrenChildrenChildrenChildrenParagraphTextTextFieldSelector>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenChildrenChildrenChildrenChildrenParagraphTextFilterInput = {
  readonly annotations: InputMaybe<NotionRawChildrenChildrenChildrenChildrenChildrenParagraphTextAnnotationsFilterInput>;
  readonly plain_text: InputMaybe<StringQueryOperatorInput>;
  readonly text: InputMaybe<NotionRawChildrenChildrenChildrenChildrenChildrenParagraphTextTextFilterInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawChildrenChildrenChildrenChildrenChildrenParagraphTextFilterListInput = {
  readonly elemMatch: InputMaybe<NotionRawChildrenChildrenChildrenChildrenChildrenParagraphTextFilterInput>;
};

type NotionRawChildrenChildrenChildrenChildrenChildrenParagraphTextSortInput = {
  readonly annotations: InputMaybe<NotionRawChildrenChildrenChildrenChildrenChildrenParagraphTextAnnotationsSortInput>;
  readonly plain_text: InputMaybe<SortOrderEnum>;
  readonly text: InputMaybe<NotionRawChildrenChildrenChildrenChildrenChildrenParagraphTextTextSortInput>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenChildrenChildrenChildrenChildrenParagraphTextText = {
  readonly content: Maybe<Scalars['String']>;
};

type NotionRawChildrenChildrenChildrenChildrenChildrenParagraphTextTextFieldSelector = {
  readonly content: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenChildrenChildrenChildrenChildrenParagraphTextTextFilterInput = {
  readonly content: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawChildrenChildrenChildrenChildrenChildrenParagraphTextTextSortInput = {
  readonly content: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenChildrenChildrenChildrenChildrenParent = {
  readonly block_id: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
};

type NotionRawChildrenChildrenChildrenChildrenChildrenParentFieldSelector = {
  readonly block_id: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenChildrenChildrenChildrenChildrenParentFilterInput = {
  readonly block_id: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawChildrenChildrenChildrenChildrenChildrenParentSortInput = {
  readonly block_id: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenChildrenChildrenChildrenChildrenSortInput = {
  readonly archived: InputMaybe<SortOrderEnum>;
  readonly bulleted_list_item: InputMaybe<NotionRawChildrenChildrenChildrenChildrenChildrenBulleted_list_itemSortInput>;
  readonly created_by: InputMaybe<NotionRawChildrenChildrenChildrenChildrenChildrenCreated_bySortInput>;
  readonly created_time: InputMaybe<SortOrderEnum>;
  readonly has_children: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly last_edited_by: InputMaybe<NotionRawChildrenChildrenChildrenChildrenChildrenLast_edited_bySortInput>;
  readonly last_edited_time: InputMaybe<SortOrderEnum>;
  readonly object: InputMaybe<SortOrderEnum>;
  readonly paragraph: InputMaybe<NotionRawChildrenChildrenChildrenChildrenChildrenParagraphSortInput>;
  readonly parent: InputMaybe<NotionRawChildrenChildrenChildrenChildrenChildrenParentSortInput>;
  readonly to_do: InputMaybe<NotionRawChildrenChildrenChildrenChildrenChildrenTo_doSortInput>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenChildrenChildrenChildrenChildrenTo_do = {
  readonly checked: Maybe<Scalars['Boolean']>;
  readonly color: Maybe<Scalars['String']>;
  readonly text: Maybe<ReadonlyArray<Maybe<NotionRawChildrenChildrenChildrenChildrenChildrenTo_doText>>>;
};

type NotionRawChildrenChildrenChildrenChildrenChildrenTo_doFieldSelector = {
  readonly checked: InputMaybe<FieldSelectorEnum>;
  readonly color: InputMaybe<FieldSelectorEnum>;
  readonly text: InputMaybe<NotionRawChildrenChildrenChildrenChildrenChildrenTo_doTextFieldSelector>;
};

type NotionRawChildrenChildrenChildrenChildrenChildrenTo_doFilterInput = {
  readonly checked: InputMaybe<BooleanQueryOperatorInput>;
  readonly color: InputMaybe<StringQueryOperatorInput>;
  readonly text: InputMaybe<NotionRawChildrenChildrenChildrenChildrenChildrenTo_doTextFilterListInput>;
};

type NotionRawChildrenChildrenChildrenChildrenChildrenTo_doSortInput = {
  readonly checked: InputMaybe<SortOrderEnum>;
  readonly color: InputMaybe<SortOrderEnum>;
  readonly text: InputMaybe<NotionRawChildrenChildrenChildrenChildrenChildrenTo_doTextSortInput>;
};

type NotionRawChildrenChildrenChildrenChildrenChildrenTo_doText = {
  readonly annotations: Maybe<NotionRawChildrenChildrenChildrenChildrenChildrenTo_doTextAnnotations>;
  readonly plain_text: Maybe<Scalars['String']>;
  readonly text: Maybe<NotionRawChildrenChildrenChildrenChildrenChildrenTo_doTextText>;
  readonly type: Maybe<Scalars['String']>;
};

type NotionRawChildrenChildrenChildrenChildrenChildrenTo_doTextAnnotations = {
  readonly bold: Maybe<Scalars['Boolean']>;
  readonly code: Maybe<Scalars['Boolean']>;
  readonly color: Maybe<Scalars['String']>;
  readonly italic: Maybe<Scalars['Boolean']>;
  readonly strikethrough: Maybe<Scalars['Boolean']>;
  readonly underline: Maybe<Scalars['Boolean']>;
};

type NotionRawChildrenChildrenChildrenChildrenChildrenTo_doTextAnnotationsFieldSelector = {
  readonly bold: InputMaybe<FieldSelectorEnum>;
  readonly code: InputMaybe<FieldSelectorEnum>;
  readonly color: InputMaybe<FieldSelectorEnum>;
  readonly italic: InputMaybe<FieldSelectorEnum>;
  readonly strikethrough: InputMaybe<FieldSelectorEnum>;
  readonly underline: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenChildrenChildrenChildrenChildrenTo_doTextAnnotationsFilterInput = {
  readonly bold: InputMaybe<BooleanQueryOperatorInput>;
  readonly code: InputMaybe<BooleanQueryOperatorInput>;
  readonly color: InputMaybe<StringQueryOperatorInput>;
  readonly italic: InputMaybe<BooleanQueryOperatorInput>;
  readonly strikethrough: InputMaybe<BooleanQueryOperatorInput>;
  readonly underline: InputMaybe<BooleanQueryOperatorInput>;
};

type NotionRawChildrenChildrenChildrenChildrenChildrenTo_doTextAnnotationsSortInput = {
  readonly bold: InputMaybe<SortOrderEnum>;
  readonly code: InputMaybe<SortOrderEnum>;
  readonly color: InputMaybe<SortOrderEnum>;
  readonly italic: InputMaybe<SortOrderEnum>;
  readonly strikethrough: InputMaybe<SortOrderEnum>;
  readonly underline: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenChildrenChildrenChildrenChildrenTo_doTextFieldSelector = {
  readonly annotations: InputMaybe<NotionRawChildrenChildrenChildrenChildrenChildrenTo_doTextAnnotationsFieldSelector>;
  readonly plain_text: InputMaybe<FieldSelectorEnum>;
  readonly text: InputMaybe<NotionRawChildrenChildrenChildrenChildrenChildrenTo_doTextTextFieldSelector>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenChildrenChildrenChildrenChildrenTo_doTextFilterInput = {
  readonly annotations: InputMaybe<NotionRawChildrenChildrenChildrenChildrenChildrenTo_doTextAnnotationsFilterInput>;
  readonly plain_text: InputMaybe<StringQueryOperatorInput>;
  readonly text: InputMaybe<NotionRawChildrenChildrenChildrenChildrenChildrenTo_doTextTextFilterInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawChildrenChildrenChildrenChildrenChildrenTo_doTextFilterListInput = {
  readonly elemMatch: InputMaybe<NotionRawChildrenChildrenChildrenChildrenChildrenTo_doTextFilterInput>;
};

type NotionRawChildrenChildrenChildrenChildrenChildrenTo_doTextSortInput = {
  readonly annotations: InputMaybe<NotionRawChildrenChildrenChildrenChildrenChildrenTo_doTextAnnotationsSortInput>;
  readonly plain_text: InputMaybe<SortOrderEnum>;
  readonly text: InputMaybe<NotionRawChildrenChildrenChildrenChildrenChildrenTo_doTextTextSortInput>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenChildrenChildrenChildrenChildrenTo_doTextText = {
  readonly content: Maybe<Scalars['String']>;
};

type NotionRawChildrenChildrenChildrenChildrenChildrenTo_doTextTextFieldSelector = {
  readonly content: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenChildrenChildrenChildrenChildrenTo_doTextTextFilterInput = {
  readonly content: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawChildrenChildrenChildrenChildrenChildrenTo_doTextTextSortInput = {
  readonly content: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenChildrenChildrenChildrenCreated_by = {
  readonly id: Maybe<Scalars['String']>;
  readonly object: Maybe<Scalars['String']>;
};

type NotionRawChildrenChildrenChildrenChildrenCreated_byFieldSelector = {
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly object: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenChildrenChildrenChildrenCreated_byFilterInput = {
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly object: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawChildrenChildrenChildrenChildrenCreated_bySortInput = {
  readonly id: InputMaybe<SortOrderEnum>;
  readonly object: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenChildrenChildrenChildrenFieldSelector = {
  readonly archived: InputMaybe<FieldSelectorEnum>;
  readonly bulleted_list_item: InputMaybe<NotionRawChildrenChildrenChildrenChildrenBulleted_list_itemFieldSelector>;
  readonly children: InputMaybe<NotionRawChildrenChildrenChildrenChildrenChildrenFieldSelector>;
  readonly created_by: InputMaybe<NotionRawChildrenChildrenChildrenChildrenCreated_byFieldSelector>;
  readonly created_time: InputMaybe<FieldSelectorEnum>;
  readonly has_children: InputMaybe<FieldSelectorEnum>;
  readonly heading_1: InputMaybe<NotionRawChildrenChildrenChildrenChildrenHeading_1FieldSelector>;
  readonly heading_3: InputMaybe<NotionRawChildrenChildrenChildrenChildrenHeading_3FieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly last_edited_by: InputMaybe<NotionRawChildrenChildrenChildrenChildrenLast_edited_byFieldSelector>;
  readonly last_edited_time: InputMaybe<FieldSelectorEnum>;
  readonly numbered_list_item: InputMaybe<NotionRawChildrenChildrenChildrenChildrenNumbered_list_itemFieldSelector>;
  readonly object: InputMaybe<FieldSelectorEnum>;
  readonly paragraph: InputMaybe<NotionRawChildrenChildrenChildrenChildrenParagraphFieldSelector>;
  readonly parent: InputMaybe<NotionRawChildrenChildrenChildrenChildrenParentFieldSelector>;
  readonly table_of_contents: InputMaybe<NotionRawChildrenChildrenChildrenChildrenTable_of_contentsFieldSelector>;
  readonly to_do: InputMaybe<NotionRawChildrenChildrenChildrenChildrenTo_doFieldSelector>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenChildrenChildrenChildrenFilterInput = {
  readonly archived: InputMaybe<BooleanQueryOperatorInput>;
  readonly bulleted_list_item: InputMaybe<NotionRawChildrenChildrenChildrenChildrenBulleted_list_itemFilterInput>;
  readonly children: InputMaybe<NotionRawChildrenChildrenChildrenChildrenChildrenFilterListInput>;
  readonly created_by: InputMaybe<NotionRawChildrenChildrenChildrenChildrenCreated_byFilterInput>;
  readonly created_time: InputMaybe<DateQueryOperatorInput>;
  readonly has_children: InputMaybe<BooleanQueryOperatorInput>;
  readonly heading_1: InputMaybe<NotionRawChildrenChildrenChildrenChildrenHeading_1FilterInput>;
  readonly heading_3: InputMaybe<NotionRawChildrenChildrenChildrenChildrenHeading_3FilterInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly last_edited_by: InputMaybe<NotionRawChildrenChildrenChildrenChildrenLast_edited_byFilterInput>;
  readonly last_edited_time: InputMaybe<DateQueryOperatorInput>;
  readonly numbered_list_item: InputMaybe<NotionRawChildrenChildrenChildrenChildrenNumbered_list_itemFilterInput>;
  readonly object: InputMaybe<StringQueryOperatorInput>;
  readonly paragraph: InputMaybe<NotionRawChildrenChildrenChildrenChildrenParagraphFilterInput>;
  readonly parent: InputMaybe<NotionRawChildrenChildrenChildrenChildrenParentFilterInput>;
  readonly table_of_contents: InputMaybe<NotionRawChildrenChildrenChildrenChildrenTable_of_contentsFilterInput>;
  readonly to_do: InputMaybe<NotionRawChildrenChildrenChildrenChildrenTo_doFilterInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawChildrenChildrenChildrenChildrenFilterListInput = {
  readonly elemMatch: InputMaybe<NotionRawChildrenChildrenChildrenChildrenFilterInput>;
};

type NotionRawChildrenChildrenChildrenChildrenHeading_1 = {
  readonly color: Maybe<Scalars['String']>;
  readonly is_toggleable: Maybe<Scalars['Boolean']>;
  readonly text: Maybe<ReadonlyArray<Maybe<NotionRawChildrenChildrenChildrenChildrenHeading_1Text>>>;
};

type NotionRawChildrenChildrenChildrenChildrenHeading_1FieldSelector = {
  readonly color: InputMaybe<FieldSelectorEnum>;
  readonly is_toggleable: InputMaybe<FieldSelectorEnum>;
  readonly text: InputMaybe<NotionRawChildrenChildrenChildrenChildrenHeading_1TextFieldSelector>;
};

type NotionRawChildrenChildrenChildrenChildrenHeading_1FilterInput = {
  readonly color: InputMaybe<StringQueryOperatorInput>;
  readonly is_toggleable: InputMaybe<BooleanQueryOperatorInput>;
  readonly text: InputMaybe<NotionRawChildrenChildrenChildrenChildrenHeading_1TextFilterListInput>;
};

type NotionRawChildrenChildrenChildrenChildrenHeading_1SortInput = {
  readonly color: InputMaybe<SortOrderEnum>;
  readonly is_toggleable: InputMaybe<SortOrderEnum>;
  readonly text: InputMaybe<NotionRawChildrenChildrenChildrenChildrenHeading_1TextSortInput>;
};

type NotionRawChildrenChildrenChildrenChildrenHeading_1Text = {
  readonly annotations: Maybe<NotionRawChildrenChildrenChildrenChildrenHeading_1TextAnnotations>;
  readonly plain_text: Maybe<Scalars['String']>;
  readonly text: Maybe<NotionRawChildrenChildrenChildrenChildrenHeading_1TextText>;
  readonly type: Maybe<Scalars['String']>;
};

type NotionRawChildrenChildrenChildrenChildrenHeading_1TextAnnotations = {
  readonly bold: Maybe<Scalars['Boolean']>;
  readonly code: Maybe<Scalars['Boolean']>;
  readonly color: Maybe<Scalars['String']>;
  readonly italic: Maybe<Scalars['Boolean']>;
  readonly strikethrough: Maybe<Scalars['Boolean']>;
  readonly underline: Maybe<Scalars['Boolean']>;
};

type NotionRawChildrenChildrenChildrenChildrenHeading_1TextAnnotationsFieldSelector = {
  readonly bold: InputMaybe<FieldSelectorEnum>;
  readonly code: InputMaybe<FieldSelectorEnum>;
  readonly color: InputMaybe<FieldSelectorEnum>;
  readonly italic: InputMaybe<FieldSelectorEnum>;
  readonly strikethrough: InputMaybe<FieldSelectorEnum>;
  readonly underline: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenChildrenChildrenChildrenHeading_1TextAnnotationsFilterInput = {
  readonly bold: InputMaybe<BooleanQueryOperatorInput>;
  readonly code: InputMaybe<BooleanQueryOperatorInput>;
  readonly color: InputMaybe<StringQueryOperatorInput>;
  readonly italic: InputMaybe<BooleanQueryOperatorInput>;
  readonly strikethrough: InputMaybe<BooleanQueryOperatorInput>;
  readonly underline: InputMaybe<BooleanQueryOperatorInput>;
};

type NotionRawChildrenChildrenChildrenChildrenHeading_1TextAnnotationsSortInput = {
  readonly bold: InputMaybe<SortOrderEnum>;
  readonly code: InputMaybe<SortOrderEnum>;
  readonly color: InputMaybe<SortOrderEnum>;
  readonly italic: InputMaybe<SortOrderEnum>;
  readonly strikethrough: InputMaybe<SortOrderEnum>;
  readonly underline: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenChildrenChildrenChildrenHeading_1TextFieldSelector = {
  readonly annotations: InputMaybe<NotionRawChildrenChildrenChildrenChildrenHeading_1TextAnnotationsFieldSelector>;
  readonly plain_text: InputMaybe<FieldSelectorEnum>;
  readonly text: InputMaybe<NotionRawChildrenChildrenChildrenChildrenHeading_1TextTextFieldSelector>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenChildrenChildrenChildrenHeading_1TextFilterInput = {
  readonly annotations: InputMaybe<NotionRawChildrenChildrenChildrenChildrenHeading_1TextAnnotationsFilterInput>;
  readonly plain_text: InputMaybe<StringQueryOperatorInput>;
  readonly text: InputMaybe<NotionRawChildrenChildrenChildrenChildrenHeading_1TextTextFilterInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawChildrenChildrenChildrenChildrenHeading_1TextFilterListInput = {
  readonly elemMatch: InputMaybe<NotionRawChildrenChildrenChildrenChildrenHeading_1TextFilterInput>;
};

type NotionRawChildrenChildrenChildrenChildrenHeading_1TextSortInput = {
  readonly annotations: InputMaybe<NotionRawChildrenChildrenChildrenChildrenHeading_1TextAnnotationsSortInput>;
  readonly plain_text: InputMaybe<SortOrderEnum>;
  readonly text: InputMaybe<NotionRawChildrenChildrenChildrenChildrenHeading_1TextTextSortInput>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenChildrenChildrenChildrenHeading_1TextText = {
  readonly content: Maybe<Scalars['String']>;
};

type NotionRawChildrenChildrenChildrenChildrenHeading_1TextTextFieldSelector = {
  readonly content: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenChildrenChildrenChildrenHeading_1TextTextFilterInput = {
  readonly content: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawChildrenChildrenChildrenChildrenHeading_1TextTextSortInput = {
  readonly content: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenChildrenChildrenChildrenHeading_3 = {
  readonly color: Maybe<Scalars['String']>;
  readonly is_toggleable: Maybe<Scalars['Boolean']>;
  readonly text: Maybe<ReadonlyArray<Maybe<NotionRawChildrenChildrenChildrenChildrenHeading_3Text>>>;
};

type NotionRawChildrenChildrenChildrenChildrenHeading_3FieldSelector = {
  readonly color: InputMaybe<FieldSelectorEnum>;
  readonly is_toggleable: InputMaybe<FieldSelectorEnum>;
  readonly text: InputMaybe<NotionRawChildrenChildrenChildrenChildrenHeading_3TextFieldSelector>;
};

type NotionRawChildrenChildrenChildrenChildrenHeading_3FilterInput = {
  readonly color: InputMaybe<StringQueryOperatorInput>;
  readonly is_toggleable: InputMaybe<BooleanQueryOperatorInput>;
  readonly text: InputMaybe<NotionRawChildrenChildrenChildrenChildrenHeading_3TextFilterListInput>;
};

type NotionRawChildrenChildrenChildrenChildrenHeading_3SortInput = {
  readonly color: InputMaybe<SortOrderEnum>;
  readonly is_toggleable: InputMaybe<SortOrderEnum>;
  readonly text: InputMaybe<NotionRawChildrenChildrenChildrenChildrenHeading_3TextSortInput>;
};

type NotionRawChildrenChildrenChildrenChildrenHeading_3Text = {
  readonly annotations: Maybe<NotionRawChildrenChildrenChildrenChildrenHeading_3TextAnnotations>;
  readonly plain_text: Maybe<Scalars['String']>;
  readonly text: Maybe<NotionRawChildrenChildrenChildrenChildrenHeading_3TextText>;
  readonly type: Maybe<Scalars['String']>;
};

type NotionRawChildrenChildrenChildrenChildrenHeading_3TextAnnotations = {
  readonly bold: Maybe<Scalars['Boolean']>;
  readonly code: Maybe<Scalars['Boolean']>;
  readonly color: Maybe<Scalars['String']>;
  readonly italic: Maybe<Scalars['Boolean']>;
  readonly strikethrough: Maybe<Scalars['Boolean']>;
  readonly underline: Maybe<Scalars['Boolean']>;
};

type NotionRawChildrenChildrenChildrenChildrenHeading_3TextAnnotationsFieldSelector = {
  readonly bold: InputMaybe<FieldSelectorEnum>;
  readonly code: InputMaybe<FieldSelectorEnum>;
  readonly color: InputMaybe<FieldSelectorEnum>;
  readonly italic: InputMaybe<FieldSelectorEnum>;
  readonly strikethrough: InputMaybe<FieldSelectorEnum>;
  readonly underline: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenChildrenChildrenChildrenHeading_3TextAnnotationsFilterInput = {
  readonly bold: InputMaybe<BooleanQueryOperatorInput>;
  readonly code: InputMaybe<BooleanQueryOperatorInput>;
  readonly color: InputMaybe<StringQueryOperatorInput>;
  readonly italic: InputMaybe<BooleanQueryOperatorInput>;
  readonly strikethrough: InputMaybe<BooleanQueryOperatorInput>;
  readonly underline: InputMaybe<BooleanQueryOperatorInput>;
};

type NotionRawChildrenChildrenChildrenChildrenHeading_3TextAnnotationsSortInput = {
  readonly bold: InputMaybe<SortOrderEnum>;
  readonly code: InputMaybe<SortOrderEnum>;
  readonly color: InputMaybe<SortOrderEnum>;
  readonly italic: InputMaybe<SortOrderEnum>;
  readonly strikethrough: InputMaybe<SortOrderEnum>;
  readonly underline: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenChildrenChildrenChildrenHeading_3TextFieldSelector = {
  readonly annotations: InputMaybe<NotionRawChildrenChildrenChildrenChildrenHeading_3TextAnnotationsFieldSelector>;
  readonly plain_text: InputMaybe<FieldSelectorEnum>;
  readonly text: InputMaybe<NotionRawChildrenChildrenChildrenChildrenHeading_3TextTextFieldSelector>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenChildrenChildrenChildrenHeading_3TextFilterInput = {
  readonly annotations: InputMaybe<NotionRawChildrenChildrenChildrenChildrenHeading_3TextAnnotationsFilterInput>;
  readonly plain_text: InputMaybe<StringQueryOperatorInput>;
  readonly text: InputMaybe<NotionRawChildrenChildrenChildrenChildrenHeading_3TextTextFilterInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawChildrenChildrenChildrenChildrenHeading_3TextFilterListInput = {
  readonly elemMatch: InputMaybe<NotionRawChildrenChildrenChildrenChildrenHeading_3TextFilterInput>;
};

type NotionRawChildrenChildrenChildrenChildrenHeading_3TextSortInput = {
  readonly annotations: InputMaybe<NotionRawChildrenChildrenChildrenChildrenHeading_3TextAnnotationsSortInput>;
  readonly plain_text: InputMaybe<SortOrderEnum>;
  readonly text: InputMaybe<NotionRawChildrenChildrenChildrenChildrenHeading_3TextTextSortInput>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenChildrenChildrenChildrenHeading_3TextText = {
  readonly content: Maybe<Scalars['String']>;
};

type NotionRawChildrenChildrenChildrenChildrenHeading_3TextTextFieldSelector = {
  readonly content: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenChildrenChildrenChildrenHeading_3TextTextFilterInput = {
  readonly content: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawChildrenChildrenChildrenChildrenHeading_3TextTextSortInput = {
  readonly content: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenChildrenChildrenChildrenLast_edited_by = {
  readonly id: Maybe<Scalars['String']>;
  readonly object: Maybe<Scalars['String']>;
};

type NotionRawChildrenChildrenChildrenChildrenLast_edited_byFieldSelector = {
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly object: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenChildrenChildrenChildrenLast_edited_byFilterInput = {
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly object: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawChildrenChildrenChildrenChildrenLast_edited_bySortInput = {
  readonly id: InputMaybe<SortOrderEnum>;
  readonly object: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenChildrenChildrenChildrenNumbered_list_item = {
  readonly color: Maybe<Scalars['String']>;
  readonly text: Maybe<ReadonlyArray<Maybe<NotionRawChildrenChildrenChildrenChildrenNumbered_list_itemText>>>;
};

type NotionRawChildrenChildrenChildrenChildrenNumbered_list_itemFieldSelector = {
  readonly color: InputMaybe<FieldSelectorEnum>;
  readonly text: InputMaybe<NotionRawChildrenChildrenChildrenChildrenNumbered_list_itemTextFieldSelector>;
};

type NotionRawChildrenChildrenChildrenChildrenNumbered_list_itemFilterInput = {
  readonly color: InputMaybe<StringQueryOperatorInput>;
  readonly text: InputMaybe<NotionRawChildrenChildrenChildrenChildrenNumbered_list_itemTextFilterListInput>;
};

type NotionRawChildrenChildrenChildrenChildrenNumbered_list_itemSortInput = {
  readonly color: InputMaybe<SortOrderEnum>;
  readonly text: InputMaybe<NotionRawChildrenChildrenChildrenChildrenNumbered_list_itemTextSortInput>;
};

type NotionRawChildrenChildrenChildrenChildrenNumbered_list_itemText = {
  readonly annotations: Maybe<NotionRawChildrenChildrenChildrenChildrenNumbered_list_itemTextAnnotations>;
  readonly href: Maybe<Scalars['String']>;
  readonly plain_text: Maybe<Scalars['String']>;
  readonly text: Maybe<NotionRawChildrenChildrenChildrenChildrenNumbered_list_itemTextText>;
  readonly type: Maybe<Scalars['String']>;
};

type NotionRawChildrenChildrenChildrenChildrenNumbered_list_itemTextAnnotations = {
  readonly bold: Maybe<Scalars['Boolean']>;
  readonly code: Maybe<Scalars['Boolean']>;
  readonly color: Maybe<Scalars['String']>;
  readonly italic: Maybe<Scalars['Boolean']>;
  readonly strikethrough: Maybe<Scalars['Boolean']>;
  readonly underline: Maybe<Scalars['Boolean']>;
};

type NotionRawChildrenChildrenChildrenChildrenNumbered_list_itemTextAnnotationsFieldSelector = {
  readonly bold: InputMaybe<FieldSelectorEnum>;
  readonly code: InputMaybe<FieldSelectorEnum>;
  readonly color: InputMaybe<FieldSelectorEnum>;
  readonly italic: InputMaybe<FieldSelectorEnum>;
  readonly strikethrough: InputMaybe<FieldSelectorEnum>;
  readonly underline: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenChildrenChildrenChildrenNumbered_list_itemTextAnnotationsFilterInput = {
  readonly bold: InputMaybe<BooleanQueryOperatorInput>;
  readonly code: InputMaybe<BooleanQueryOperatorInput>;
  readonly color: InputMaybe<StringQueryOperatorInput>;
  readonly italic: InputMaybe<BooleanQueryOperatorInput>;
  readonly strikethrough: InputMaybe<BooleanQueryOperatorInput>;
  readonly underline: InputMaybe<BooleanQueryOperatorInput>;
};

type NotionRawChildrenChildrenChildrenChildrenNumbered_list_itemTextAnnotationsSortInput = {
  readonly bold: InputMaybe<SortOrderEnum>;
  readonly code: InputMaybe<SortOrderEnum>;
  readonly color: InputMaybe<SortOrderEnum>;
  readonly italic: InputMaybe<SortOrderEnum>;
  readonly strikethrough: InputMaybe<SortOrderEnum>;
  readonly underline: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenChildrenChildrenChildrenNumbered_list_itemTextFieldSelector = {
  readonly annotations: InputMaybe<NotionRawChildrenChildrenChildrenChildrenNumbered_list_itemTextAnnotationsFieldSelector>;
  readonly href: InputMaybe<FieldSelectorEnum>;
  readonly plain_text: InputMaybe<FieldSelectorEnum>;
  readonly text: InputMaybe<NotionRawChildrenChildrenChildrenChildrenNumbered_list_itemTextTextFieldSelector>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenChildrenChildrenChildrenNumbered_list_itemTextFilterInput = {
  readonly annotations: InputMaybe<NotionRawChildrenChildrenChildrenChildrenNumbered_list_itemTextAnnotationsFilterInput>;
  readonly href: InputMaybe<StringQueryOperatorInput>;
  readonly plain_text: InputMaybe<StringQueryOperatorInput>;
  readonly text: InputMaybe<NotionRawChildrenChildrenChildrenChildrenNumbered_list_itemTextTextFilterInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawChildrenChildrenChildrenChildrenNumbered_list_itemTextFilterListInput = {
  readonly elemMatch: InputMaybe<NotionRawChildrenChildrenChildrenChildrenNumbered_list_itemTextFilterInput>;
};

type NotionRawChildrenChildrenChildrenChildrenNumbered_list_itemTextSortInput = {
  readonly annotations: InputMaybe<NotionRawChildrenChildrenChildrenChildrenNumbered_list_itemTextAnnotationsSortInput>;
  readonly href: InputMaybe<SortOrderEnum>;
  readonly plain_text: InputMaybe<SortOrderEnum>;
  readonly text: InputMaybe<NotionRawChildrenChildrenChildrenChildrenNumbered_list_itemTextTextSortInput>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenChildrenChildrenChildrenNumbered_list_itemTextText = {
  readonly content: Maybe<Scalars['String']>;
  readonly link: Maybe<NotionRawChildrenChildrenChildrenChildrenNumbered_list_itemTextTextLink>;
};

type NotionRawChildrenChildrenChildrenChildrenNumbered_list_itemTextTextFieldSelector = {
  readonly content: InputMaybe<FieldSelectorEnum>;
  readonly link: InputMaybe<NotionRawChildrenChildrenChildrenChildrenNumbered_list_itemTextTextLinkFieldSelector>;
};

type NotionRawChildrenChildrenChildrenChildrenNumbered_list_itemTextTextFilterInput = {
  readonly content: InputMaybe<StringQueryOperatorInput>;
  readonly link: InputMaybe<NotionRawChildrenChildrenChildrenChildrenNumbered_list_itemTextTextLinkFilterInput>;
};

type NotionRawChildrenChildrenChildrenChildrenNumbered_list_itemTextTextLink = {
  readonly url: Maybe<Scalars['String']>;
};

type NotionRawChildrenChildrenChildrenChildrenNumbered_list_itemTextTextLinkFieldSelector = {
  readonly url: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenChildrenChildrenChildrenNumbered_list_itemTextTextLinkFilterInput = {
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawChildrenChildrenChildrenChildrenNumbered_list_itemTextTextLinkSortInput = {
  readonly url: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenChildrenChildrenChildrenNumbered_list_itemTextTextSortInput = {
  readonly content: InputMaybe<SortOrderEnum>;
  readonly link: InputMaybe<NotionRawChildrenChildrenChildrenChildrenNumbered_list_itemTextTextLinkSortInput>;
};

type NotionRawChildrenChildrenChildrenChildrenParagraph = {
  readonly color: Maybe<Scalars['String']>;
  readonly text: Maybe<ReadonlyArray<Maybe<NotionRawChildrenChildrenChildrenChildrenParagraphText>>>;
};

type NotionRawChildrenChildrenChildrenChildrenParagraphFieldSelector = {
  readonly color: InputMaybe<FieldSelectorEnum>;
  readonly text: InputMaybe<NotionRawChildrenChildrenChildrenChildrenParagraphTextFieldSelector>;
};

type NotionRawChildrenChildrenChildrenChildrenParagraphFilterInput = {
  readonly color: InputMaybe<StringQueryOperatorInput>;
  readonly text: InputMaybe<NotionRawChildrenChildrenChildrenChildrenParagraphTextFilterListInput>;
};

type NotionRawChildrenChildrenChildrenChildrenParagraphSortInput = {
  readonly color: InputMaybe<SortOrderEnum>;
  readonly text: InputMaybe<NotionRawChildrenChildrenChildrenChildrenParagraphTextSortInput>;
};

type NotionRawChildrenChildrenChildrenChildrenParagraphText = {
  readonly annotations: Maybe<NotionRawChildrenChildrenChildrenChildrenParagraphTextAnnotations>;
  readonly href: Maybe<Scalars['String']>;
  readonly plain_text: Maybe<Scalars['String']>;
  readonly text: Maybe<NotionRawChildrenChildrenChildrenChildrenParagraphTextText>;
  readonly type: Maybe<Scalars['String']>;
};

type NotionRawChildrenChildrenChildrenChildrenParagraphTextAnnotations = {
  readonly bold: Maybe<Scalars['Boolean']>;
  readonly code: Maybe<Scalars['Boolean']>;
  readonly color: Maybe<Scalars['String']>;
  readonly italic: Maybe<Scalars['Boolean']>;
  readonly strikethrough: Maybe<Scalars['Boolean']>;
  readonly underline: Maybe<Scalars['Boolean']>;
};

type NotionRawChildrenChildrenChildrenChildrenParagraphTextAnnotationsFieldSelector = {
  readonly bold: InputMaybe<FieldSelectorEnum>;
  readonly code: InputMaybe<FieldSelectorEnum>;
  readonly color: InputMaybe<FieldSelectorEnum>;
  readonly italic: InputMaybe<FieldSelectorEnum>;
  readonly strikethrough: InputMaybe<FieldSelectorEnum>;
  readonly underline: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenChildrenChildrenChildrenParagraphTextAnnotationsFilterInput = {
  readonly bold: InputMaybe<BooleanQueryOperatorInput>;
  readonly code: InputMaybe<BooleanQueryOperatorInput>;
  readonly color: InputMaybe<StringQueryOperatorInput>;
  readonly italic: InputMaybe<BooleanQueryOperatorInput>;
  readonly strikethrough: InputMaybe<BooleanQueryOperatorInput>;
  readonly underline: InputMaybe<BooleanQueryOperatorInput>;
};

type NotionRawChildrenChildrenChildrenChildrenParagraphTextAnnotationsSortInput = {
  readonly bold: InputMaybe<SortOrderEnum>;
  readonly code: InputMaybe<SortOrderEnum>;
  readonly color: InputMaybe<SortOrderEnum>;
  readonly italic: InputMaybe<SortOrderEnum>;
  readonly strikethrough: InputMaybe<SortOrderEnum>;
  readonly underline: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenChildrenChildrenChildrenParagraphTextFieldSelector = {
  readonly annotations: InputMaybe<NotionRawChildrenChildrenChildrenChildrenParagraphTextAnnotationsFieldSelector>;
  readonly href: InputMaybe<FieldSelectorEnum>;
  readonly plain_text: InputMaybe<FieldSelectorEnum>;
  readonly text: InputMaybe<NotionRawChildrenChildrenChildrenChildrenParagraphTextTextFieldSelector>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenChildrenChildrenChildrenParagraphTextFilterInput = {
  readonly annotations: InputMaybe<NotionRawChildrenChildrenChildrenChildrenParagraphTextAnnotationsFilterInput>;
  readonly href: InputMaybe<StringQueryOperatorInput>;
  readonly plain_text: InputMaybe<StringQueryOperatorInput>;
  readonly text: InputMaybe<NotionRawChildrenChildrenChildrenChildrenParagraphTextTextFilterInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawChildrenChildrenChildrenChildrenParagraphTextFilterListInput = {
  readonly elemMatch: InputMaybe<NotionRawChildrenChildrenChildrenChildrenParagraphTextFilterInput>;
};

type NotionRawChildrenChildrenChildrenChildrenParagraphTextSortInput = {
  readonly annotations: InputMaybe<NotionRawChildrenChildrenChildrenChildrenParagraphTextAnnotationsSortInput>;
  readonly href: InputMaybe<SortOrderEnum>;
  readonly plain_text: InputMaybe<SortOrderEnum>;
  readonly text: InputMaybe<NotionRawChildrenChildrenChildrenChildrenParagraphTextTextSortInput>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenChildrenChildrenChildrenParagraphTextText = {
  readonly content: Maybe<Scalars['String']>;
  readonly link: Maybe<NotionRawChildrenChildrenChildrenChildrenParagraphTextTextLink>;
};

type NotionRawChildrenChildrenChildrenChildrenParagraphTextTextFieldSelector = {
  readonly content: InputMaybe<FieldSelectorEnum>;
  readonly link: InputMaybe<NotionRawChildrenChildrenChildrenChildrenParagraphTextTextLinkFieldSelector>;
};

type NotionRawChildrenChildrenChildrenChildrenParagraphTextTextFilterInput = {
  readonly content: InputMaybe<StringQueryOperatorInput>;
  readonly link: InputMaybe<NotionRawChildrenChildrenChildrenChildrenParagraphTextTextLinkFilterInput>;
};

type NotionRawChildrenChildrenChildrenChildrenParagraphTextTextLink = {
  readonly url: Maybe<Scalars['String']>;
};

type NotionRawChildrenChildrenChildrenChildrenParagraphTextTextLinkFieldSelector = {
  readonly url: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenChildrenChildrenChildrenParagraphTextTextLinkFilterInput = {
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawChildrenChildrenChildrenChildrenParagraphTextTextLinkSortInput = {
  readonly url: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenChildrenChildrenChildrenParagraphTextTextSortInput = {
  readonly content: InputMaybe<SortOrderEnum>;
  readonly link: InputMaybe<NotionRawChildrenChildrenChildrenChildrenParagraphTextTextLinkSortInput>;
};

type NotionRawChildrenChildrenChildrenChildrenParent = {
  readonly block_id: Maybe<Scalars['String']>;
  readonly page_id: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
};

type NotionRawChildrenChildrenChildrenChildrenParentFieldSelector = {
  readonly block_id: InputMaybe<FieldSelectorEnum>;
  readonly page_id: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenChildrenChildrenChildrenParentFilterInput = {
  readonly block_id: InputMaybe<StringQueryOperatorInput>;
  readonly page_id: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawChildrenChildrenChildrenChildrenParentSortInput = {
  readonly block_id: InputMaybe<SortOrderEnum>;
  readonly page_id: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenChildrenChildrenChildrenSortInput = {
  readonly archived: InputMaybe<SortOrderEnum>;
  readonly bulleted_list_item: InputMaybe<NotionRawChildrenChildrenChildrenChildrenBulleted_list_itemSortInput>;
  readonly children: InputMaybe<NotionRawChildrenChildrenChildrenChildrenChildrenSortInput>;
  readonly created_by: InputMaybe<NotionRawChildrenChildrenChildrenChildrenCreated_bySortInput>;
  readonly created_time: InputMaybe<SortOrderEnum>;
  readonly has_children: InputMaybe<SortOrderEnum>;
  readonly heading_1: InputMaybe<NotionRawChildrenChildrenChildrenChildrenHeading_1SortInput>;
  readonly heading_3: InputMaybe<NotionRawChildrenChildrenChildrenChildrenHeading_3SortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly last_edited_by: InputMaybe<NotionRawChildrenChildrenChildrenChildrenLast_edited_bySortInput>;
  readonly last_edited_time: InputMaybe<SortOrderEnum>;
  readonly numbered_list_item: InputMaybe<NotionRawChildrenChildrenChildrenChildrenNumbered_list_itemSortInput>;
  readonly object: InputMaybe<SortOrderEnum>;
  readonly paragraph: InputMaybe<NotionRawChildrenChildrenChildrenChildrenParagraphSortInput>;
  readonly parent: InputMaybe<NotionRawChildrenChildrenChildrenChildrenParentSortInput>;
  readonly table_of_contents: InputMaybe<NotionRawChildrenChildrenChildrenChildrenTable_of_contentsSortInput>;
  readonly to_do: InputMaybe<NotionRawChildrenChildrenChildrenChildrenTo_doSortInput>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenChildrenChildrenChildrenTable_of_contents = {
  readonly color: Maybe<Scalars['String']>;
};

type NotionRawChildrenChildrenChildrenChildrenTable_of_contentsFieldSelector = {
  readonly color: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenChildrenChildrenChildrenTable_of_contentsFilterInput = {
  readonly color: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawChildrenChildrenChildrenChildrenTable_of_contentsSortInput = {
  readonly color: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenChildrenChildrenChildrenTo_do = {
  readonly checked: Maybe<Scalars['Boolean']>;
  readonly color: Maybe<Scalars['String']>;
  readonly text: Maybe<ReadonlyArray<Maybe<NotionRawChildrenChildrenChildrenChildrenTo_doText>>>;
};

type NotionRawChildrenChildrenChildrenChildrenTo_doFieldSelector = {
  readonly checked: InputMaybe<FieldSelectorEnum>;
  readonly color: InputMaybe<FieldSelectorEnum>;
  readonly text: InputMaybe<NotionRawChildrenChildrenChildrenChildrenTo_doTextFieldSelector>;
};

type NotionRawChildrenChildrenChildrenChildrenTo_doFilterInput = {
  readonly checked: InputMaybe<BooleanQueryOperatorInput>;
  readonly color: InputMaybe<StringQueryOperatorInput>;
  readonly text: InputMaybe<NotionRawChildrenChildrenChildrenChildrenTo_doTextFilterListInput>;
};

type NotionRawChildrenChildrenChildrenChildrenTo_doSortInput = {
  readonly checked: InputMaybe<SortOrderEnum>;
  readonly color: InputMaybe<SortOrderEnum>;
  readonly text: InputMaybe<NotionRawChildrenChildrenChildrenChildrenTo_doTextSortInput>;
};

type NotionRawChildrenChildrenChildrenChildrenTo_doText = {
  readonly annotations: Maybe<NotionRawChildrenChildrenChildrenChildrenTo_doTextAnnotations>;
  readonly plain_text: Maybe<Scalars['String']>;
  readonly text: Maybe<NotionRawChildrenChildrenChildrenChildrenTo_doTextText>;
  readonly type: Maybe<Scalars['String']>;
};

type NotionRawChildrenChildrenChildrenChildrenTo_doTextAnnotations = {
  readonly bold: Maybe<Scalars['Boolean']>;
  readonly code: Maybe<Scalars['Boolean']>;
  readonly color: Maybe<Scalars['String']>;
  readonly italic: Maybe<Scalars['Boolean']>;
  readonly strikethrough: Maybe<Scalars['Boolean']>;
  readonly underline: Maybe<Scalars['Boolean']>;
};

type NotionRawChildrenChildrenChildrenChildrenTo_doTextAnnotationsFieldSelector = {
  readonly bold: InputMaybe<FieldSelectorEnum>;
  readonly code: InputMaybe<FieldSelectorEnum>;
  readonly color: InputMaybe<FieldSelectorEnum>;
  readonly italic: InputMaybe<FieldSelectorEnum>;
  readonly strikethrough: InputMaybe<FieldSelectorEnum>;
  readonly underline: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenChildrenChildrenChildrenTo_doTextAnnotationsFilterInput = {
  readonly bold: InputMaybe<BooleanQueryOperatorInput>;
  readonly code: InputMaybe<BooleanQueryOperatorInput>;
  readonly color: InputMaybe<StringQueryOperatorInput>;
  readonly italic: InputMaybe<BooleanQueryOperatorInput>;
  readonly strikethrough: InputMaybe<BooleanQueryOperatorInput>;
  readonly underline: InputMaybe<BooleanQueryOperatorInput>;
};

type NotionRawChildrenChildrenChildrenChildrenTo_doTextAnnotationsSortInput = {
  readonly bold: InputMaybe<SortOrderEnum>;
  readonly code: InputMaybe<SortOrderEnum>;
  readonly color: InputMaybe<SortOrderEnum>;
  readonly italic: InputMaybe<SortOrderEnum>;
  readonly strikethrough: InputMaybe<SortOrderEnum>;
  readonly underline: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenChildrenChildrenChildrenTo_doTextFieldSelector = {
  readonly annotations: InputMaybe<NotionRawChildrenChildrenChildrenChildrenTo_doTextAnnotationsFieldSelector>;
  readonly plain_text: InputMaybe<FieldSelectorEnum>;
  readonly text: InputMaybe<NotionRawChildrenChildrenChildrenChildrenTo_doTextTextFieldSelector>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenChildrenChildrenChildrenTo_doTextFilterInput = {
  readonly annotations: InputMaybe<NotionRawChildrenChildrenChildrenChildrenTo_doTextAnnotationsFilterInput>;
  readonly plain_text: InputMaybe<StringQueryOperatorInput>;
  readonly text: InputMaybe<NotionRawChildrenChildrenChildrenChildrenTo_doTextTextFilterInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawChildrenChildrenChildrenChildrenTo_doTextFilterListInput = {
  readonly elemMatch: InputMaybe<NotionRawChildrenChildrenChildrenChildrenTo_doTextFilterInput>;
};

type NotionRawChildrenChildrenChildrenChildrenTo_doTextSortInput = {
  readonly annotations: InputMaybe<NotionRawChildrenChildrenChildrenChildrenTo_doTextAnnotationsSortInput>;
  readonly plain_text: InputMaybe<SortOrderEnum>;
  readonly text: InputMaybe<NotionRawChildrenChildrenChildrenChildrenTo_doTextTextSortInput>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenChildrenChildrenChildrenTo_doTextText = {
  readonly content: Maybe<Scalars['String']>;
};

type NotionRawChildrenChildrenChildrenChildrenTo_doTextTextFieldSelector = {
  readonly content: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenChildrenChildrenChildrenTo_doTextTextFilterInput = {
  readonly content: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawChildrenChildrenChildrenChildrenTo_doTextTextSortInput = {
  readonly content: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenChildrenChildrenCode = {
  readonly language: Maybe<Scalars['String']>;
  readonly text: Maybe<ReadonlyArray<Maybe<NotionRawChildrenChildrenChildrenCodeText>>>;
};

type NotionRawChildrenChildrenChildrenCodeFieldSelector = {
  readonly language: InputMaybe<FieldSelectorEnum>;
  readonly text: InputMaybe<NotionRawChildrenChildrenChildrenCodeTextFieldSelector>;
};

type NotionRawChildrenChildrenChildrenCodeFilterInput = {
  readonly language: InputMaybe<StringQueryOperatorInput>;
  readonly text: InputMaybe<NotionRawChildrenChildrenChildrenCodeTextFilterListInput>;
};

type NotionRawChildrenChildrenChildrenCodeSortInput = {
  readonly language: InputMaybe<SortOrderEnum>;
  readonly text: InputMaybe<NotionRawChildrenChildrenChildrenCodeTextSortInput>;
};

type NotionRawChildrenChildrenChildrenCodeText = {
  readonly annotations: Maybe<NotionRawChildrenChildrenChildrenCodeTextAnnotations>;
  readonly plain_text: Maybe<Scalars['String']>;
  readonly text: Maybe<NotionRawChildrenChildrenChildrenCodeTextText>;
  readonly type: Maybe<Scalars['String']>;
};

type NotionRawChildrenChildrenChildrenCodeTextAnnotations = {
  readonly bold: Maybe<Scalars['Boolean']>;
  readonly code: Maybe<Scalars['Boolean']>;
  readonly color: Maybe<Scalars['String']>;
  readonly italic: Maybe<Scalars['Boolean']>;
  readonly strikethrough: Maybe<Scalars['Boolean']>;
  readonly underline: Maybe<Scalars['Boolean']>;
};

type NotionRawChildrenChildrenChildrenCodeTextAnnotationsFieldSelector = {
  readonly bold: InputMaybe<FieldSelectorEnum>;
  readonly code: InputMaybe<FieldSelectorEnum>;
  readonly color: InputMaybe<FieldSelectorEnum>;
  readonly italic: InputMaybe<FieldSelectorEnum>;
  readonly strikethrough: InputMaybe<FieldSelectorEnum>;
  readonly underline: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenChildrenChildrenCodeTextAnnotationsFilterInput = {
  readonly bold: InputMaybe<BooleanQueryOperatorInput>;
  readonly code: InputMaybe<BooleanQueryOperatorInput>;
  readonly color: InputMaybe<StringQueryOperatorInput>;
  readonly italic: InputMaybe<BooleanQueryOperatorInput>;
  readonly strikethrough: InputMaybe<BooleanQueryOperatorInput>;
  readonly underline: InputMaybe<BooleanQueryOperatorInput>;
};

type NotionRawChildrenChildrenChildrenCodeTextAnnotationsSortInput = {
  readonly bold: InputMaybe<SortOrderEnum>;
  readonly code: InputMaybe<SortOrderEnum>;
  readonly color: InputMaybe<SortOrderEnum>;
  readonly italic: InputMaybe<SortOrderEnum>;
  readonly strikethrough: InputMaybe<SortOrderEnum>;
  readonly underline: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenChildrenChildrenCodeTextFieldSelector = {
  readonly annotations: InputMaybe<NotionRawChildrenChildrenChildrenCodeTextAnnotationsFieldSelector>;
  readonly plain_text: InputMaybe<FieldSelectorEnum>;
  readonly text: InputMaybe<NotionRawChildrenChildrenChildrenCodeTextTextFieldSelector>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenChildrenChildrenCodeTextFilterInput = {
  readonly annotations: InputMaybe<NotionRawChildrenChildrenChildrenCodeTextAnnotationsFilterInput>;
  readonly plain_text: InputMaybe<StringQueryOperatorInput>;
  readonly text: InputMaybe<NotionRawChildrenChildrenChildrenCodeTextTextFilterInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawChildrenChildrenChildrenCodeTextFilterListInput = {
  readonly elemMatch: InputMaybe<NotionRawChildrenChildrenChildrenCodeTextFilterInput>;
};

type NotionRawChildrenChildrenChildrenCodeTextSortInput = {
  readonly annotations: InputMaybe<NotionRawChildrenChildrenChildrenCodeTextAnnotationsSortInput>;
  readonly plain_text: InputMaybe<SortOrderEnum>;
  readonly text: InputMaybe<NotionRawChildrenChildrenChildrenCodeTextTextSortInput>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenChildrenChildrenCodeTextText = {
  readonly content: Maybe<Scalars['String']>;
};

type NotionRawChildrenChildrenChildrenCodeTextTextFieldSelector = {
  readonly content: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenChildrenChildrenCodeTextTextFilterInput = {
  readonly content: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawChildrenChildrenChildrenCodeTextTextSortInput = {
  readonly content: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenChildrenChildrenCreated_by = {
  readonly id: Maybe<Scalars['String']>;
  readonly object: Maybe<Scalars['String']>;
};

type NotionRawChildrenChildrenChildrenCreated_byFieldSelector = {
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly object: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenChildrenChildrenCreated_byFilterInput = {
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly object: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawChildrenChildrenChildrenCreated_bySortInput = {
  readonly id: InputMaybe<SortOrderEnum>;
  readonly object: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenChildrenChildrenFieldSelector = {
  readonly archived: InputMaybe<FieldSelectorEnum>;
  readonly bookmark: InputMaybe<NotionRawChildrenChildrenChildrenBookmarkFieldSelector>;
  readonly bulleted_list_item: InputMaybe<NotionRawChildrenChildrenChildrenBulleted_list_itemFieldSelector>;
  readonly child_page: InputMaybe<NotionRawChildrenChildrenChildrenChild_pageFieldSelector>;
  readonly children: InputMaybe<NotionRawChildrenChildrenChildrenChildrenFieldSelector>;
  readonly code: InputMaybe<NotionRawChildrenChildrenChildrenCodeFieldSelector>;
  readonly created_by: InputMaybe<NotionRawChildrenChildrenChildrenCreated_byFieldSelector>;
  readonly created_time: InputMaybe<FieldSelectorEnum>;
  readonly has_children: InputMaybe<FieldSelectorEnum>;
  readonly heading_1: InputMaybe<NotionRawChildrenChildrenChildrenHeading_1FieldSelector>;
  readonly heading_2: InputMaybe<NotionRawChildrenChildrenChildrenHeading_2FieldSelector>;
  readonly heading_3: InputMaybe<NotionRawChildrenChildrenChildrenHeading_3FieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly last_edited_by: InputMaybe<NotionRawChildrenChildrenChildrenLast_edited_byFieldSelector>;
  readonly last_edited_time: InputMaybe<FieldSelectorEnum>;
  readonly object: InputMaybe<FieldSelectorEnum>;
  readonly paragraph: InputMaybe<NotionRawChildrenChildrenChildrenParagraphFieldSelector>;
  readonly parent: InputMaybe<NotionRawChildrenChildrenChildrenParentFieldSelector>;
  readonly toggle: InputMaybe<NotionRawChildrenChildrenChildrenToggleFieldSelector>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenChildrenChildrenFilterInput = {
  readonly archived: InputMaybe<BooleanQueryOperatorInput>;
  readonly bookmark: InputMaybe<NotionRawChildrenChildrenChildrenBookmarkFilterInput>;
  readonly bulleted_list_item: InputMaybe<NotionRawChildrenChildrenChildrenBulleted_list_itemFilterInput>;
  readonly child_page: InputMaybe<NotionRawChildrenChildrenChildrenChild_pageFilterInput>;
  readonly children: InputMaybe<NotionRawChildrenChildrenChildrenChildrenFilterListInput>;
  readonly code: InputMaybe<NotionRawChildrenChildrenChildrenCodeFilterInput>;
  readonly created_by: InputMaybe<NotionRawChildrenChildrenChildrenCreated_byFilterInput>;
  readonly created_time: InputMaybe<DateQueryOperatorInput>;
  readonly has_children: InputMaybe<BooleanQueryOperatorInput>;
  readonly heading_1: InputMaybe<NotionRawChildrenChildrenChildrenHeading_1FilterInput>;
  readonly heading_2: InputMaybe<NotionRawChildrenChildrenChildrenHeading_2FilterInput>;
  readonly heading_3: InputMaybe<NotionRawChildrenChildrenChildrenHeading_3FilterInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly last_edited_by: InputMaybe<NotionRawChildrenChildrenChildrenLast_edited_byFilterInput>;
  readonly last_edited_time: InputMaybe<DateQueryOperatorInput>;
  readonly object: InputMaybe<StringQueryOperatorInput>;
  readonly paragraph: InputMaybe<NotionRawChildrenChildrenChildrenParagraphFilterInput>;
  readonly parent: InputMaybe<NotionRawChildrenChildrenChildrenParentFilterInput>;
  readonly toggle: InputMaybe<NotionRawChildrenChildrenChildrenToggleFilterInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawChildrenChildrenChildrenFilterListInput = {
  readonly elemMatch: InputMaybe<NotionRawChildrenChildrenChildrenFilterInput>;
};

type NotionRawChildrenChildrenChildrenHeading_1 = {
  readonly color: Maybe<Scalars['String']>;
  readonly is_toggleable: Maybe<Scalars['Boolean']>;
  readonly text: Maybe<ReadonlyArray<Maybe<NotionRawChildrenChildrenChildrenHeading_1Text>>>;
};

type NotionRawChildrenChildrenChildrenHeading_1FieldSelector = {
  readonly color: InputMaybe<FieldSelectorEnum>;
  readonly is_toggleable: InputMaybe<FieldSelectorEnum>;
  readonly text: InputMaybe<NotionRawChildrenChildrenChildrenHeading_1TextFieldSelector>;
};

type NotionRawChildrenChildrenChildrenHeading_1FilterInput = {
  readonly color: InputMaybe<StringQueryOperatorInput>;
  readonly is_toggleable: InputMaybe<BooleanQueryOperatorInput>;
  readonly text: InputMaybe<NotionRawChildrenChildrenChildrenHeading_1TextFilterListInput>;
};

type NotionRawChildrenChildrenChildrenHeading_1SortInput = {
  readonly color: InputMaybe<SortOrderEnum>;
  readonly is_toggleable: InputMaybe<SortOrderEnum>;
  readonly text: InputMaybe<NotionRawChildrenChildrenChildrenHeading_1TextSortInput>;
};

type NotionRawChildrenChildrenChildrenHeading_1Text = {
  readonly annotations: Maybe<NotionRawChildrenChildrenChildrenHeading_1TextAnnotations>;
  readonly plain_text: Maybe<Scalars['String']>;
  readonly text: Maybe<NotionRawChildrenChildrenChildrenHeading_1TextText>;
  readonly type: Maybe<Scalars['String']>;
};

type NotionRawChildrenChildrenChildrenHeading_1TextAnnotations = {
  readonly bold: Maybe<Scalars['Boolean']>;
  readonly code: Maybe<Scalars['Boolean']>;
  readonly color: Maybe<Scalars['String']>;
  readonly italic: Maybe<Scalars['Boolean']>;
  readonly strikethrough: Maybe<Scalars['Boolean']>;
  readonly underline: Maybe<Scalars['Boolean']>;
};

type NotionRawChildrenChildrenChildrenHeading_1TextAnnotationsFieldSelector = {
  readonly bold: InputMaybe<FieldSelectorEnum>;
  readonly code: InputMaybe<FieldSelectorEnum>;
  readonly color: InputMaybe<FieldSelectorEnum>;
  readonly italic: InputMaybe<FieldSelectorEnum>;
  readonly strikethrough: InputMaybe<FieldSelectorEnum>;
  readonly underline: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenChildrenChildrenHeading_1TextAnnotationsFilterInput = {
  readonly bold: InputMaybe<BooleanQueryOperatorInput>;
  readonly code: InputMaybe<BooleanQueryOperatorInput>;
  readonly color: InputMaybe<StringQueryOperatorInput>;
  readonly italic: InputMaybe<BooleanQueryOperatorInput>;
  readonly strikethrough: InputMaybe<BooleanQueryOperatorInput>;
  readonly underline: InputMaybe<BooleanQueryOperatorInput>;
};

type NotionRawChildrenChildrenChildrenHeading_1TextAnnotationsSortInput = {
  readonly bold: InputMaybe<SortOrderEnum>;
  readonly code: InputMaybe<SortOrderEnum>;
  readonly color: InputMaybe<SortOrderEnum>;
  readonly italic: InputMaybe<SortOrderEnum>;
  readonly strikethrough: InputMaybe<SortOrderEnum>;
  readonly underline: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenChildrenChildrenHeading_1TextFieldSelector = {
  readonly annotations: InputMaybe<NotionRawChildrenChildrenChildrenHeading_1TextAnnotationsFieldSelector>;
  readonly plain_text: InputMaybe<FieldSelectorEnum>;
  readonly text: InputMaybe<NotionRawChildrenChildrenChildrenHeading_1TextTextFieldSelector>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenChildrenChildrenHeading_1TextFilterInput = {
  readonly annotations: InputMaybe<NotionRawChildrenChildrenChildrenHeading_1TextAnnotationsFilterInput>;
  readonly plain_text: InputMaybe<StringQueryOperatorInput>;
  readonly text: InputMaybe<NotionRawChildrenChildrenChildrenHeading_1TextTextFilterInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawChildrenChildrenChildrenHeading_1TextFilterListInput = {
  readonly elemMatch: InputMaybe<NotionRawChildrenChildrenChildrenHeading_1TextFilterInput>;
};

type NotionRawChildrenChildrenChildrenHeading_1TextSortInput = {
  readonly annotations: InputMaybe<NotionRawChildrenChildrenChildrenHeading_1TextAnnotationsSortInput>;
  readonly plain_text: InputMaybe<SortOrderEnum>;
  readonly text: InputMaybe<NotionRawChildrenChildrenChildrenHeading_1TextTextSortInput>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenChildrenChildrenHeading_1TextText = {
  readonly content: Maybe<Scalars['String']>;
};

type NotionRawChildrenChildrenChildrenHeading_1TextTextFieldSelector = {
  readonly content: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenChildrenChildrenHeading_1TextTextFilterInput = {
  readonly content: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawChildrenChildrenChildrenHeading_1TextTextSortInput = {
  readonly content: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenChildrenChildrenHeading_2 = {
  readonly color: Maybe<Scalars['String']>;
  readonly is_toggleable: Maybe<Scalars['Boolean']>;
  readonly text: Maybe<ReadonlyArray<Maybe<NotionRawChildrenChildrenChildrenHeading_2Text>>>;
};

type NotionRawChildrenChildrenChildrenHeading_2FieldSelector = {
  readonly color: InputMaybe<FieldSelectorEnum>;
  readonly is_toggleable: InputMaybe<FieldSelectorEnum>;
  readonly text: InputMaybe<NotionRawChildrenChildrenChildrenHeading_2TextFieldSelector>;
};

type NotionRawChildrenChildrenChildrenHeading_2FilterInput = {
  readonly color: InputMaybe<StringQueryOperatorInput>;
  readonly is_toggleable: InputMaybe<BooleanQueryOperatorInput>;
  readonly text: InputMaybe<NotionRawChildrenChildrenChildrenHeading_2TextFilterListInput>;
};

type NotionRawChildrenChildrenChildrenHeading_2SortInput = {
  readonly color: InputMaybe<SortOrderEnum>;
  readonly is_toggleable: InputMaybe<SortOrderEnum>;
  readonly text: InputMaybe<NotionRawChildrenChildrenChildrenHeading_2TextSortInput>;
};

type NotionRawChildrenChildrenChildrenHeading_2Text = {
  readonly annotations: Maybe<NotionRawChildrenChildrenChildrenHeading_2TextAnnotations>;
  readonly plain_text: Maybe<Scalars['String']>;
  readonly text: Maybe<NotionRawChildrenChildrenChildrenHeading_2TextText>;
  readonly type: Maybe<Scalars['String']>;
};

type NotionRawChildrenChildrenChildrenHeading_2TextAnnotations = {
  readonly bold: Maybe<Scalars['Boolean']>;
  readonly code: Maybe<Scalars['Boolean']>;
  readonly color: Maybe<Scalars['String']>;
  readonly italic: Maybe<Scalars['Boolean']>;
  readonly strikethrough: Maybe<Scalars['Boolean']>;
  readonly underline: Maybe<Scalars['Boolean']>;
};

type NotionRawChildrenChildrenChildrenHeading_2TextAnnotationsFieldSelector = {
  readonly bold: InputMaybe<FieldSelectorEnum>;
  readonly code: InputMaybe<FieldSelectorEnum>;
  readonly color: InputMaybe<FieldSelectorEnum>;
  readonly italic: InputMaybe<FieldSelectorEnum>;
  readonly strikethrough: InputMaybe<FieldSelectorEnum>;
  readonly underline: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenChildrenChildrenHeading_2TextAnnotationsFilterInput = {
  readonly bold: InputMaybe<BooleanQueryOperatorInput>;
  readonly code: InputMaybe<BooleanQueryOperatorInput>;
  readonly color: InputMaybe<StringQueryOperatorInput>;
  readonly italic: InputMaybe<BooleanQueryOperatorInput>;
  readonly strikethrough: InputMaybe<BooleanQueryOperatorInput>;
  readonly underline: InputMaybe<BooleanQueryOperatorInput>;
};

type NotionRawChildrenChildrenChildrenHeading_2TextAnnotationsSortInput = {
  readonly bold: InputMaybe<SortOrderEnum>;
  readonly code: InputMaybe<SortOrderEnum>;
  readonly color: InputMaybe<SortOrderEnum>;
  readonly italic: InputMaybe<SortOrderEnum>;
  readonly strikethrough: InputMaybe<SortOrderEnum>;
  readonly underline: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenChildrenChildrenHeading_2TextFieldSelector = {
  readonly annotations: InputMaybe<NotionRawChildrenChildrenChildrenHeading_2TextAnnotationsFieldSelector>;
  readonly plain_text: InputMaybe<FieldSelectorEnum>;
  readonly text: InputMaybe<NotionRawChildrenChildrenChildrenHeading_2TextTextFieldSelector>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenChildrenChildrenHeading_2TextFilterInput = {
  readonly annotations: InputMaybe<NotionRawChildrenChildrenChildrenHeading_2TextAnnotationsFilterInput>;
  readonly plain_text: InputMaybe<StringQueryOperatorInput>;
  readonly text: InputMaybe<NotionRawChildrenChildrenChildrenHeading_2TextTextFilterInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawChildrenChildrenChildrenHeading_2TextFilterListInput = {
  readonly elemMatch: InputMaybe<NotionRawChildrenChildrenChildrenHeading_2TextFilterInput>;
};

type NotionRawChildrenChildrenChildrenHeading_2TextSortInput = {
  readonly annotations: InputMaybe<NotionRawChildrenChildrenChildrenHeading_2TextAnnotationsSortInput>;
  readonly plain_text: InputMaybe<SortOrderEnum>;
  readonly text: InputMaybe<NotionRawChildrenChildrenChildrenHeading_2TextTextSortInput>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenChildrenChildrenHeading_2TextText = {
  readonly content: Maybe<Scalars['String']>;
};

type NotionRawChildrenChildrenChildrenHeading_2TextTextFieldSelector = {
  readonly content: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenChildrenChildrenHeading_2TextTextFilterInput = {
  readonly content: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawChildrenChildrenChildrenHeading_2TextTextSortInput = {
  readonly content: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenChildrenChildrenHeading_3 = {
  readonly color: Maybe<Scalars['String']>;
  readonly is_toggleable: Maybe<Scalars['Boolean']>;
  readonly text: Maybe<ReadonlyArray<Maybe<NotionRawChildrenChildrenChildrenHeading_3Text>>>;
};

type NotionRawChildrenChildrenChildrenHeading_3FieldSelector = {
  readonly color: InputMaybe<FieldSelectorEnum>;
  readonly is_toggleable: InputMaybe<FieldSelectorEnum>;
  readonly text: InputMaybe<NotionRawChildrenChildrenChildrenHeading_3TextFieldSelector>;
};

type NotionRawChildrenChildrenChildrenHeading_3FilterInput = {
  readonly color: InputMaybe<StringQueryOperatorInput>;
  readonly is_toggleable: InputMaybe<BooleanQueryOperatorInput>;
  readonly text: InputMaybe<NotionRawChildrenChildrenChildrenHeading_3TextFilterListInput>;
};

type NotionRawChildrenChildrenChildrenHeading_3SortInput = {
  readonly color: InputMaybe<SortOrderEnum>;
  readonly is_toggleable: InputMaybe<SortOrderEnum>;
  readonly text: InputMaybe<NotionRawChildrenChildrenChildrenHeading_3TextSortInput>;
};

type NotionRawChildrenChildrenChildrenHeading_3Text = {
  readonly annotations: Maybe<NotionRawChildrenChildrenChildrenHeading_3TextAnnotations>;
  readonly plain_text: Maybe<Scalars['String']>;
  readonly text: Maybe<NotionRawChildrenChildrenChildrenHeading_3TextText>;
  readonly type: Maybe<Scalars['String']>;
};

type NotionRawChildrenChildrenChildrenHeading_3TextAnnotations = {
  readonly bold: Maybe<Scalars['Boolean']>;
  readonly code: Maybe<Scalars['Boolean']>;
  readonly color: Maybe<Scalars['String']>;
  readonly italic: Maybe<Scalars['Boolean']>;
  readonly strikethrough: Maybe<Scalars['Boolean']>;
  readonly underline: Maybe<Scalars['Boolean']>;
};

type NotionRawChildrenChildrenChildrenHeading_3TextAnnotationsFieldSelector = {
  readonly bold: InputMaybe<FieldSelectorEnum>;
  readonly code: InputMaybe<FieldSelectorEnum>;
  readonly color: InputMaybe<FieldSelectorEnum>;
  readonly italic: InputMaybe<FieldSelectorEnum>;
  readonly strikethrough: InputMaybe<FieldSelectorEnum>;
  readonly underline: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenChildrenChildrenHeading_3TextAnnotationsFilterInput = {
  readonly bold: InputMaybe<BooleanQueryOperatorInput>;
  readonly code: InputMaybe<BooleanQueryOperatorInput>;
  readonly color: InputMaybe<StringQueryOperatorInput>;
  readonly italic: InputMaybe<BooleanQueryOperatorInput>;
  readonly strikethrough: InputMaybe<BooleanQueryOperatorInput>;
  readonly underline: InputMaybe<BooleanQueryOperatorInput>;
};

type NotionRawChildrenChildrenChildrenHeading_3TextAnnotationsSortInput = {
  readonly bold: InputMaybe<SortOrderEnum>;
  readonly code: InputMaybe<SortOrderEnum>;
  readonly color: InputMaybe<SortOrderEnum>;
  readonly italic: InputMaybe<SortOrderEnum>;
  readonly strikethrough: InputMaybe<SortOrderEnum>;
  readonly underline: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenChildrenChildrenHeading_3TextFieldSelector = {
  readonly annotations: InputMaybe<NotionRawChildrenChildrenChildrenHeading_3TextAnnotationsFieldSelector>;
  readonly plain_text: InputMaybe<FieldSelectorEnum>;
  readonly text: InputMaybe<NotionRawChildrenChildrenChildrenHeading_3TextTextFieldSelector>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenChildrenChildrenHeading_3TextFilterInput = {
  readonly annotations: InputMaybe<NotionRawChildrenChildrenChildrenHeading_3TextAnnotationsFilterInput>;
  readonly plain_text: InputMaybe<StringQueryOperatorInput>;
  readonly text: InputMaybe<NotionRawChildrenChildrenChildrenHeading_3TextTextFilterInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawChildrenChildrenChildrenHeading_3TextFilterListInput = {
  readonly elemMatch: InputMaybe<NotionRawChildrenChildrenChildrenHeading_3TextFilterInput>;
};

type NotionRawChildrenChildrenChildrenHeading_3TextSortInput = {
  readonly annotations: InputMaybe<NotionRawChildrenChildrenChildrenHeading_3TextAnnotationsSortInput>;
  readonly plain_text: InputMaybe<SortOrderEnum>;
  readonly text: InputMaybe<NotionRawChildrenChildrenChildrenHeading_3TextTextSortInput>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenChildrenChildrenHeading_3TextText = {
  readonly content: Maybe<Scalars['String']>;
};

type NotionRawChildrenChildrenChildrenHeading_3TextTextFieldSelector = {
  readonly content: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenChildrenChildrenHeading_3TextTextFilterInput = {
  readonly content: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawChildrenChildrenChildrenHeading_3TextTextSortInput = {
  readonly content: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenChildrenChildrenLast_edited_by = {
  readonly id: Maybe<Scalars['String']>;
  readonly object: Maybe<Scalars['String']>;
};

type NotionRawChildrenChildrenChildrenLast_edited_byFieldSelector = {
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly object: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenChildrenChildrenLast_edited_byFilterInput = {
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly object: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawChildrenChildrenChildrenLast_edited_bySortInput = {
  readonly id: InputMaybe<SortOrderEnum>;
  readonly object: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenChildrenChildrenParagraph = {
  readonly color: Maybe<Scalars['String']>;
  readonly text: Maybe<ReadonlyArray<Maybe<NotionRawChildrenChildrenChildrenParagraphText>>>;
};

type NotionRawChildrenChildrenChildrenParagraphFieldSelector = {
  readonly color: InputMaybe<FieldSelectorEnum>;
  readonly text: InputMaybe<NotionRawChildrenChildrenChildrenParagraphTextFieldSelector>;
};

type NotionRawChildrenChildrenChildrenParagraphFilterInput = {
  readonly color: InputMaybe<StringQueryOperatorInput>;
  readonly text: InputMaybe<NotionRawChildrenChildrenChildrenParagraphTextFilterListInput>;
};

type NotionRawChildrenChildrenChildrenParagraphSortInput = {
  readonly color: InputMaybe<SortOrderEnum>;
  readonly text: InputMaybe<NotionRawChildrenChildrenChildrenParagraphTextSortInput>;
};

type NotionRawChildrenChildrenChildrenParagraphText = {
  readonly annotations: Maybe<NotionRawChildrenChildrenChildrenParagraphTextAnnotations>;
  readonly href: Maybe<Scalars['String']>;
  readonly plain_text: Maybe<Scalars['String']>;
  readonly text: Maybe<NotionRawChildrenChildrenChildrenParagraphTextText>;
  readonly type: Maybe<Scalars['String']>;
};

type NotionRawChildrenChildrenChildrenParagraphTextAnnotations = {
  readonly bold: Maybe<Scalars['Boolean']>;
  readonly code: Maybe<Scalars['Boolean']>;
  readonly color: Maybe<Scalars['String']>;
  readonly italic: Maybe<Scalars['Boolean']>;
  readonly strikethrough: Maybe<Scalars['Boolean']>;
  readonly underline: Maybe<Scalars['Boolean']>;
};

type NotionRawChildrenChildrenChildrenParagraphTextAnnotationsFieldSelector = {
  readonly bold: InputMaybe<FieldSelectorEnum>;
  readonly code: InputMaybe<FieldSelectorEnum>;
  readonly color: InputMaybe<FieldSelectorEnum>;
  readonly italic: InputMaybe<FieldSelectorEnum>;
  readonly strikethrough: InputMaybe<FieldSelectorEnum>;
  readonly underline: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenChildrenChildrenParagraphTextAnnotationsFilterInput = {
  readonly bold: InputMaybe<BooleanQueryOperatorInput>;
  readonly code: InputMaybe<BooleanQueryOperatorInput>;
  readonly color: InputMaybe<StringQueryOperatorInput>;
  readonly italic: InputMaybe<BooleanQueryOperatorInput>;
  readonly strikethrough: InputMaybe<BooleanQueryOperatorInput>;
  readonly underline: InputMaybe<BooleanQueryOperatorInput>;
};

type NotionRawChildrenChildrenChildrenParagraphTextAnnotationsSortInput = {
  readonly bold: InputMaybe<SortOrderEnum>;
  readonly code: InputMaybe<SortOrderEnum>;
  readonly color: InputMaybe<SortOrderEnum>;
  readonly italic: InputMaybe<SortOrderEnum>;
  readonly strikethrough: InputMaybe<SortOrderEnum>;
  readonly underline: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenChildrenChildrenParagraphTextFieldSelector = {
  readonly annotations: InputMaybe<NotionRawChildrenChildrenChildrenParagraphTextAnnotationsFieldSelector>;
  readonly href: InputMaybe<FieldSelectorEnum>;
  readonly plain_text: InputMaybe<FieldSelectorEnum>;
  readonly text: InputMaybe<NotionRawChildrenChildrenChildrenParagraphTextTextFieldSelector>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenChildrenChildrenParagraphTextFilterInput = {
  readonly annotations: InputMaybe<NotionRawChildrenChildrenChildrenParagraphTextAnnotationsFilterInput>;
  readonly href: InputMaybe<StringQueryOperatorInput>;
  readonly plain_text: InputMaybe<StringQueryOperatorInput>;
  readonly text: InputMaybe<NotionRawChildrenChildrenChildrenParagraphTextTextFilterInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawChildrenChildrenChildrenParagraphTextFilterListInput = {
  readonly elemMatch: InputMaybe<NotionRawChildrenChildrenChildrenParagraphTextFilterInput>;
};

type NotionRawChildrenChildrenChildrenParagraphTextSortInput = {
  readonly annotations: InputMaybe<NotionRawChildrenChildrenChildrenParagraphTextAnnotationsSortInput>;
  readonly href: InputMaybe<SortOrderEnum>;
  readonly plain_text: InputMaybe<SortOrderEnum>;
  readonly text: InputMaybe<NotionRawChildrenChildrenChildrenParagraphTextTextSortInput>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenChildrenChildrenParagraphTextText = {
  readonly content: Maybe<Scalars['String']>;
  readonly link: Maybe<NotionRawChildrenChildrenChildrenParagraphTextTextLink>;
};

type NotionRawChildrenChildrenChildrenParagraphTextTextFieldSelector = {
  readonly content: InputMaybe<FieldSelectorEnum>;
  readonly link: InputMaybe<NotionRawChildrenChildrenChildrenParagraphTextTextLinkFieldSelector>;
};

type NotionRawChildrenChildrenChildrenParagraphTextTextFilterInput = {
  readonly content: InputMaybe<StringQueryOperatorInput>;
  readonly link: InputMaybe<NotionRawChildrenChildrenChildrenParagraphTextTextLinkFilterInput>;
};

type NotionRawChildrenChildrenChildrenParagraphTextTextLink = {
  readonly url: Maybe<Scalars['String']>;
};

type NotionRawChildrenChildrenChildrenParagraphTextTextLinkFieldSelector = {
  readonly url: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenChildrenChildrenParagraphTextTextLinkFilterInput = {
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawChildrenChildrenChildrenParagraphTextTextLinkSortInput = {
  readonly url: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenChildrenChildrenParagraphTextTextSortInput = {
  readonly content: InputMaybe<SortOrderEnum>;
  readonly link: InputMaybe<NotionRawChildrenChildrenChildrenParagraphTextTextLinkSortInput>;
};

type NotionRawChildrenChildrenChildrenParent = {
  readonly block_id: Maybe<Scalars['String']>;
  readonly page_id: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
};

type NotionRawChildrenChildrenChildrenParentFieldSelector = {
  readonly block_id: InputMaybe<FieldSelectorEnum>;
  readonly page_id: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenChildrenChildrenParentFilterInput = {
  readonly block_id: InputMaybe<StringQueryOperatorInput>;
  readonly page_id: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawChildrenChildrenChildrenParentSortInput = {
  readonly block_id: InputMaybe<SortOrderEnum>;
  readonly page_id: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenChildrenChildrenSortInput = {
  readonly archived: InputMaybe<SortOrderEnum>;
  readonly bookmark: InputMaybe<NotionRawChildrenChildrenChildrenBookmarkSortInput>;
  readonly bulleted_list_item: InputMaybe<NotionRawChildrenChildrenChildrenBulleted_list_itemSortInput>;
  readonly child_page: InputMaybe<NotionRawChildrenChildrenChildrenChild_pageSortInput>;
  readonly children: InputMaybe<NotionRawChildrenChildrenChildrenChildrenSortInput>;
  readonly code: InputMaybe<NotionRawChildrenChildrenChildrenCodeSortInput>;
  readonly created_by: InputMaybe<NotionRawChildrenChildrenChildrenCreated_bySortInput>;
  readonly created_time: InputMaybe<SortOrderEnum>;
  readonly has_children: InputMaybe<SortOrderEnum>;
  readonly heading_1: InputMaybe<NotionRawChildrenChildrenChildrenHeading_1SortInput>;
  readonly heading_2: InputMaybe<NotionRawChildrenChildrenChildrenHeading_2SortInput>;
  readonly heading_3: InputMaybe<NotionRawChildrenChildrenChildrenHeading_3SortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly last_edited_by: InputMaybe<NotionRawChildrenChildrenChildrenLast_edited_bySortInput>;
  readonly last_edited_time: InputMaybe<SortOrderEnum>;
  readonly object: InputMaybe<SortOrderEnum>;
  readonly paragraph: InputMaybe<NotionRawChildrenChildrenChildrenParagraphSortInput>;
  readonly parent: InputMaybe<NotionRawChildrenChildrenChildrenParentSortInput>;
  readonly toggle: InputMaybe<NotionRawChildrenChildrenChildrenToggleSortInput>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenChildrenChildrenToggle = {
  readonly color: Maybe<Scalars['String']>;
  readonly text: Maybe<ReadonlyArray<Maybe<NotionRawChildrenChildrenChildrenToggleText>>>;
};

type NotionRawChildrenChildrenChildrenToggleFieldSelector = {
  readonly color: InputMaybe<FieldSelectorEnum>;
  readonly text: InputMaybe<NotionRawChildrenChildrenChildrenToggleTextFieldSelector>;
};

type NotionRawChildrenChildrenChildrenToggleFilterInput = {
  readonly color: InputMaybe<StringQueryOperatorInput>;
  readonly text: InputMaybe<NotionRawChildrenChildrenChildrenToggleTextFilterListInput>;
};

type NotionRawChildrenChildrenChildrenToggleSortInput = {
  readonly color: InputMaybe<SortOrderEnum>;
  readonly text: InputMaybe<NotionRawChildrenChildrenChildrenToggleTextSortInput>;
};

type NotionRawChildrenChildrenChildrenToggleText = {
  readonly annotations: Maybe<NotionRawChildrenChildrenChildrenToggleTextAnnotations>;
  readonly plain_text: Maybe<Scalars['String']>;
  readonly text: Maybe<NotionRawChildrenChildrenChildrenToggleTextText>;
  readonly type: Maybe<Scalars['String']>;
};

type NotionRawChildrenChildrenChildrenToggleTextAnnotations = {
  readonly bold: Maybe<Scalars['Boolean']>;
  readonly code: Maybe<Scalars['Boolean']>;
  readonly color: Maybe<Scalars['String']>;
  readonly italic: Maybe<Scalars['Boolean']>;
  readonly strikethrough: Maybe<Scalars['Boolean']>;
  readonly underline: Maybe<Scalars['Boolean']>;
};

type NotionRawChildrenChildrenChildrenToggleTextAnnotationsFieldSelector = {
  readonly bold: InputMaybe<FieldSelectorEnum>;
  readonly code: InputMaybe<FieldSelectorEnum>;
  readonly color: InputMaybe<FieldSelectorEnum>;
  readonly italic: InputMaybe<FieldSelectorEnum>;
  readonly strikethrough: InputMaybe<FieldSelectorEnum>;
  readonly underline: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenChildrenChildrenToggleTextAnnotationsFilterInput = {
  readonly bold: InputMaybe<BooleanQueryOperatorInput>;
  readonly code: InputMaybe<BooleanQueryOperatorInput>;
  readonly color: InputMaybe<StringQueryOperatorInput>;
  readonly italic: InputMaybe<BooleanQueryOperatorInput>;
  readonly strikethrough: InputMaybe<BooleanQueryOperatorInput>;
  readonly underline: InputMaybe<BooleanQueryOperatorInput>;
};

type NotionRawChildrenChildrenChildrenToggleTextAnnotationsSortInput = {
  readonly bold: InputMaybe<SortOrderEnum>;
  readonly code: InputMaybe<SortOrderEnum>;
  readonly color: InputMaybe<SortOrderEnum>;
  readonly italic: InputMaybe<SortOrderEnum>;
  readonly strikethrough: InputMaybe<SortOrderEnum>;
  readonly underline: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenChildrenChildrenToggleTextFieldSelector = {
  readonly annotations: InputMaybe<NotionRawChildrenChildrenChildrenToggleTextAnnotationsFieldSelector>;
  readonly plain_text: InputMaybe<FieldSelectorEnum>;
  readonly text: InputMaybe<NotionRawChildrenChildrenChildrenToggleTextTextFieldSelector>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenChildrenChildrenToggleTextFilterInput = {
  readonly annotations: InputMaybe<NotionRawChildrenChildrenChildrenToggleTextAnnotationsFilterInput>;
  readonly plain_text: InputMaybe<StringQueryOperatorInput>;
  readonly text: InputMaybe<NotionRawChildrenChildrenChildrenToggleTextTextFilterInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawChildrenChildrenChildrenToggleTextFilterListInput = {
  readonly elemMatch: InputMaybe<NotionRawChildrenChildrenChildrenToggleTextFilterInput>;
};

type NotionRawChildrenChildrenChildrenToggleTextSortInput = {
  readonly annotations: InputMaybe<NotionRawChildrenChildrenChildrenToggleTextAnnotationsSortInput>;
  readonly plain_text: InputMaybe<SortOrderEnum>;
  readonly text: InputMaybe<NotionRawChildrenChildrenChildrenToggleTextTextSortInput>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenChildrenChildrenToggleTextText = {
  readonly content: Maybe<Scalars['String']>;
};

type NotionRawChildrenChildrenChildrenToggleTextTextFieldSelector = {
  readonly content: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenChildrenChildrenToggleTextTextFilterInput = {
  readonly content: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawChildrenChildrenChildrenToggleTextTextSortInput = {
  readonly content: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenChildrenCreated_by = {
  readonly id: Maybe<Scalars['String']>;
  readonly object: Maybe<Scalars['String']>;
};

type NotionRawChildrenChildrenCreated_byFieldSelector = {
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly object: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenChildrenCreated_byFilterInput = {
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly object: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawChildrenChildrenCreated_bySortInput = {
  readonly id: InputMaybe<SortOrderEnum>;
  readonly object: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenChildrenFieldSelector = {
  readonly archived: InputMaybe<FieldSelectorEnum>;
  readonly bulleted_list_item: InputMaybe<NotionRawChildrenChildrenBulleted_list_itemFieldSelector>;
  readonly child_page: InputMaybe<NotionRawChildrenChildrenChild_pageFieldSelector>;
  readonly children: InputMaybe<NotionRawChildrenChildrenChildrenFieldSelector>;
  readonly created_by: InputMaybe<NotionRawChildrenChildrenCreated_byFieldSelector>;
  readonly created_time: InputMaybe<FieldSelectorEnum>;
  readonly has_children: InputMaybe<FieldSelectorEnum>;
  readonly heading_1: InputMaybe<NotionRawChildrenChildrenHeading_1FieldSelector>;
  readonly heading_2: InputMaybe<NotionRawChildrenChildrenHeading_2FieldSelector>;
  readonly heading_3: InputMaybe<NotionRawChildrenChildrenHeading_3FieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly last_edited_by: InputMaybe<NotionRawChildrenChildrenLast_edited_byFieldSelector>;
  readonly last_edited_time: InputMaybe<FieldSelectorEnum>;
  readonly link_preview: InputMaybe<NotionRawChildrenChildrenLink_previewFieldSelector>;
  readonly object: InputMaybe<FieldSelectorEnum>;
  readonly paragraph: InputMaybe<NotionRawChildrenChildrenParagraphFieldSelector>;
  readonly parent: InputMaybe<NotionRawChildrenChildrenParentFieldSelector>;
  readonly quote: InputMaybe<NotionRawChildrenChildrenQuoteFieldSelector>;
  readonly table_of_contents: InputMaybe<NotionRawChildrenChildrenTable_of_contentsFieldSelector>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenChildrenFilterInput = {
  readonly archived: InputMaybe<BooleanQueryOperatorInput>;
  readonly bulleted_list_item: InputMaybe<NotionRawChildrenChildrenBulleted_list_itemFilterInput>;
  readonly child_page: InputMaybe<NotionRawChildrenChildrenChild_pageFilterInput>;
  readonly children: InputMaybe<NotionRawChildrenChildrenChildrenFilterListInput>;
  readonly created_by: InputMaybe<NotionRawChildrenChildrenCreated_byFilterInput>;
  readonly created_time: InputMaybe<DateQueryOperatorInput>;
  readonly has_children: InputMaybe<BooleanQueryOperatorInput>;
  readonly heading_1: InputMaybe<NotionRawChildrenChildrenHeading_1FilterInput>;
  readonly heading_2: InputMaybe<NotionRawChildrenChildrenHeading_2FilterInput>;
  readonly heading_3: InputMaybe<NotionRawChildrenChildrenHeading_3FilterInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly last_edited_by: InputMaybe<NotionRawChildrenChildrenLast_edited_byFilterInput>;
  readonly last_edited_time: InputMaybe<DateQueryOperatorInput>;
  readonly link_preview: InputMaybe<NotionRawChildrenChildrenLink_previewFilterInput>;
  readonly object: InputMaybe<StringQueryOperatorInput>;
  readonly paragraph: InputMaybe<NotionRawChildrenChildrenParagraphFilterInput>;
  readonly parent: InputMaybe<NotionRawChildrenChildrenParentFilterInput>;
  readonly quote: InputMaybe<NotionRawChildrenChildrenQuoteFilterInput>;
  readonly table_of_contents: InputMaybe<NotionRawChildrenChildrenTable_of_contentsFilterInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawChildrenChildrenFilterListInput = {
  readonly elemMatch: InputMaybe<NotionRawChildrenChildrenFilterInput>;
};

type NotionRawChildrenChildrenHeading_1 = {
  readonly color: Maybe<Scalars['String']>;
  readonly is_toggleable: Maybe<Scalars['Boolean']>;
  readonly text: Maybe<ReadonlyArray<Maybe<NotionRawChildrenChildrenHeading_1Text>>>;
};

type NotionRawChildrenChildrenHeading_1FieldSelector = {
  readonly color: InputMaybe<FieldSelectorEnum>;
  readonly is_toggleable: InputMaybe<FieldSelectorEnum>;
  readonly text: InputMaybe<NotionRawChildrenChildrenHeading_1TextFieldSelector>;
};

type NotionRawChildrenChildrenHeading_1FilterInput = {
  readonly color: InputMaybe<StringQueryOperatorInput>;
  readonly is_toggleable: InputMaybe<BooleanQueryOperatorInput>;
  readonly text: InputMaybe<NotionRawChildrenChildrenHeading_1TextFilterListInput>;
};

type NotionRawChildrenChildrenHeading_1SortInput = {
  readonly color: InputMaybe<SortOrderEnum>;
  readonly is_toggleable: InputMaybe<SortOrderEnum>;
  readonly text: InputMaybe<NotionRawChildrenChildrenHeading_1TextSortInput>;
};

type NotionRawChildrenChildrenHeading_1Text = {
  readonly annotations: Maybe<NotionRawChildrenChildrenHeading_1TextAnnotations>;
  readonly plain_text: Maybe<Scalars['String']>;
  readonly text: Maybe<NotionRawChildrenChildrenHeading_1TextText>;
  readonly type: Maybe<Scalars['String']>;
};

type NotionRawChildrenChildrenHeading_1TextAnnotations = {
  readonly bold: Maybe<Scalars['Boolean']>;
  readonly code: Maybe<Scalars['Boolean']>;
  readonly color: Maybe<Scalars['String']>;
  readonly italic: Maybe<Scalars['Boolean']>;
  readonly strikethrough: Maybe<Scalars['Boolean']>;
  readonly underline: Maybe<Scalars['Boolean']>;
};

type NotionRawChildrenChildrenHeading_1TextAnnotationsFieldSelector = {
  readonly bold: InputMaybe<FieldSelectorEnum>;
  readonly code: InputMaybe<FieldSelectorEnum>;
  readonly color: InputMaybe<FieldSelectorEnum>;
  readonly italic: InputMaybe<FieldSelectorEnum>;
  readonly strikethrough: InputMaybe<FieldSelectorEnum>;
  readonly underline: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenChildrenHeading_1TextAnnotationsFilterInput = {
  readonly bold: InputMaybe<BooleanQueryOperatorInput>;
  readonly code: InputMaybe<BooleanQueryOperatorInput>;
  readonly color: InputMaybe<StringQueryOperatorInput>;
  readonly italic: InputMaybe<BooleanQueryOperatorInput>;
  readonly strikethrough: InputMaybe<BooleanQueryOperatorInput>;
  readonly underline: InputMaybe<BooleanQueryOperatorInput>;
};

type NotionRawChildrenChildrenHeading_1TextAnnotationsSortInput = {
  readonly bold: InputMaybe<SortOrderEnum>;
  readonly code: InputMaybe<SortOrderEnum>;
  readonly color: InputMaybe<SortOrderEnum>;
  readonly italic: InputMaybe<SortOrderEnum>;
  readonly strikethrough: InputMaybe<SortOrderEnum>;
  readonly underline: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenChildrenHeading_1TextFieldSelector = {
  readonly annotations: InputMaybe<NotionRawChildrenChildrenHeading_1TextAnnotationsFieldSelector>;
  readonly plain_text: InputMaybe<FieldSelectorEnum>;
  readonly text: InputMaybe<NotionRawChildrenChildrenHeading_1TextTextFieldSelector>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenChildrenHeading_1TextFilterInput = {
  readonly annotations: InputMaybe<NotionRawChildrenChildrenHeading_1TextAnnotationsFilterInput>;
  readonly plain_text: InputMaybe<StringQueryOperatorInput>;
  readonly text: InputMaybe<NotionRawChildrenChildrenHeading_1TextTextFilterInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawChildrenChildrenHeading_1TextFilterListInput = {
  readonly elemMatch: InputMaybe<NotionRawChildrenChildrenHeading_1TextFilterInput>;
};

type NotionRawChildrenChildrenHeading_1TextSortInput = {
  readonly annotations: InputMaybe<NotionRawChildrenChildrenHeading_1TextAnnotationsSortInput>;
  readonly plain_text: InputMaybe<SortOrderEnum>;
  readonly text: InputMaybe<NotionRawChildrenChildrenHeading_1TextTextSortInput>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenChildrenHeading_1TextText = {
  readonly content: Maybe<Scalars['String']>;
};

type NotionRawChildrenChildrenHeading_1TextTextFieldSelector = {
  readonly content: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenChildrenHeading_1TextTextFilterInput = {
  readonly content: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawChildrenChildrenHeading_1TextTextSortInput = {
  readonly content: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenChildrenHeading_2 = {
  readonly color: Maybe<Scalars['String']>;
  readonly is_toggleable: Maybe<Scalars['Boolean']>;
  readonly text: Maybe<ReadonlyArray<Maybe<NotionRawChildrenChildrenHeading_2Text>>>;
};

type NotionRawChildrenChildrenHeading_2FieldSelector = {
  readonly color: InputMaybe<FieldSelectorEnum>;
  readonly is_toggleable: InputMaybe<FieldSelectorEnum>;
  readonly text: InputMaybe<NotionRawChildrenChildrenHeading_2TextFieldSelector>;
};

type NotionRawChildrenChildrenHeading_2FilterInput = {
  readonly color: InputMaybe<StringQueryOperatorInput>;
  readonly is_toggleable: InputMaybe<BooleanQueryOperatorInput>;
  readonly text: InputMaybe<NotionRawChildrenChildrenHeading_2TextFilterListInput>;
};

type NotionRawChildrenChildrenHeading_2SortInput = {
  readonly color: InputMaybe<SortOrderEnum>;
  readonly is_toggleable: InputMaybe<SortOrderEnum>;
  readonly text: InputMaybe<NotionRawChildrenChildrenHeading_2TextSortInput>;
};

type NotionRawChildrenChildrenHeading_2Text = {
  readonly annotations: Maybe<NotionRawChildrenChildrenHeading_2TextAnnotations>;
  readonly plain_text: Maybe<Scalars['String']>;
  readonly text: Maybe<NotionRawChildrenChildrenHeading_2TextText>;
  readonly type: Maybe<Scalars['String']>;
};

type NotionRawChildrenChildrenHeading_2TextAnnotations = {
  readonly bold: Maybe<Scalars['Boolean']>;
  readonly code: Maybe<Scalars['Boolean']>;
  readonly color: Maybe<Scalars['String']>;
  readonly italic: Maybe<Scalars['Boolean']>;
  readonly strikethrough: Maybe<Scalars['Boolean']>;
  readonly underline: Maybe<Scalars['Boolean']>;
};

type NotionRawChildrenChildrenHeading_2TextAnnotationsFieldSelector = {
  readonly bold: InputMaybe<FieldSelectorEnum>;
  readonly code: InputMaybe<FieldSelectorEnum>;
  readonly color: InputMaybe<FieldSelectorEnum>;
  readonly italic: InputMaybe<FieldSelectorEnum>;
  readonly strikethrough: InputMaybe<FieldSelectorEnum>;
  readonly underline: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenChildrenHeading_2TextAnnotationsFilterInput = {
  readonly bold: InputMaybe<BooleanQueryOperatorInput>;
  readonly code: InputMaybe<BooleanQueryOperatorInput>;
  readonly color: InputMaybe<StringQueryOperatorInput>;
  readonly italic: InputMaybe<BooleanQueryOperatorInput>;
  readonly strikethrough: InputMaybe<BooleanQueryOperatorInput>;
  readonly underline: InputMaybe<BooleanQueryOperatorInput>;
};

type NotionRawChildrenChildrenHeading_2TextAnnotationsSortInput = {
  readonly bold: InputMaybe<SortOrderEnum>;
  readonly code: InputMaybe<SortOrderEnum>;
  readonly color: InputMaybe<SortOrderEnum>;
  readonly italic: InputMaybe<SortOrderEnum>;
  readonly strikethrough: InputMaybe<SortOrderEnum>;
  readonly underline: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenChildrenHeading_2TextFieldSelector = {
  readonly annotations: InputMaybe<NotionRawChildrenChildrenHeading_2TextAnnotationsFieldSelector>;
  readonly plain_text: InputMaybe<FieldSelectorEnum>;
  readonly text: InputMaybe<NotionRawChildrenChildrenHeading_2TextTextFieldSelector>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenChildrenHeading_2TextFilterInput = {
  readonly annotations: InputMaybe<NotionRawChildrenChildrenHeading_2TextAnnotationsFilterInput>;
  readonly plain_text: InputMaybe<StringQueryOperatorInput>;
  readonly text: InputMaybe<NotionRawChildrenChildrenHeading_2TextTextFilterInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawChildrenChildrenHeading_2TextFilterListInput = {
  readonly elemMatch: InputMaybe<NotionRawChildrenChildrenHeading_2TextFilterInput>;
};

type NotionRawChildrenChildrenHeading_2TextSortInput = {
  readonly annotations: InputMaybe<NotionRawChildrenChildrenHeading_2TextAnnotationsSortInput>;
  readonly plain_text: InputMaybe<SortOrderEnum>;
  readonly text: InputMaybe<NotionRawChildrenChildrenHeading_2TextTextSortInput>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenChildrenHeading_2TextText = {
  readonly content: Maybe<Scalars['String']>;
};

type NotionRawChildrenChildrenHeading_2TextTextFieldSelector = {
  readonly content: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenChildrenHeading_2TextTextFilterInput = {
  readonly content: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawChildrenChildrenHeading_2TextTextSortInput = {
  readonly content: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenChildrenHeading_3 = {
  readonly color: Maybe<Scalars['String']>;
  readonly is_toggleable: Maybe<Scalars['Boolean']>;
  readonly text: Maybe<ReadonlyArray<Maybe<NotionRawChildrenChildrenHeading_3Text>>>;
};

type NotionRawChildrenChildrenHeading_3FieldSelector = {
  readonly color: InputMaybe<FieldSelectorEnum>;
  readonly is_toggleable: InputMaybe<FieldSelectorEnum>;
  readonly text: InputMaybe<NotionRawChildrenChildrenHeading_3TextFieldSelector>;
};

type NotionRawChildrenChildrenHeading_3FilterInput = {
  readonly color: InputMaybe<StringQueryOperatorInput>;
  readonly is_toggleable: InputMaybe<BooleanQueryOperatorInput>;
  readonly text: InputMaybe<NotionRawChildrenChildrenHeading_3TextFilterListInput>;
};

type NotionRawChildrenChildrenHeading_3SortInput = {
  readonly color: InputMaybe<SortOrderEnum>;
  readonly is_toggleable: InputMaybe<SortOrderEnum>;
  readonly text: InputMaybe<NotionRawChildrenChildrenHeading_3TextSortInput>;
};

type NotionRawChildrenChildrenHeading_3Text = {
  readonly annotations: Maybe<NotionRawChildrenChildrenHeading_3TextAnnotations>;
  readonly plain_text: Maybe<Scalars['String']>;
  readonly text: Maybe<NotionRawChildrenChildrenHeading_3TextText>;
  readonly type: Maybe<Scalars['String']>;
};

type NotionRawChildrenChildrenHeading_3TextAnnotations = {
  readonly bold: Maybe<Scalars['Boolean']>;
  readonly code: Maybe<Scalars['Boolean']>;
  readonly color: Maybe<Scalars['String']>;
  readonly italic: Maybe<Scalars['Boolean']>;
  readonly strikethrough: Maybe<Scalars['Boolean']>;
  readonly underline: Maybe<Scalars['Boolean']>;
};

type NotionRawChildrenChildrenHeading_3TextAnnotationsFieldSelector = {
  readonly bold: InputMaybe<FieldSelectorEnum>;
  readonly code: InputMaybe<FieldSelectorEnum>;
  readonly color: InputMaybe<FieldSelectorEnum>;
  readonly italic: InputMaybe<FieldSelectorEnum>;
  readonly strikethrough: InputMaybe<FieldSelectorEnum>;
  readonly underline: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenChildrenHeading_3TextAnnotationsFilterInput = {
  readonly bold: InputMaybe<BooleanQueryOperatorInput>;
  readonly code: InputMaybe<BooleanQueryOperatorInput>;
  readonly color: InputMaybe<StringQueryOperatorInput>;
  readonly italic: InputMaybe<BooleanQueryOperatorInput>;
  readonly strikethrough: InputMaybe<BooleanQueryOperatorInput>;
  readonly underline: InputMaybe<BooleanQueryOperatorInput>;
};

type NotionRawChildrenChildrenHeading_3TextAnnotationsSortInput = {
  readonly bold: InputMaybe<SortOrderEnum>;
  readonly code: InputMaybe<SortOrderEnum>;
  readonly color: InputMaybe<SortOrderEnum>;
  readonly italic: InputMaybe<SortOrderEnum>;
  readonly strikethrough: InputMaybe<SortOrderEnum>;
  readonly underline: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenChildrenHeading_3TextFieldSelector = {
  readonly annotations: InputMaybe<NotionRawChildrenChildrenHeading_3TextAnnotationsFieldSelector>;
  readonly plain_text: InputMaybe<FieldSelectorEnum>;
  readonly text: InputMaybe<NotionRawChildrenChildrenHeading_3TextTextFieldSelector>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenChildrenHeading_3TextFilterInput = {
  readonly annotations: InputMaybe<NotionRawChildrenChildrenHeading_3TextAnnotationsFilterInput>;
  readonly plain_text: InputMaybe<StringQueryOperatorInput>;
  readonly text: InputMaybe<NotionRawChildrenChildrenHeading_3TextTextFilterInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawChildrenChildrenHeading_3TextFilterListInput = {
  readonly elemMatch: InputMaybe<NotionRawChildrenChildrenHeading_3TextFilterInput>;
};

type NotionRawChildrenChildrenHeading_3TextSortInput = {
  readonly annotations: InputMaybe<NotionRawChildrenChildrenHeading_3TextAnnotationsSortInput>;
  readonly plain_text: InputMaybe<SortOrderEnum>;
  readonly text: InputMaybe<NotionRawChildrenChildrenHeading_3TextTextSortInput>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenChildrenHeading_3TextText = {
  readonly content: Maybe<Scalars['String']>;
};

type NotionRawChildrenChildrenHeading_3TextTextFieldSelector = {
  readonly content: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenChildrenHeading_3TextTextFilterInput = {
  readonly content: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawChildrenChildrenHeading_3TextTextSortInput = {
  readonly content: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenChildrenLast_edited_by = {
  readonly id: Maybe<Scalars['String']>;
  readonly object: Maybe<Scalars['String']>;
};

type NotionRawChildrenChildrenLast_edited_byFieldSelector = {
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly object: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenChildrenLast_edited_byFilterInput = {
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly object: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawChildrenChildrenLast_edited_bySortInput = {
  readonly id: InputMaybe<SortOrderEnum>;
  readonly object: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenChildrenLink_preview = {
  readonly url: Maybe<Scalars['String']>;
};

type NotionRawChildrenChildrenLink_previewFieldSelector = {
  readonly url: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenChildrenLink_previewFilterInput = {
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawChildrenChildrenLink_previewSortInput = {
  readonly url: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenChildrenParagraph = {
  readonly color: Maybe<Scalars['String']>;
  readonly text: Maybe<ReadonlyArray<Maybe<NotionRawChildrenChildrenParagraphText>>>;
};

type NotionRawChildrenChildrenParagraphFieldSelector = {
  readonly color: InputMaybe<FieldSelectorEnum>;
  readonly text: InputMaybe<NotionRawChildrenChildrenParagraphTextFieldSelector>;
};

type NotionRawChildrenChildrenParagraphFilterInput = {
  readonly color: InputMaybe<StringQueryOperatorInput>;
  readonly text: InputMaybe<NotionRawChildrenChildrenParagraphTextFilterListInput>;
};

type NotionRawChildrenChildrenParagraphSortInput = {
  readonly color: InputMaybe<SortOrderEnum>;
  readonly text: InputMaybe<NotionRawChildrenChildrenParagraphTextSortInput>;
};

type NotionRawChildrenChildrenParagraphText = {
  readonly annotations: Maybe<NotionRawChildrenChildrenParagraphTextAnnotations>;
  readonly href: Maybe<Scalars['String']>;
  readonly plain_text: Maybe<Scalars['String']>;
  readonly text: Maybe<NotionRawChildrenChildrenParagraphTextText>;
  readonly type: Maybe<Scalars['String']>;
};

type NotionRawChildrenChildrenParagraphTextAnnotations = {
  readonly bold: Maybe<Scalars['Boolean']>;
  readonly code: Maybe<Scalars['Boolean']>;
  readonly color: Maybe<Scalars['String']>;
  readonly italic: Maybe<Scalars['Boolean']>;
  readonly strikethrough: Maybe<Scalars['Boolean']>;
  readonly underline: Maybe<Scalars['Boolean']>;
};

type NotionRawChildrenChildrenParagraphTextAnnotationsFieldSelector = {
  readonly bold: InputMaybe<FieldSelectorEnum>;
  readonly code: InputMaybe<FieldSelectorEnum>;
  readonly color: InputMaybe<FieldSelectorEnum>;
  readonly italic: InputMaybe<FieldSelectorEnum>;
  readonly strikethrough: InputMaybe<FieldSelectorEnum>;
  readonly underline: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenChildrenParagraphTextAnnotationsFilterInput = {
  readonly bold: InputMaybe<BooleanQueryOperatorInput>;
  readonly code: InputMaybe<BooleanQueryOperatorInput>;
  readonly color: InputMaybe<StringQueryOperatorInput>;
  readonly italic: InputMaybe<BooleanQueryOperatorInput>;
  readonly strikethrough: InputMaybe<BooleanQueryOperatorInput>;
  readonly underline: InputMaybe<BooleanQueryOperatorInput>;
};

type NotionRawChildrenChildrenParagraphTextAnnotationsSortInput = {
  readonly bold: InputMaybe<SortOrderEnum>;
  readonly code: InputMaybe<SortOrderEnum>;
  readonly color: InputMaybe<SortOrderEnum>;
  readonly italic: InputMaybe<SortOrderEnum>;
  readonly strikethrough: InputMaybe<SortOrderEnum>;
  readonly underline: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenChildrenParagraphTextFieldSelector = {
  readonly annotations: InputMaybe<NotionRawChildrenChildrenParagraphTextAnnotationsFieldSelector>;
  readonly href: InputMaybe<FieldSelectorEnum>;
  readonly plain_text: InputMaybe<FieldSelectorEnum>;
  readonly text: InputMaybe<NotionRawChildrenChildrenParagraphTextTextFieldSelector>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenChildrenParagraphTextFilterInput = {
  readonly annotations: InputMaybe<NotionRawChildrenChildrenParagraphTextAnnotationsFilterInput>;
  readonly href: InputMaybe<StringQueryOperatorInput>;
  readonly plain_text: InputMaybe<StringQueryOperatorInput>;
  readonly text: InputMaybe<NotionRawChildrenChildrenParagraphTextTextFilterInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawChildrenChildrenParagraphTextFilterListInput = {
  readonly elemMatch: InputMaybe<NotionRawChildrenChildrenParagraphTextFilterInput>;
};

type NotionRawChildrenChildrenParagraphTextSortInput = {
  readonly annotations: InputMaybe<NotionRawChildrenChildrenParagraphTextAnnotationsSortInput>;
  readonly href: InputMaybe<SortOrderEnum>;
  readonly plain_text: InputMaybe<SortOrderEnum>;
  readonly text: InputMaybe<NotionRawChildrenChildrenParagraphTextTextSortInput>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenChildrenParagraphTextText = {
  readonly content: Maybe<Scalars['String']>;
  readonly link: Maybe<NotionRawChildrenChildrenParagraphTextTextLink>;
};

type NotionRawChildrenChildrenParagraphTextTextFieldSelector = {
  readonly content: InputMaybe<FieldSelectorEnum>;
  readonly link: InputMaybe<NotionRawChildrenChildrenParagraphTextTextLinkFieldSelector>;
};

type NotionRawChildrenChildrenParagraphTextTextFilterInput = {
  readonly content: InputMaybe<StringQueryOperatorInput>;
  readonly link: InputMaybe<NotionRawChildrenChildrenParagraphTextTextLinkFilterInput>;
};

type NotionRawChildrenChildrenParagraphTextTextLink = {
  readonly url: Maybe<Scalars['String']>;
};

type NotionRawChildrenChildrenParagraphTextTextLinkFieldSelector = {
  readonly url: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenChildrenParagraphTextTextLinkFilterInput = {
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawChildrenChildrenParagraphTextTextLinkSortInput = {
  readonly url: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenChildrenParagraphTextTextSortInput = {
  readonly content: InputMaybe<SortOrderEnum>;
  readonly link: InputMaybe<NotionRawChildrenChildrenParagraphTextTextLinkSortInput>;
};

type NotionRawChildrenChildrenParent = {
  readonly block_id: Maybe<Scalars['String']>;
  readonly page_id: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
};

type NotionRawChildrenChildrenParentFieldSelector = {
  readonly block_id: InputMaybe<FieldSelectorEnum>;
  readonly page_id: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenChildrenParentFilterInput = {
  readonly block_id: InputMaybe<StringQueryOperatorInput>;
  readonly page_id: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawChildrenChildrenParentSortInput = {
  readonly block_id: InputMaybe<SortOrderEnum>;
  readonly page_id: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenChildrenQuote = {
  readonly color: Maybe<Scalars['String']>;
  readonly text: Maybe<ReadonlyArray<Maybe<NotionRawChildrenChildrenQuoteText>>>;
};

type NotionRawChildrenChildrenQuoteFieldSelector = {
  readonly color: InputMaybe<FieldSelectorEnum>;
  readonly text: InputMaybe<NotionRawChildrenChildrenQuoteTextFieldSelector>;
};

type NotionRawChildrenChildrenQuoteFilterInput = {
  readonly color: InputMaybe<StringQueryOperatorInput>;
  readonly text: InputMaybe<NotionRawChildrenChildrenQuoteTextFilterListInput>;
};

type NotionRawChildrenChildrenQuoteSortInput = {
  readonly color: InputMaybe<SortOrderEnum>;
  readonly text: InputMaybe<NotionRawChildrenChildrenQuoteTextSortInput>;
};

type NotionRawChildrenChildrenQuoteText = {
  readonly annotations: Maybe<NotionRawChildrenChildrenQuoteTextAnnotations>;
  readonly plain_text: Maybe<Scalars['String']>;
  readonly text: Maybe<NotionRawChildrenChildrenQuoteTextText>;
  readonly type: Maybe<Scalars['String']>;
};

type NotionRawChildrenChildrenQuoteTextAnnotations = {
  readonly bold: Maybe<Scalars['Boolean']>;
  readonly code: Maybe<Scalars['Boolean']>;
  readonly color: Maybe<Scalars['String']>;
  readonly italic: Maybe<Scalars['Boolean']>;
  readonly strikethrough: Maybe<Scalars['Boolean']>;
  readonly underline: Maybe<Scalars['Boolean']>;
};

type NotionRawChildrenChildrenQuoteTextAnnotationsFieldSelector = {
  readonly bold: InputMaybe<FieldSelectorEnum>;
  readonly code: InputMaybe<FieldSelectorEnum>;
  readonly color: InputMaybe<FieldSelectorEnum>;
  readonly italic: InputMaybe<FieldSelectorEnum>;
  readonly strikethrough: InputMaybe<FieldSelectorEnum>;
  readonly underline: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenChildrenQuoteTextAnnotationsFilterInput = {
  readonly bold: InputMaybe<BooleanQueryOperatorInput>;
  readonly code: InputMaybe<BooleanQueryOperatorInput>;
  readonly color: InputMaybe<StringQueryOperatorInput>;
  readonly italic: InputMaybe<BooleanQueryOperatorInput>;
  readonly strikethrough: InputMaybe<BooleanQueryOperatorInput>;
  readonly underline: InputMaybe<BooleanQueryOperatorInput>;
};

type NotionRawChildrenChildrenQuoteTextAnnotationsSortInput = {
  readonly bold: InputMaybe<SortOrderEnum>;
  readonly code: InputMaybe<SortOrderEnum>;
  readonly color: InputMaybe<SortOrderEnum>;
  readonly italic: InputMaybe<SortOrderEnum>;
  readonly strikethrough: InputMaybe<SortOrderEnum>;
  readonly underline: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenChildrenQuoteTextFieldSelector = {
  readonly annotations: InputMaybe<NotionRawChildrenChildrenQuoteTextAnnotationsFieldSelector>;
  readonly plain_text: InputMaybe<FieldSelectorEnum>;
  readonly text: InputMaybe<NotionRawChildrenChildrenQuoteTextTextFieldSelector>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenChildrenQuoteTextFilterInput = {
  readonly annotations: InputMaybe<NotionRawChildrenChildrenQuoteTextAnnotationsFilterInput>;
  readonly plain_text: InputMaybe<StringQueryOperatorInput>;
  readonly text: InputMaybe<NotionRawChildrenChildrenQuoteTextTextFilterInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawChildrenChildrenQuoteTextFilterListInput = {
  readonly elemMatch: InputMaybe<NotionRawChildrenChildrenQuoteTextFilterInput>;
};

type NotionRawChildrenChildrenQuoteTextSortInput = {
  readonly annotations: InputMaybe<NotionRawChildrenChildrenQuoteTextAnnotationsSortInput>;
  readonly plain_text: InputMaybe<SortOrderEnum>;
  readonly text: InputMaybe<NotionRawChildrenChildrenQuoteTextTextSortInput>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenChildrenQuoteTextText = {
  readonly content: Maybe<Scalars['String']>;
};

type NotionRawChildrenChildrenQuoteTextTextFieldSelector = {
  readonly content: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenChildrenQuoteTextTextFilterInput = {
  readonly content: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawChildrenChildrenQuoteTextTextSortInput = {
  readonly content: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenChildrenSortInput = {
  readonly archived: InputMaybe<SortOrderEnum>;
  readonly bulleted_list_item: InputMaybe<NotionRawChildrenChildrenBulleted_list_itemSortInput>;
  readonly child_page: InputMaybe<NotionRawChildrenChildrenChild_pageSortInput>;
  readonly children: InputMaybe<NotionRawChildrenChildrenChildrenSortInput>;
  readonly created_by: InputMaybe<NotionRawChildrenChildrenCreated_bySortInput>;
  readonly created_time: InputMaybe<SortOrderEnum>;
  readonly has_children: InputMaybe<SortOrderEnum>;
  readonly heading_1: InputMaybe<NotionRawChildrenChildrenHeading_1SortInput>;
  readonly heading_2: InputMaybe<NotionRawChildrenChildrenHeading_2SortInput>;
  readonly heading_3: InputMaybe<NotionRawChildrenChildrenHeading_3SortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly last_edited_by: InputMaybe<NotionRawChildrenChildrenLast_edited_bySortInput>;
  readonly last_edited_time: InputMaybe<SortOrderEnum>;
  readonly link_preview: InputMaybe<NotionRawChildrenChildrenLink_previewSortInput>;
  readonly object: InputMaybe<SortOrderEnum>;
  readonly paragraph: InputMaybe<NotionRawChildrenChildrenParagraphSortInput>;
  readonly parent: InputMaybe<NotionRawChildrenChildrenParentSortInput>;
  readonly quote: InputMaybe<NotionRawChildrenChildrenQuoteSortInput>;
  readonly table_of_contents: InputMaybe<NotionRawChildrenChildrenTable_of_contentsSortInput>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenChildrenTable_of_contents = {
  readonly color: Maybe<Scalars['String']>;
};

type NotionRawChildrenChildrenTable_of_contentsFieldSelector = {
  readonly color: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenChildrenTable_of_contentsFilterInput = {
  readonly color: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawChildrenChildrenTable_of_contentsSortInput = {
  readonly color: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenCode = {
  readonly language: Maybe<Scalars['String']>;
  readonly text: Maybe<ReadonlyArray<Maybe<NotionRawChildrenCodeText>>>;
};

type NotionRawChildrenCodeFieldSelector = {
  readonly language: InputMaybe<FieldSelectorEnum>;
  readonly text: InputMaybe<NotionRawChildrenCodeTextFieldSelector>;
};

type NotionRawChildrenCodeFilterInput = {
  readonly language: InputMaybe<StringQueryOperatorInput>;
  readonly text: InputMaybe<NotionRawChildrenCodeTextFilterListInput>;
};

type NotionRawChildrenCodeSortInput = {
  readonly language: InputMaybe<SortOrderEnum>;
  readonly text: InputMaybe<NotionRawChildrenCodeTextSortInput>;
};

type NotionRawChildrenCodeText = {
  readonly annotations: Maybe<NotionRawChildrenCodeTextAnnotations>;
  readonly plain_text: Maybe<Scalars['String']>;
  readonly text: Maybe<NotionRawChildrenCodeTextText>;
  readonly type: Maybe<Scalars['String']>;
};

type NotionRawChildrenCodeTextAnnotations = {
  readonly bold: Maybe<Scalars['Boolean']>;
  readonly code: Maybe<Scalars['Boolean']>;
  readonly color: Maybe<Scalars['String']>;
  readonly italic: Maybe<Scalars['Boolean']>;
  readonly strikethrough: Maybe<Scalars['Boolean']>;
  readonly underline: Maybe<Scalars['Boolean']>;
};

type NotionRawChildrenCodeTextAnnotationsFieldSelector = {
  readonly bold: InputMaybe<FieldSelectorEnum>;
  readonly code: InputMaybe<FieldSelectorEnum>;
  readonly color: InputMaybe<FieldSelectorEnum>;
  readonly italic: InputMaybe<FieldSelectorEnum>;
  readonly strikethrough: InputMaybe<FieldSelectorEnum>;
  readonly underline: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenCodeTextAnnotationsFilterInput = {
  readonly bold: InputMaybe<BooleanQueryOperatorInput>;
  readonly code: InputMaybe<BooleanQueryOperatorInput>;
  readonly color: InputMaybe<StringQueryOperatorInput>;
  readonly italic: InputMaybe<BooleanQueryOperatorInput>;
  readonly strikethrough: InputMaybe<BooleanQueryOperatorInput>;
  readonly underline: InputMaybe<BooleanQueryOperatorInput>;
};

type NotionRawChildrenCodeTextAnnotationsSortInput = {
  readonly bold: InputMaybe<SortOrderEnum>;
  readonly code: InputMaybe<SortOrderEnum>;
  readonly color: InputMaybe<SortOrderEnum>;
  readonly italic: InputMaybe<SortOrderEnum>;
  readonly strikethrough: InputMaybe<SortOrderEnum>;
  readonly underline: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenCodeTextFieldSelector = {
  readonly annotations: InputMaybe<NotionRawChildrenCodeTextAnnotationsFieldSelector>;
  readonly plain_text: InputMaybe<FieldSelectorEnum>;
  readonly text: InputMaybe<NotionRawChildrenCodeTextTextFieldSelector>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenCodeTextFilterInput = {
  readonly annotations: InputMaybe<NotionRawChildrenCodeTextAnnotationsFilterInput>;
  readonly plain_text: InputMaybe<StringQueryOperatorInput>;
  readonly text: InputMaybe<NotionRawChildrenCodeTextTextFilterInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawChildrenCodeTextFilterListInput = {
  readonly elemMatch: InputMaybe<NotionRawChildrenCodeTextFilterInput>;
};

type NotionRawChildrenCodeTextSortInput = {
  readonly annotations: InputMaybe<NotionRawChildrenCodeTextAnnotationsSortInput>;
  readonly plain_text: InputMaybe<SortOrderEnum>;
  readonly text: InputMaybe<NotionRawChildrenCodeTextTextSortInput>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenCodeTextText = {
  readonly content: Maybe<Scalars['String']>;
};

type NotionRawChildrenCodeTextTextFieldSelector = {
  readonly content: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenCodeTextTextFilterInput = {
  readonly content: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawChildrenCodeTextTextSortInput = {
  readonly content: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenCreated_by = {
  readonly id: Maybe<Scalars['String']>;
  readonly object: Maybe<Scalars['String']>;
};

type NotionRawChildrenCreated_byFieldSelector = {
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly object: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenCreated_byFilterInput = {
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly object: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawChildrenCreated_bySortInput = {
  readonly id: InputMaybe<SortOrderEnum>;
  readonly object: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenFieldSelector = {
  readonly archived: InputMaybe<FieldSelectorEnum>;
  readonly bookmark: InputMaybe<NotionRawChildrenBookmarkFieldSelector>;
  readonly bulleted_list_item: InputMaybe<NotionRawChildrenBulleted_list_itemFieldSelector>;
  readonly child_database: InputMaybe<NotionRawChildrenChild_databaseFieldSelector>;
  readonly child_page: InputMaybe<NotionRawChildrenChild_pageFieldSelector>;
  readonly children: InputMaybe<NotionRawChildrenChildrenFieldSelector>;
  readonly code: InputMaybe<NotionRawChildrenCodeFieldSelector>;
  readonly created_by: InputMaybe<NotionRawChildrenCreated_byFieldSelector>;
  readonly created_time: InputMaybe<FieldSelectorEnum>;
  readonly has_children: InputMaybe<FieldSelectorEnum>;
  readonly heading_1: InputMaybe<NotionRawChildrenHeading_1FieldSelector>;
  readonly heading_2: InputMaybe<NotionRawChildrenHeading_2FieldSelector>;
  readonly heading_3: InputMaybe<NotionRawChildrenHeading_3FieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly last_edited_by: InputMaybe<NotionRawChildrenLast_edited_byFieldSelector>;
  readonly last_edited_time: InputMaybe<FieldSelectorEnum>;
  readonly numbered_list_item: InputMaybe<NotionRawChildrenNumbered_list_itemFieldSelector>;
  readonly object: InputMaybe<FieldSelectorEnum>;
  readonly paragraph: InputMaybe<NotionRawChildrenParagraphFieldSelector>;
  readonly parent: InputMaybe<NotionRawChildrenParentFieldSelector>;
  readonly table_of_contents: InputMaybe<NotionRawChildrenTable_of_contentsFieldSelector>;
  readonly to_do: InputMaybe<NotionRawChildrenTo_doFieldSelector>;
  readonly toggle: InputMaybe<NotionRawChildrenToggleFieldSelector>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenFilterInput = {
  readonly archived: InputMaybe<BooleanQueryOperatorInput>;
  readonly bookmark: InputMaybe<NotionRawChildrenBookmarkFilterInput>;
  readonly bulleted_list_item: InputMaybe<NotionRawChildrenBulleted_list_itemFilterInput>;
  readonly child_database: InputMaybe<NotionRawChildrenChild_databaseFilterInput>;
  readonly child_page: InputMaybe<NotionRawChildrenChild_pageFilterInput>;
  readonly children: InputMaybe<NotionRawChildrenChildrenFilterListInput>;
  readonly code: InputMaybe<NotionRawChildrenCodeFilterInput>;
  readonly created_by: InputMaybe<NotionRawChildrenCreated_byFilterInput>;
  readonly created_time: InputMaybe<DateQueryOperatorInput>;
  readonly has_children: InputMaybe<BooleanQueryOperatorInput>;
  readonly heading_1: InputMaybe<NotionRawChildrenHeading_1FilterInput>;
  readonly heading_2: InputMaybe<NotionRawChildrenHeading_2FilterInput>;
  readonly heading_3: InputMaybe<NotionRawChildrenHeading_3FilterInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly last_edited_by: InputMaybe<NotionRawChildrenLast_edited_byFilterInput>;
  readonly last_edited_time: InputMaybe<DateQueryOperatorInput>;
  readonly numbered_list_item: InputMaybe<NotionRawChildrenNumbered_list_itemFilterInput>;
  readonly object: InputMaybe<StringQueryOperatorInput>;
  readonly paragraph: InputMaybe<NotionRawChildrenParagraphFilterInput>;
  readonly parent: InputMaybe<NotionRawChildrenParentFilterInput>;
  readonly table_of_contents: InputMaybe<NotionRawChildrenTable_of_contentsFilterInput>;
  readonly to_do: InputMaybe<NotionRawChildrenTo_doFilterInput>;
  readonly toggle: InputMaybe<NotionRawChildrenToggleFilterInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawChildrenFilterListInput = {
  readonly elemMatch: InputMaybe<NotionRawChildrenFilterInput>;
};

type NotionRawChildrenHeading_1 = {
  readonly color: Maybe<Scalars['String']>;
  readonly is_toggleable: Maybe<Scalars['Boolean']>;
  readonly text: Maybe<ReadonlyArray<Maybe<NotionRawChildrenHeading_1Text>>>;
};

type NotionRawChildrenHeading_1FieldSelector = {
  readonly color: InputMaybe<FieldSelectorEnum>;
  readonly is_toggleable: InputMaybe<FieldSelectorEnum>;
  readonly text: InputMaybe<NotionRawChildrenHeading_1TextFieldSelector>;
};

type NotionRawChildrenHeading_1FilterInput = {
  readonly color: InputMaybe<StringQueryOperatorInput>;
  readonly is_toggleable: InputMaybe<BooleanQueryOperatorInput>;
  readonly text: InputMaybe<NotionRawChildrenHeading_1TextFilterListInput>;
};

type NotionRawChildrenHeading_1SortInput = {
  readonly color: InputMaybe<SortOrderEnum>;
  readonly is_toggleable: InputMaybe<SortOrderEnum>;
  readonly text: InputMaybe<NotionRawChildrenHeading_1TextSortInput>;
};

type NotionRawChildrenHeading_1Text = {
  readonly annotations: Maybe<NotionRawChildrenHeading_1TextAnnotations>;
  readonly plain_text: Maybe<Scalars['String']>;
  readonly text: Maybe<NotionRawChildrenHeading_1TextText>;
  readonly type: Maybe<Scalars['String']>;
};

type NotionRawChildrenHeading_1TextAnnotations = {
  readonly bold: Maybe<Scalars['Boolean']>;
  readonly code: Maybe<Scalars['Boolean']>;
  readonly color: Maybe<Scalars['String']>;
  readonly italic: Maybe<Scalars['Boolean']>;
  readonly strikethrough: Maybe<Scalars['Boolean']>;
  readonly underline: Maybe<Scalars['Boolean']>;
};

type NotionRawChildrenHeading_1TextAnnotationsFieldSelector = {
  readonly bold: InputMaybe<FieldSelectorEnum>;
  readonly code: InputMaybe<FieldSelectorEnum>;
  readonly color: InputMaybe<FieldSelectorEnum>;
  readonly italic: InputMaybe<FieldSelectorEnum>;
  readonly strikethrough: InputMaybe<FieldSelectorEnum>;
  readonly underline: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenHeading_1TextAnnotationsFilterInput = {
  readonly bold: InputMaybe<BooleanQueryOperatorInput>;
  readonly code: InputMaybe<BooleanQueryOperatorInput>;
  readonly color: InputMaybe<StringQueryOperatorInput>;
  readonly italic: InputMaybe<BooleanQueryOperatorInput>;
  readonly strikethrough: InputMaybe<BooleanQueryOperatorInput>;
  readonly underline: InputMaybe<BooleanQueryOperatorInput>;
};

type NotionRawChildrenHeading_1TextAnnotationsSortInput = {
  readonly bold: InputMaybe<SortOrderEnum>;
  readonly code: InputMaybe<SortOrderEnum>;
  readonly color: InputMaybe<SortOrderEnum>;
  readonly italic: InputMaybe<SortOrderEnum>;
  readonly strikethrough: InputMaybe<SortOrderEnum>;
  readonly underline: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenHeading_1TextFieldSelector = {
  readonly annotations: InputMaybe<NotionRawChildrenHeading_1TextAnnotationsFieldSelector>;
  readonly plain_text: InputMaybe<FieldSelectorEnum>;
  readonly text: InputMaybe<NotionRawChildrenHeading_1TextTextFieldSelector>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenHeading_1TextFilterInput = {
  readonly annotations: InputMaybe<NotionRawChildrenHeading_1TextAnnotationsFilterInput>;
  readonly plain_text: InputMaybe<StringQueryOperatorInput>;
  readonly text: InputMaybe<NotionRawChildrenHeading_1TextTextFilterInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawChildrenHeading_1TextFilterListInput = {
  readonly elemMatch: InputMaybe<NotionRawChildrenHeading_1TextFilterInput>;
};

type NotionRawChildrenHeading_1TextSortInput = {
  readonly annotations: InputMaybe<NotionRawChildrenHeading_1TextAnnotationsSortInput>;
  readonly plain_text: InputMaybe<SortOrderEnum>;
  readonly text: InputMaybe<NotionRawChildrenHeading_1TextTextSortInput>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenHeading_1TextText = {
  readonly content: Maybe<Scalars['String']>;
};

type NotionRawChildrenHeading_1TextTextFieldSelector = {
  readonly content: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenHeading_1TextTextFilterInput = {
  readonly content: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawChildrenHeading_1TextTextSortInput = {
  readonly content: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenHeading_2 = {
  readonly color: Maybe<Scalars['String']>;
  readonly is_toggleable: Maybe<Scalars['Boolean']>;
  readonly text: Maybe<ReadonlyArray<Maybe<NotionRawChildrenHeading_2Text>>>;
};

type NotionRawChildrenHeading_2FieldSelector = {
  readonly color: InputMaybe<FieldSelectorEnum>;
  readonly is_toggleable: InputMaybe<FieldSelectorEnum>;
  readonly text: InputMaybe<NotionRawChildrenHeading_2TextFieldSelector>;
};

type NotionRawChildrenHeading_2FilterInput = {
  readonly color: InputMaybe<StringQueryOperatorInput>;
  readonly is_toggleable: InputMaybe<BooleanQueryOperatorInput>;
  readonly text: InputMaybe<NotionRawChildrenHeading_2TextFilterListInput>;
};

type NotionRawChildrenHeading_2SortInput = {
  readonly color: InputMaybe<SortOrderEnum>;
  readonly is_toggleable: InputMaybe<SortOrderEnum>;
  readonly text: InputMaybe<NotionRawChildrenHeading_2TextSortInput>;
};

type NotionRawChildrenHeading_2Text = {
  readonly annotations: Maybe<NotionRawChildrenHeading_2TextAnnotations>;
  readonly plain_text: Maybe<Scalars['String']>;
  readonly text: Maybe<NotionRawChildrenHeading_2TextText>;
  readonly type: Maybe<Scalars['String']>;
};

type NotionRawChildrenHeading_2TextAnnotations = {
  readonly bold: Maybe<Scalars['Boolean']>;
  readonly code: Maybe<Scalars['Boolean']>;
  readonly color: Maybe<Scalars['String']>;
  readonly italic: Maybe<Scalars['Boolean']>;
  readonly strikethrough: Maybe<Scalars['Boolean']>;
  readonly underline: Maybe<Scalars['Boolean']>;
};

type NotionRawChildrenHeading_2TextAnnotationsFieldSelector = {
  readonly bold: InputMaybe<FieldSelectorEnum>;
  readonly code: InputMaybe<FieldSelectorEnum>;
  readonly color: InputMaybe<FieldSelectorEnum>;
  readonly italic: InputMaybe<FieldSelectorEnum>;
  readonly strikethrough: InputMaybe<FieldSelectorEnum>;
  readonly underline: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenHeading_2TextAnnotationsFilterInput = {
  readonly bold: InputMaybe<BooleanQueryOperatorInput>;
  readonly code: InputMaybe<BooleanQueryOperatorInput>;
  readonly color: InputMaybe<StringQueryOperatorInput>;
  readonly italic: InputMaybe<BooleanQueryOperatorInput>;
  readonly strikethrough: InputMaybe<BooleanQueryOperatorInput>;
  readonly underline: InputMaybe<BooleanQueryOperatorInput>;
};

type NotionRawChildrenHeading_2TextAnnotationsSortInput = {
  readonly bold: InputMaybe<SortOrderEnum>;
  readonly code: InputMaybe<SortOrderEnum>;
  readonly color: InputMaybe<SortOrderEnum>;
  readonly italic: InputMaybe<SortOrderEnum>;
  readonly strikethrough: InputMaybe<SortOrderEnum>;
  readonly underline: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenHeading_2TextFieldSelector = {
  readonly annotations: InputMaybe<NotionRawChildrenHeading_2TextAnnotationsFieldSelector>;
  readonly plain_text: InputMaybe<FieldSelectorEnum>;
  readonly text: InputMaybe<NotionRawChildrenHeading_2TextTextFieldSelector>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenHeading_2TextFilterInput = {
  readonly annotations: InputMaybe<NotionRawChildrenHeading_2TextAnnotationsFilterInput>;
  readonly plain_text: InputMaybe<StringQueryOperatorInput>;
  readonly text: InputMaybe<NotionRawChildrenHeading_2TextTextFilterInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawChildrenHeading_2TextFilterListInput = {
  readonly elemMatch: InputMaybe<NotionRawChildrenHeading_2TextFilterInput>;
};

type NotionRawChildrenHeading_2TextSortInput = {
  readonly annotations: InputMaybe<NotionRawChildrenHeading_2TextAnnotationsSortInput>;
  readonly plain_text: InputMaybe<SortOrderEnum>;
  readonly text: InputMaybe<NotionRawChildrenHeading_2TextTextSortInput>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenHeading_2TextText = {
  readonly content: Maybe<Scalars['String']>;
};

type NotionRawChildrenHeading_2TextTextFieldSelector = {
  readonly content: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenHeading_2TextTextFilterInput = {
  readonly content: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawChildrenHeading_2TextTextSortInput = {
  readonly content: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenHeading_3 = {
  readonly color: Maybe<Scalars['String']>;
  readonly is_toggleable: Maybe<Scalars['Boolean']>;
  readonly text: Maybe<ReadonlyArray<Maybe<NotionRawChildrenHeading_3Text>>>;
};

type NotionRawChildrenHeading_3FieldSelector = {
  readonly color: InputMaybe<FieldSelectorEnum>;
  readonly is_toggleable: InputMaybe<FieldSelectorEnum>;
  readonly text: InputMaybe<NotionRawChildrenHeading_3TextFieldSelector>;
};

type NotionRawChildrenHeading_3FilterInput = {
  readonly color: InputMaybe<StringQueryOperatorInput>;
  readonly is_toggleable: InputMaybe<BooleanQueryOperatorInput>;
  readonly text: InputMaybe<NotionRawChildrenHeading_3TextFilterListInput>;
};

type NotionRawChildrenHeading_3SortInput = {
  readonly color: InputMaybe<SortOrderEnum>;
  readonly is_toggleable: InputMaybe<SortOrderEnum>;
  readonly text: InputMaybe<NotionRawChildrenHeading_3TextSortInput>;
};

type NotionRawChildrenHeading_3Text = {
  readonly annotations: Maybe<NotionRawChildrenHeading_3TextAnnotations>;
  readonly plain_text: Maybe<Scalars['String']>;
  readonly text: Maybe<NotionRawChildrenHeading_3TextText>;
  readonly type: Maybe<Scalars['String']>;
};

type NotionRawChildrenHeading_3TextAnnotations = {
  readonly bold: Maybe<Scalars['Boolean']>;
  readonly code: Maybe<Scalars['Boolean']>;
  readonly color: Maybe<Scalars['String']>;
  readonly italic: Maybe<Scalars['Boolean']>;
  readonly strikethrough: Maybe<Scalars['Boolean']>;
  readonly underline: Maybe<Scalars['Boolean']>;
};

type NotionRawChildrenHeading_3TextAnnotationsFieldSelector = {
  readonly bold: InputMaybe<FieldSelectorEnum>;
  readonly code: InputMaybe<FieldSelectorEnum>;
  readonly color: InputMaybe<FieldSelectorEnum>;
  readonly italic: InputMaybe<FieldSelectorEnum>;
  readonly strikethrough: InputMaybe<FieldSelectorEnum>;
  readonly underline: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenHeading_3TextAnnotationsFilterInput = {
  readonly bold: InputMaybe<BooleanQueryOperatorInput>;
  readonly code: InputMaybe<BooleanQueryOperatorInput>;
  readonly color: InputMaybe<StringQueryOperatorInput>;
  readonly italic: InputMaybe<BooleanQueryOperatorInput>;
  readonly strikethrough: InputMaybe<BooleanQueryOperatorInput>;
  readonly underline: InputMaybe<BooleanQueryOperatorInput>;
};

type NotionRawChildrenHeading_3TextAnnotationsSortInput = {
  readonly bold: InputMaybe<SortOrderEnum>;
  readonly code: InputMaybe<SortOrderEnum>;
  readonly color: InputMaybe<SortOrderEnum>;
  readonly italic: InputMaybe<SortOrderEnum>;
  readonly strikethrough: InputMaybe<SortOrderEnum>;
  readonly underline: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenHeading_3TextFieldSelector = {
  readonly annotations: InputMaybe<NotionRawChildrenHeading_3TextAnnotationsFieldSelector>;
  readonly plain_text: InputMaybe<FieldSelectorEnum>;
  readonly text: InputMaybe<NotionRawChildrenHeading_3TextTextFieldSelector>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenHeading_3TextFilterInput = {
  readonly annotations: InputMaybe<NotionRawChildrenHeading_3TextAnnotationsFilterInput>;
  readonly plain_text: InputMaybe<StringQueryOperatorInput>;
  readonly text: InputMaybe<NotionRawChildrenHeading_3TextTextFilterInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawChildrenHeading_3TextFilterListInput = {
  readonly elemMatch: InputMaybe<NotionRawChildrenHeading_3TextFilterInput>;
};

type NotionRawChildrenHeading_3TextSortInput = {
  readonly annotations: InputMaybe<NotionRawChildrenHeading_3TextAnnotationsSortInput>;
  readonly plain_text: InputMaybe<SortOrderEnum>;
  readonly text: InputMaybe<NotionRawChildrenHeading_3TextTextSortInput>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenHeading_3TextText = {
  readonly content: Maybe<Scalars['String']>;
};

type NotionRawChildrenHeading_3TextTextFieldSelector = {
  readonly content: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenHeading_3TextTextFilterInput = {
  readonly content: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawChildrenHeading_3TextTextSortInput = {
  readonly content: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenLast_edited_by = {
  readonly id: Maybe<Scalars['String']>;
  readonly object: Maybe<Scalars['String']>;
};

type NotionRawChildrenLast_edited_byFieldSelector = {
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly object: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenLast_edited_byFilterInput = {
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly object: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawChildrenLast_edited_bySortInput = {
  readonly id: InputMaybe<SortOrderEnum>;
  readonly object: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenNumbered_list_item = {
  readonly color: Maybe<Scalars['String']>;
  readonly text: Maybe<ReadonlyArray<Maybe<NotionRawChildrenNumbered_list_itemText>>>;
};

type NotionRawChildrenNumbered_list_itemFieldSelector = {
  readonly color: InputMaybe<FieldSelectorEnum>;
  readonly text: InputMaybe<NotionRawChildrenNumbered_list_itemTextFieldSelector>;
};

type NotionRawChildrenNumbered_list_itemFilterInput = {
  readonly color: InputMaybe<StringQueryOperatorInput>;
  readonly text: InputMaybe<NotionRawChildrenNumbered_list_itemTextFilterListInput>;
};

type NotionRawChildrenNumbered_list_itemSortInput = {
  readonly color: InputMaybe<SortOrderEnum>;
  readonly text: InputMaybe<NotionRawChildrenNumbered_list_itemTextSortInput>;
};

type NotionRawChildrenNumbered_list_itemText = {
  readonly annotations: Maybe<NotionRawChildrenNumbered_list_itemTextAnnotations>;
  readonly plain_text: Maybe<Scalars['String']>;
  readonly text: Maybe<NotionRawChildrenNumbered_list_itemTextText>;
  readonly type: Maybe<Scalars['String']>;
};

type NotionRawChildrenNumbered_list_itemTextAnnotations = {
  readonly bold: Maybe<Scalars['Boolean']>;
  readonly code: Maybe<Scalars['Boolean']>;
  readonly color: Maybe<Scalars['String']>;
  readonly italic: Maybe<Scalars['Boolean']>;
  readonly strikethrough: Maybe<Scalars['Boolean']>;
  readonly underline: Maybe<Scalars['Boolean']>;
};

type NotionRawChildrenNumbered_list_itemTextAnnotationsFieldSelector = {
  readonly bold: InputMaybe<FieldSelectorEnum>;
  readonly code: InputMaybe<FieldSelectorEnum>;
  readonly color: InputMaybe<FieldSelectorEnum>;
  readonly italic: InputMaybe<FieldSelectorEnum>;
  readonly strikethrough: InputMaybe<FieldSelectorEnum>;
  readonly underline: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenNumbered_list_itemTextAnnotationsFilterInput = {
  readonly bold: InputMaybe<BooleanQueryOperatorInput>;
  readonly code: InputMaybe<BooleanQueryOperatorInput>;
  readonly color: InputMaybe<StringQueryOperatorInput>;
  readonly italic: InputMaybe<BooleanQueryOperatorInput>;
  readonly strikethrough: InputMaybe<BooleanQueryOperatorInput>;
  readonly underline: InputMaybe<BooleanQueryOperatorInput>;
};

type NotionRawChildrenNumbered_list_itemTextAnnotationsSortInput = {
  readonly bold: InputMaybe<SortOrderEnum>;
  readonly code: InputMaybe<SortOrderEnum>;
  readonly color: InputMaybe<SortOrderEnum>;
  readonly italic: InputMaybe<SortOrderEnum>;
  readonly strikethrough: InputMaybe<SortOrderEnum>;
  readonly underline: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenNumbered_list_itemTextFieldSelector = {
  readonly annotations: InputMaybe<NotionRawChildrenNumbered_list_itemTextAnnotationsFieldSelector>;
  readonly plain_text: InputMaybe<FieldSelectorEnum>;
  readonly text: InputMaybe<NotionRawChildrenNumbered_list_itemTextTextFieldSelector>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenNumbered_list_itemTextFilterInput = {
  readonly annotations: InputMaybe<NotionRawChildrenNumbered_list_itemTextAnnotationsFilterInput>;
  readonly plain_text: InputMaybe<StringQueryOperatorInput>;
  readonly text: InputMaybe<NotionRawChildrenNumbered_list_itemTextTextFilterInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawChildrenNumbered_list_itemTextFilterListInput = {
  readonly elemMatch: InputMaybe<NotionRawChildrenNumbered_list_itemTextFilterInput>;
};

type NotionRawChildrenNumbered_list_itemTextSortInput = {
  readonly annotations: InputMaybe<NotionRawChildrenNumbered_list_itemTextAnnotationsSortInput>;
  readonly plain_text: InputMaybe<SortOrderEnum>;
  readonly text: InputMaybe<NotionRawChildrenNumbered_list_itemTextTextSortInput>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenNumbered_list_itemTextText = {
  readonly content: Maybe<Scalars['String']>;
};

type NotionRawChildrenNumbered_list_itemTextTextFieldSelector = {
  readonly content: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenNumbered_list_itemTextTextFilterInput = {
  readonly content: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawChildrenNumbered_list_itemTextTextSortInput = {
  readonly content: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenParagraph = {
  readonly color: Maybe<Scalars['String']>;
  readonly text: Maybe<ReadonlyArray<Maybe<NotionRawChildrenParagraphText>>>;
};

type NotionRawChildrenParagraphFieldSelector = {
  readonly color: InputMaybe<FieldSelectorEnum>;
  readonly text: InputMaybe<NotionRawChildrenParagraphTextFieldSelector>;
};

type NotionRawChildrenParagraphFilterInput = {
  readonly color: InputMaybe<StringQueryOperatorInput>;
  readonly text: InputMaybe<NotionRawChildrenParagraphTextFilterListInput>;
};

type NotionRawChildrenParagraphSortInput = {
  readonly color: InputMaybe<SortOrderEnum>;
  readonly text: InputMaybe<NotionRawChildrenParagraphTextSortInput>;
};

type NotionRawChildrenParagraphText = {
  readonly annotations: Maybe<NotionRawChildrenParagraphTextAnnotations>;
  readonly mention: Maybe<NotionRawChildrenParagraphTextMention>;
  readonly plain_text: Maybe<Scalars['String']>;
  readonly text: Maybe<NotionRawChildrenParagraphTextText>;
  readonly type: Maybe<Scalars['String']>;
};

type NotionRawChildrenParagraphTextAnnotations = {
  readonly bold: Maybe<Scalars['Boolean']>;
  readonly code: Maybe<Scalars['Boolean']>;
  readonly color: Maybe<Scalars['String']>;
  readonly italic: Maybe<Scalars['Boolean']>;
  readonly strikethrough: Maybe<Scalars['Boolean']>;
  readonly underline: Maybe<Scalars['Boolean']>;
};

type NotionRawChildrenParagraphTextAnnotationsFieldSelector = {
  readonly bold: InputMaybe<FieldSelectorEnum>;
  readonly code: InputMaybe<FieldSelectorEnum>;
  readonly color: InputMaybe<FieldSelectorEnum>;
  readonly italic: InputMaybe<FieldSelectorEnum>;
  readonly strikethrough: InputMaybe<FieldSelectorEnum>;
  readonly underline: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenParagraphTextAnnotationsFilterInput = {
  readonly bold: InputMaybe<BooleanQueryOperatorInput>;
  readonly code: InputMaybe<BooleanQueryOperatorInput>;
  readonly color: InputMaybe<StringQueryOperatorInput>;
  readonly italic: InputMaybe<BooleanQueryOperatorInput>;
  readonly strikethrough: InputMaybe<BooleanQueryOperatorInput>;
  readonly underline: InputMaybe<BooleanQueryOperatorInput>;
};

type NotionRawChildrenParagraphTextAnnotationsSortInput = {
  readonly bold: InputMaybe<SortOrderEnum>;
  readonly code: InputMaybe<SortOrderEnum>;
  readonly color: InputMaybe<SortOrderEnum>;
  readonly italic: InputMaybe<SortOrderEnum>;
  readonly strikethrough: InputMaybe<SortOrderEnum>;
  readonly underline: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenParagraphTextFieldSelector = {
  readonly annotations: InputMaybe<NotionRawChildrenParagraphTextAnnotationsFieldSelector>;
  readonly mention: InputMaybe<NotionRawChildrenParagraphTextMentionFieldSelector>;
  readonly plain_text: InputMaybe<FieldSelectorEnum>;
  readonly text: InputMaybe<NotionRawChildrenParagraphTextTextFieldSelector>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenParagraphTextFilterInput = {
  readonly annotations: InputMaybe<NotionRawChildrenParagraphTextAnnotationsFilterInput>;
  readonly mention: InputMaybe<NotionRawChildrenParagraphTextMentionFilterInput>;
  readonly plain_text: InputMaybe<StringQueryOperatorInput>;
  readonly text: InputMaybe<NotionRawChildrenParagraphTextTextFilterInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawChildrenParagraphTextFilterListInput = {
  readonly elemMatch: InputMaybe<NotionRawChildrenParagraphTextFilterInput>;
};

type NotionRawChildrenParagraphTextMention = {
  readonly date: Maybe<NotionRawChildrenParagraphTextMentionDate>;
  readonly type: Maybe<Scalars['String']>;
};

type NotionRawChildrenParagraphTextMentionDate = {
  readonly start: Maybe<Scalars['Date']>;
};


type NotionRawChildrenParagraphTextMentionDate_startArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type NotionRawChildrenParagraphTextMentionDateFieldSelector = {
  readonly start: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenParagraphTextMentionDateFilterInput = {
  readonly start: InputMaybe<DateQueryOperatorInput>;
};

type NotionRawChildrenParagraphTextMentionDateSortInput = {
  readonly start: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenParagraphTextMentionFieldSelector = {
  readonly date: InputMaybe<NotionRawChildrenParagraphTextMentionDateFieldSelector>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenParagraphTextMentionFilterInput = {
  readonly date: InputMaybe<NotionRawChildrenParagraphTextMentionDateFilterInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawChildrenParagraphTextMentionSortInput = {
  readonly date: InputMaybe<NotionRawChildrenParagraphTextMentionDateSortInput>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenParagraphTextSortInput = {
  readonly annotations: InputMaybe<NotionRawChildrenParagraphTextAnnotationsSortInput>;
  readonly mention: InputMaybe<NotionRawChildrenParagraphTextMentionSortInput>;
  readonly plain_text: InputMaybe<SortOrderEnum>;
  readonly text: InputMaybe<NotionRawChildrenParagraphTextTextSortInput>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenParagraphTextText = {
  readonly content: Maybe<Scalars['String']>;
};

type NotionRawChildrenParagraphTextTextFieldSelector = {
  readonly content: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenParagraphTextTextFilterInput = {
  readonly content: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawChildrenParagraphTextTextSortInput = {
  readonly content: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenParent = {
  readonly page_id: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
};

type NotionRawChildrenParentFieldSelector = {
  readonly page_id: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenParentFilterInput = {
  readonly page_id: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawChildrenParentSortInput = {
  readonly page_id: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenSortInput = {
  readonly archived: InputMaybe<SortOrderEnum>;
  readonly bookmark: InputMaybe<NotionRawChildrenBookmarkSortInput>;
  readonly bulleted_list_item: InputMaybe<NotionRawChildrenBulleted_list_itemSortInput>;
  readonly child_database: InputMaybe<NotionRawChildrenChild_databaseSortInput>;
  readonly child_page: InputMaybe<NotionRawChildrenChild_pageSortInput>;
  readonly children: InputMaybe<NotionRawChildrenChildrenSortInput>;
  readonly code: InputMaybe<NotionRawChildrenCodeSortInput>;
  readonly created_by: InputMaybe<NotionRawChildrenCreated_bySortInput>;
  readonly created_time: InputMaybe<SortOrderEnum>;
  readonly has_children: InputMaybe<SortOrderEnum>;
  readonly heading_1: InputMaybe<NotionRawChildrenHeading_1SortInput>;
  readonly heading_2: InputMaybe<NotionRawChildrenHeading_2SortInput>;
  readonly heading_3: InputMaybe<NotionRawChildrenHeading_3SortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly last_edited_by: InputMaybe<NotionRawChildrenLast_edited_bySortInput>;
  readonly last_edited_time: InputMaybe<SortOrderEnum>;
  readonly numbered_list_item: InputMaybe<NotionRawChildrenNumbered_list_itemSortInput>;
  readonly object: InputMaybe<SortOrderEnum>;
  readonly paragraph: InputMaybe<NotionRawChildrenParagraphSortInput>;
  readonly parent: InputMaybe<NotionRawChildrenParentSortInput>;
  readonly table_of_contents: InputMaybe<NotionRawChildrenTable_of_contentsSortInput>;
  readonly to_do: InputMaybe<NotionRawChildrenTo_doSortInput>;
  readonly toggle: InputMaybe<NotionRawChildrenToggleSortInput>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenTable_of_contents = {
  readonly color: Maybe<Scalars['String']>;
};

type NotionRawChildrenTable_of_contentsFieldSelector = {
  readonly color: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenTable_of_contentsFilterInput = {
  readonly color: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawChildrenTable_of_contentsSortInput = {
  readonly color: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenTo_do = {
  readonly checked: Maybe<Scalars['Boolean']>;
  readonly color: Maybe<Scalars['String']>;
  readonly text: Maybe<ReadonlyArray<Maybe<NotionRawChildrenTo_doText>>>;
};

type NotionRawChildrenTo_doFieldSelector = {
  readonly checked: InputMaybe<FieldSelectorEnum>;
  readonly color: InputMaybe<FieldSelectorEnum>;
  readonly text: InputMaybe<NotionRawChildrenTo_doTextFieldSelector>;
};

type NotionRawChildrenTo_doFilterInput = {
  readonly checked: InputMaybe<BooleanQueryOperatorInput>;
  readonly color: InputMaybe<StringQueryOperatorInput>;
  readonly text: InputMaybe<NotionRawChildrenTo_doTextFilterListInput>;
};

type NotionRawChildrenTo_doSortInput = {
  readonly checked: InputMaybe<SortOrderEnum>;
  readonly color: InputMaybe<SortOrderEnum>;
  readonly text: InputMaybe<NotionRawChildrenTo_doTextSortInput>;
};

type NotionRawChildrenTo_doText = {
  readonly annotations: Maybe<NotionRawChildrenTo_doTextAnnotations>;
  readonly href: Maybe<Scalars['String']>;
  readonly plain_text: Maybe<Scalars['String']>;
  readonly text: Maybe<NotionRawChildrenTo_doTextText>;
  readonly type: Maybe<Scalars['String']>;
};

type NotionRawChildrenTo_doTextAnnotations = {
  readonly bold: Maybe<Scalars['Boolean']>;
  readonly code: Maybe<Scalars['Boolean']>;
  readonly color: Maybe<Scalars['String']>;
  readonly italic: Maybe<Scalars['Boolean']>;
  readonly strikethrough: Maybe<Scalars['Boolean']>;
  readonly underline: Maybe<Scalars['Boolean']>;
};

type NotionRawChildrenTo_doTextAnnotationsFieldSelector = {
  readonly bold: InputMaybe<FieldSelectorEnum>;
  readonly code: InputMaybe<FieldSelectorEnum>;
  readonly color: InputMaybe<FieldSelectorEnum>;
  readonly italic: InputMaybe<FieldSelectorEnum>;
  readonly strikethrough: InputMaybe<FieldSelectorEnum>;
  readonly underline: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenTo_doTextAnnotationsFilterInput = {
  readonly bold: InputMaybe<BooleanQueryOperatorInput>;
  readonly code: InputMaybe<BooleanQueryOperatorInput>;
  readonly color: InputMaybe<StringQueryOperatorInput>;
  readonly italic: InputMaybe<BooleanQueryOperatorInput>;
  readonly strikethrough: InputMaybe<BooleanQueryOperatorInput>;
  readonly underline: InputMaybe<BooleanQueryOperatorInput>;
};

type NotionRawChildrenTo_doTextAnnotationsSortInput = {
  readonly bold: InputMaybe<SortOrderEnum>;
  readonly code: InputMaybe<SortOrderEnum>;
  readonly color: InputMaybe<SortOrderEnum>;
  readonly italic: InputMaybe<SortOrderEnum>;
  readonly strikethrough: InputMaybe<SortOrderEnum>;
  readonly underline: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenTo_doTextFieldSelector = {
  readonly annotations: InputMaybe<NotionRawChildrenTo_doTextAnnotationsFieldSelector>;
  readonly href: InputMaybe<FieldSelectorEnum>;
  readonly plain_text: InputMaybe<FieldSelectorEnum>;
  readonly text: InputMaybe<NotionRawChildrenTo_doTextTextFieldSelector>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenTo_doTextFilterInput = {
  readonly annotations: InputMaybe<NotionRawChildrenTo_doTextAnnotationsFilterInput>;
  readonly href: InputMaybe<StringQueryOperatorInput>;
  readonly plain_text: InputMaybe<StringQueryOperatorInput>;
  readonly text: InputMaybe<NotionRawChildrenTo_doTextTextFilterInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawChildrenTo_doTextFilterListInput = {
  readonly elemMatch: InputMaybe<NotionRawChildrenTo_doTextFilterInput>;
};

type NotionRawChildrenTo_doTextSortInput = {
  readonly annotations: InputMaybe<NotionRawChildrenTo_doTextAnnotationsSortInput>;
  readonly href: InputMaybe<SortOrderEnum>;
  readonly plain_text: InputMaybe<SortOrderEnum>;
  readonly text: InputMaybe<NotionRawChildrenTo_doTextTextSortInput>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenTo_doTextText = {
  readonly content: Maybe<Scalars['String']>;
  readonly link: Maybe<NotionRawChildrenTo_doTextTextLink>;
};

type NotionRawChildrenTo_doTextTextFieldSelector = {
  readonly content: InputMaybe<FieldSelectorEnum>;
  readonly link: InputMaybe<NotionRawChildrenTo_doTextTextLinkFieldSelector>;
};

type NotionRawChildrenTo_doTextTextFilterInput = {
  readonly content: InputMaybe<StringQueryOperatorInput>;
  readonly link: InputMaybe<NotionRawChildrenTo_doTextTextLinkFilterInput>;
};

type NotionRawChildrenTo_doTextTextLink = {
  readonly url: Maybe<Scalars['String']>;
};

type NotionRawChildrenTo_doTextTextLinkFieldSelector = {
  readonly url: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenTo_doTextTextLinkFilterInput = {
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawChildrenTo_doTextTextLinkSortInput = {
  readonly url: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenTo_doTextTextSortInput = {
  readonly content: InputMaybe<SortOrderEnum>;
  readonly link: InputMaybe<NotionRawChildrenTo_doTextTextLinkSortInput>;
};

type NotionRawChildrenToggle = {
  readonly color: Maybe<Scalars['String']>;
  readonly text: Maybe<ReadonlyArray<Maybe<NotionRawChildrenToggleText>>>;
};

type NotionRawChildrenToggleFieldSelector = {
  readonly color: InputMaybe<FieldSelectorEnum>;
  readonly text: InputMaybe<NotionRawChildrenToggleTextFieldSelector>;
};

type NotionRawChildrenToggleFilterInput = {
  readonly color: InputMaybe<StringQueryOperatorInput>;
  readonly text: InputMaybe<NotionRawChildrenToggleTextFilterListInput>;
};

type NotionRawChildrenToggleSortInput = {
  readonly color: InputMaybe<SortOrderEnum>;
  readonly text: InputMaybe<NotionRawChildrenToggleTextSortInput>;
};

type NotionRawChildrenToggleText = {
  readonly annotations: Maybe<NotionRawChildrenToggleTextAnnotations>;
  readonly plain_text: Maybe<Scalars['String']>;
  readonly text: Maybe<NotionRawChildrenToggleTextText>;
  readonly type: Maybe<Scalars['String']>;
};

type NotionRawChildrenToggleTextAnnotations = {
  readonly bold: Maybe<Scalars['Boolean']>;
  readonly code: Maybe<Scalars['Boolean']>;
  readonly color: Maybe<Scalars['String']>;
  readonly italic: Maybe<Scalars['Boolean']>;
  readonly strikethrough: Maybe<Scalars['Boolean']>;
  readonly underline: Maybe<Scalars['Boolean']>;
};

type NotionRawChildrenToggleTextAnnotationsFieldSelector = {
  readonly bold: InputMaybe<FieldSelectorEnum>;
  readonly code: InputMaybe<FieldSelectorEnum>;
  readonly color: InputMaybe<FieldSelectorEnum>;
  readonly italic: InputMaybe<FieldSelectorEnum>;
  readonly strikethrough: InputMaybe<FieldSelectorEnum>;
  readonly underline: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenToggleTextAnnotationsFilterInput = {
  readonly bold: InputMaybe<BooleanQueryOperatorInput>;
  readonly code: InputMaybe<BooleanQueryOperatorInput>;
  readonly color: InputMaybe<StringQueryOperatorInput>;
  readonly italic: InputMaybe<BooleanQueryOperatorInput>;
  readonly strikethrough: InputMaybe<BooleanQueryOperatorInput>;
  readonly underline: InputMaybe<BooleanQueryOperatorInput>;
};

type NotionRawChildrenToggleTextAnnotationsSortInput = {
  readonly bold: InputMaybe<SortOrderEnum>;
  readonly code: InputMaybe<SortOrderEnum>;
  readonly color: InputMaybe<SortOrderEnum>;
  readonly italic: InputMaybe<SortOrderEnum>;
  readonly strikethrough: InputMaybe<SortOrderEnum>;
  readonly underline: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenToggleTextFieldSelector = {
  readonly annotations: InputMaybe<NotionRawChildrenToggleTextAnnotationsFieldSelector>;
  readonly plain_text: InputMaybe<FieldSelectorEnum>;
  readonly text: InputMaybe<NotionRawChildrenToggleTextTextFieldSelector>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenToggleTextFilterInput = {
  readonly annotations: InputMaybe<NotionRawChildrenToggleTextAnnotationsFilterInput>;
  readonly plain_text: InputMaybe<StringQueryOperatorInput>;
  readonly text: InputMaybe<NotionRawChildrenToggleTextTextFilterInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawChildrenToggleTextFilterListInput = {
  readonly elemMatch: InputMaybe<NotionRawChildrenToggleTextFilterInput>;
};

type NotionRawChildrenToggleTextSortInput = {
  readonly annotations: InputMaybe<NotionRawChildrenToggleTextAnnotationsSortInput>;
  readonly plain_text: InputMaybe<SortOrderEnum>;
  readonly text: InputMaybe<NotionRawChildrenToggleTextTextSortInput>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type NotionRawChildrenToggleTextText = {
  readonly content: Maybe<Scalars['String']>;
};

type NotionRawChildrenToggleTextTextFieldSelector = {
  readonly content: InputMaybe<FieldSelectorEnum>;
};

type NotionRawChildrenToggleTextTextFilterInput = {
  readonly content: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawChildrenToggleTextTextSortInput = {
  readonly content: InputMaybe<SortOrderEnum>;
};

type NotionRawCreated_by = {
  readonly id: Maybe<Scalars['String']>;
  readonly object: Maybe<Scalars['String']>;
};

type NotionRawCreated_byFieldSelector = {
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly object: InputMaybe<FieldSelectorEnum>;
};

type NotionRawCreated_byFilterInput = {
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly object: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawCreated_bySortInput = {
  readonly id: InputMaybe<SortOrderEnum>;
  readonly object: InputMaybe<SortOrderEnum>;
};

type NotionRawFieldSelector = {
  readonly archived: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NotionRawChildrenFieldSelector>;
  readonly created_by: InputMaybe<NotionRawCreated_byFieldSelector>;
  readonly created_time: InputMaybe<FieldSelectorEnum>;
  readonly icon: InputMaybe<NotionRawIconFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly last_edited_by: InputMaybe<NotionRawLast_edited_byFieldSelector>;
  readonly last_edited_time: InputMaybe<FieldSelectorEnum>;
  readonly object: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NotionRawParentFieldSelector>;
  readonly properties: InputMaybe<NotionRawPropertiesFieldSelector>;
  readonly public_url: InputMaybe<FieldSelectorEnum>;
  readonly url: InputMaybe<FieldSelectorEnum>;
};

type NotionRawFilterInput = {
  readonly archived: InputMaybe<BooleanQueryOperatorInput>;
  readonly children: InputMaybe<NotionRawChildrenFilterListInput>;
  readonly created_by: InputMaybe<NotionRawCreated_byFilterInput>;
  readonly created_time: InputMaybe<DateQueryOperatorInput>;
  readonly icon: InputMaybe<NotionRawIconFilterInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly last_edited_by: InputMaybe<NotionRawLast_edited_byFilterInput>;
  readonly last_edited_time: InputMaybe<DateQueryOperatorInput>;
  readonly object: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NotionRawParentFilterInput>;
  readonly properties: InputMaybe<NotionRawPropertiesFilterInput>;
  readonly public_url: InputMaybe<StringQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawIcon = {
  readonly emoji: Maybe<Scalars['String']>;
  readonly file: Maybe<NotionRawIconFile>;
  readonly type: Maybe<Scalars['String']>;
};

type NotionRawIconFieldSelector = {
  readonly emoji: InputMaybe<FieldSelectorEnum>;
  readonly file: InputMaybe<NotionRawIconFileFieldSelector>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type NotionRawIconFile = {
  readonly expiry_time: Maybe<Scalars['Date']>;
  readonly url: Maybe<Scalars['String']>;
};


type NotionRawIconFile_expiry_timeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type NotionRawIconFileFieldSelector = {
  readonly expiry_time: InputMaybe<FieldSelectorEnum>;
  readonly url: InputMaybe<FieldSelectorEnum>;
};

type NotionRawIconFileFilterInput = {
  readonly expiry_time: InputMaybe<DateQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawIconFileSortInput = {
  readonly expiry_time: InputMaybe<SortOrderEnum>;
  readonly url: InputMaybe<SortOrderEnum>;
};

type NotionRawIconFilterInput = {
  readonly emoji: InputMaybe<StringQueryOperatorInput>;
  readonly file: InputMaybe<NotionRawIconFileFilterInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawIconSortInput = {
  readonly emoji: InputMaybe<SortOrderEnum>;
  readonly file: InputMaybe<NotionRawIconFileSortInput>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type NotionRawLast_edited_by = {
  readonly id: Maybe<Scalars['String']>;
  readonly object: Maybe<Scalars['String']>;
};

type NotionRawLast_edited_byFieldSelector = {
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly object: InputMaybe<FieldSelectorEnum>;
};

type NotionRawLast_edited_byFilterInput = {
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly object: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawLast_edited_bySortInput = {
  readonly id: InputMaybe<SortOrderEnum>;
  readonly object: InputMaybe<SortOrderEnum>;
};

type NotionRawParent = {
  readonly database_id: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
};

type NotionRawParentFieldSelector = {
  readonly database_id: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type NotionRawParentFilterInput = {
  readonly database_id: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawParentSortInput = {
  readonly database_id: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type NotionRawProperties = {
  readonly actionLink: Maybe<NotionRawPropertiesActionLink>;
  readonly description: Maybe<NotionRawPropertiesDescription>;
  readonly displayOnSite: Maybe<NotionRawPropertiesDisplayOnSite>;
  readonly githubLink: Maybe<NotionRawPropertiesGithubLink>;
  readonly lastEdited: Maybe<NotionRawPropertiesLastEdited>;
  readonly name: Maybe<NotionRawPropertiesName>;
  readonly readableId: Maybe<NotionRawPropertiesReadableId>;
  readonly status: Maybe<NotionRawPropertiesStatus>;
  readonly tags: Maybe<NotionRawPropertiesTags>;
  readonly thumbnailImage: Maybe<NotionRawPropertiesThumbnailImage>;
};

type NotionRawPropertiesActionLink = {
  readonly id: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
  readonly url: Maybe<Scalars['String']>;
};

type NotionRawPropertiesActionLinkFieldSelector = {
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
  readonly url: InputMaybe<FieldSelectorEnum>;
};

type NotionRawPropertiesActionLinkFilterInput = {
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawPropertiesActionLinkSortInput = {
  readonly id: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
  readonly url: InputMaybe<SortOrderEnum>;
};

type NotionRawPropertiesDescription = {
  readonly id: Maybe<Scalars['String']>;
  readonly rich_text: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
};

type NotionRawPropertiesDescriptionFieldSelector = {
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly rich_text: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type NotionRawPropertiesDescriptionFilterInput = {
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly rich_text: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawPropertiesDescriptionSortInput = {
  readonly id: InputMaybe<SortOrderEnum>;
  readonly rich_text: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type NotionRawPropertiesDisplayOnSite = {
  readonly checkbox: Maybe<Scalars['Boolean']>;
  readonly id: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
};

type NotionRawPropertiesDisplayOnSiteFieldSelector = {
  readonly checkbox: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type NotionRawPropertiesDisplayOnSiteFilterInput = {
  readonly checkbox: InputMaybe<BooleanQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawPropertiesDisplayOnSiteSortInput = {
  readonly checkbox: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type NotionRawPropertiesFieldSelector = {
  readonly actionLink: InputMaybe<NotionRawPropertiesActionLinkFieldSelector>;
  readonly description: InputMaybe<NotionRawPropertiesDescriptionFieldSelector>;
  readonly displayOnSite: InputMaybe<NotionRawPropertiesDisplayOnSiteFieldSelector>;
  readonly githubLink: InputMaybe<NotionRawPropertiesGithubLinkFieldSelector>;
  readonly lastEdited: InputMaybe<NotionRawPropertiesLastEditedFieldSelector>;
  readonly name: InputMaybe<NotionRawPropertiesNameFieldSelector>;
  readonly readableId: InputMaybe<NotionRawPropertiesReadableIdFieldSelector>;
  readonly status: InputMaybe<NotionRawPropertiesStatusFieldSelector>;
  readonly tags: InputMaybe<NotionRawPropertiesTagsFieldSelector>;
  readonly thumbnailImage: InputMaybe<NotionRawPropertiesThumbnailImageFieldSelector>;
};

type NotionRawPropertiesFilterInput = {
  readonly actionLink: InputMaybe<NotionRawPropertiesActionLinkFilterInput>;
  readonly description: InputMaybe<NotionRawPropertiesDescriptionFilterInput>;
  readonly displayOnSite: InputMaybe<NotionRawPropertiesDisplayOnSiteFilterInput>;
  readonly githubLink: InputMaybe<NotionRawPropertiesGithubLinkFilterInput>;
  readonly lastEdited: InputMaybe<NotionRawPropertiesLastEditedFilterInput>;
  readonly name: InputMaybe<NotionRawPropertiesNameFilterInput>;
  readonly readableId: InputMaybe<NotionRawPropertiesReadableIdFilterInput>;
  readonly status: InputMaybe<NotionRawPropertiesStatusFilterInput>;
  readonly tags: InputMaybe<NotionRawPropertiesTagsFilterInput>;
  readonly thumbnailImage: InputMaybe<NotionRawPropertiesThumbnailImageFilterInput>;
};

type NotionRawPropertiesGithubLink = {
  readonly id: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
  readonly url: Maybe<Scalars['String']>;
};

type NotionRawPropertiesGithubLinkFieldSelector = {
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
  readonly url: InputMaybe<FieldSelectorEnum>;
};

type NotionRawPropertiesGithubLinkFilterInput = {
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawPropertiesGithubLinkSortInput = {
  readonly id: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
  readonly url: InputMaybe<SortOrderEnum>;
};

type NotionRawPropertiesLastEdited = {
  readonly id: Maybe<Scalars['String']>;
  readonly last_edited_time: Maybe<Scalars['Date']>;
  readonly type: Maybe<Scalars['String']>;
};


type NotionRawPropertiesLastEdited_last_edited_timeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type NotionRawPropertiesLastEditedFieldSelector = {
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly last_edited_time: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type NotionRawPropertiesLastEditedFilterInput = {
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly last_edited_time: InputMaybe<DateQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawPropertiesLastEditedSortInput = {
  readonly id: InputMaybe<SortOrderEnum>;
  readonly last_edited_time: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type NotionRawPropertiesName = {
  readonly id: Maybe<Scalars['String']>;
  readonly title: Maybe<ReadonlyArray<Maybe<NotionRawPropertiesNameTitle>>>;
  readonly type: Maybe<Scalars['String']>;
};

type NotionRawPropertiesNameFieldSelector = {
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<NotionRawPropertiesNameTitleFieldSelector>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type NotionRawPropertiesNameFilterInput = {
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<NotionRawPropertiesNameTitleFilterListInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawPropertiesNameSortInput = {
  readonly id: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<NotionRawPropertiesNameTitleSortInput>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type NotionRawPropertiesNameTitle = {
  readonly annotations: Maybe<NotionRawPropertiesNameTitleAnnotations>;
  readonly plain_text: Maybe<Scalars['String']>;
  readonly text: Maybe<NotionRawPropertiesNameTitleText>;
  readonly type: Maybe<Scalars['String']>;
};

type NotionRawPropertiesNameTitleAnnotations = {
  readonly bold: Maybe<Scalars['Boolean']>;
  readonly code: Maybe<Scalars['Boolean']>;
  readonly color: Maybe<Scalars['String']>;
  readonly italic: Maybe<Scalars['Boolean']>;
  readonly strikethrough: Maybe<Scalars['Boolean']>;
  readonly underline: Maybe<Scalars['Boolean']>;
};

type NotionRawPropertiesNameTitleAnnotationsFieldSelector = {
  readonly bold: InputMaybe<FieldSelectorEnum>;
  readonly code: InputMaybe<FieldSelectorEnum>;
  readonly color: InputMaybe<FieldSelectorEnum>;
  readonly italic: InputMaybe<FieldSelectorEnum>;
  readonly strikethrough: InputMaybe<FieldSelectorEnum>;
  readonly underline: InputMaybe<FieldSelectorEnum>;
};

type NotionRawPropertiesNameTitleAnnotationsFilterInput = {
  readonly bold: InputMaybe<BooleanQueryOperatorInput>;
  readonly code: InputMaybe<BooleanQueryOperatorInput>;
  readonly color: InputMaybe<StringQueryOperatorInput>;
  readonly italic: InputMaybe<BooleanQueryOperatorInput>;
  readonly strikethrough: InputMaybe<BooleanQueryOperatorInput>;
  readonly underline: InputMaybe<BooleanQueryOperatorInput>;
};

type NotionRawPropertiesNameTitleAnnotationsSortInput = {
  readonly bold: InputMaybe<SortOrderEnum>;
  readonly code: InputMaybe<SortOrderEnum>;
  readonly color: InputMaybe<SortOrderEnum>;
  readonly italic: InputMaybe<SortOrderEnum>;
  readonly strikethrough: InputMaybe<SortOrderEnum>;
  readonly underline: InputMaybe<SortOrderEnum>;
};

type NotionRawPropertiesNameTitleFieldSelector = {
  readonly annotations: InputMaybe<NotionRawPropertiesNameTitleAnnotationsFieldSelector>;
  readonly plain_text: InputMaybe<FieldSelectorEnum>;
  readonly text: InputMaybe<NotionRawPropertiesNameTitleTextFieldSelector>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type NotionRawPropertiesNameTitleFilterInput = {
  readonly annotations: InputMaybe<NotionRawPropertiesNameTitleAnnotationsFilterInput>;
  readonly plain_text: InputMaybe<StringQueryOperatorInput>;
  readonly text: InputMaybe<NotionRawPropertiesNameTitleTextFilterInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawPropertiesNameTitleFilterListInput = {
  readonly elemMatch: InputMaybe<NotionRawPropertiesNameTitleFilterInput>;
};

type NotionRawPropertiesNameTitleSortInput = {
  readonly annotations: InputMaybe<NotionRawPropertiesNameTitleAnnotationsSortInput>;
  readonly plain_text: InputMaybe<SortOrderEnum>;
  readonly text: InputMaybe<NotionRawPropertiesNameTitleTextSortInput>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type NotionRawPropertiesNameTitleText = {
  readonly content: Maybe<Scalars['String']>;
};

type NotionRawPropertiesNameTitleTextFieldSelector = {
  readonly content: InputMaybe<FieldSelectorEnum>;
};

type NotionRawPropertiesNameTitleTextFilterInput = {
  readonly content: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawPropertiesNameTitleTextSortInput = {
  readonly content: InputMaybe<SortOrderEnum>;
};

type NotionRawPropertiesReadableId = {
  readonly id: Maybe<Scalars['String']>;
  readonly rich_text: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
};

type NotionRawPropertiesReadableIdFieldSelector = {
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly rich_text: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type NotionRawPropertiesReadableIdFilterInput = {
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly rich_text: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawPropertiesReadableIdSortInput = {
  readonly id: InputMaybe<SortOrderEnum>;
  readonly rich_text: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type NotionRawPropertiesSortInput = {
  readonly actionLink: InputMaybe<NotionRawPropertiesActionLinkSortInput>;
  readonly description: InputMaybe<NotionRawPropertiesDescriptionSortInput>;
  readonly displayOnSite: InputMaybe<NotionRawPropertiesDisplayOnSiteSortInput>;
  readonly githubLink: InputMaybe<NotionRawPropertiesGithubLinkSortInput>;
  readonly lastEdited: InputMaybe<NotionRawPropertiesLastEditedSortInput>;
  readonly name: InputMaybe<NotionRawPropertiesNameSortInput>;
  readonly readableId: InputMaybe<NotionRawPropertiesReadableIdSortInput>;
  readonly status: InputMaybe<NotionRawPropertiesStatusSortInput>;
  readonly tags: InputMaybe<NotionRawPropertiesTagsSortInput>;
  readonly thumbnailImage: InputMaybe<NotionRawPropertiesThumbnailImageSortInput>;
};

type NotionRawPropertiesStatus = {
  readonly id: Maybe<Scalars['String']>;
  readonly select: Maybe<NotionRawPropertiesStatusSelect>;
  readonly type: Maybe<Scalars['String']>;
};

type NotionRawPropertiesStatusFieldSelector = {
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly select: InputMaybe<NotionRawPropertiesStatusSelectFieldSelector>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type NotionRawPropertiesStatusFilterInput = {
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly select: InputMaybe<NotionRawPropertiesStatusSelectFilterInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawPropertiesStatusSelect = {
  readonly color: Maybe<Scalars['String']>;
  readonly id: Maybe<Scalars['String']>;
  readonly name: Maybe<Scalars['String']>;
};

type NotionRawPropertiesStatusSelectFieldSelector = {
  readonly color: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
};

type NotionRawPropertiesStatusSelectFilterInput = {
  readonly color: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawPropertiesStatusSelectSortInput = {
  readonly color: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
};

type NotionRawPropertiesStatusSortInput = {
  readonly id: InputMaybe<SortOrderEnum>;
  readonly select: InputMaybe<NotionRawPropertiesStatusSelectSortInput>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type NotionRawPropertiesTags = {
  readonly id: Maybe<Scalars['String']>;
  readonly multi_select: Maybe<ReadonlyArray<Maybe<NotionRawPropertiesTagsMulti_select>>>;
  readonly type: Maybe<Scalars['String']>;
};

type NotionRawPropertiesTagsFieldSelector = {
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly multi_select: InputMaybe<NotionRawPropertiesTagsMulti_selectFieldSelector>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type NotionRawPropertiesTagsFilterInput = {
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly multi_select: InputMaybe<NotionRawPropertiesTagsMulti_selectFilterListInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawPropertiesTagsMulti_select = {
  readonly color: Maybe<Scalars['String']>;
  readonly id: Maybe<Scalars['String']>;
  readonly name: Maybe<Scalars['String']>;
};

type NotionRawPropertiesTagsMulti_selectFieldSelector = {
  readonly color: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly name: InputMaybe<FieldSelectorEnum>;
};

type NotionRawPropertiesTagsMulti_selectFilterInput = {
  readonly color: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawPropertiesTagsMulti_selectFilterListInput = {
  readonly elemMatch: InputMaybe<NotionRawPropertiesTagsMulti_selectFilterInput>;
};

type NotionRawPropertiesTagsMulti_selectSortInput = {
  readonly color: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly name: InputMaybe<SortOrderEnum>;
};

type NotionRawPropertiesTagsSortInput = {
  readonly id: InputMaybe<SortOrderEnum>;
  readonly multi_select: InputMaybe<NotionRawPropertiesTagsMulti_selectSortInput>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type NotionRawPropertiesThumbnailImage = {
  readonly files: Maybe<ReadonlyArray<Maybe<NotionRawPropertiesThumbnailImageFiles>>>;
  readonly id: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
};

type NotionRawPropertiesThumbnailImageFieldSelector = {
  readonly files: InputMaybe<NotionRawPropertiesThumbnailImageFilesFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type NotionRawPropertiesThumbnailImageFiles = {
  readonly file: Maybe<NotionRawPropertiesThumbnailImageFilesFile>;
  readonly name: Maybe<Scalars['String']>;
  readonly type: Maybe<Scalars['String']>;
};

type NotionRawPropertiesThumbnailImageFilesFieldSelector = {
  readonly file: InputMaybe<NotionRawPropertiesThumbnailImageFilesFileFieldSelector>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly type: InputMaybe<FieldSelectorEnum>;
};

type NotionRawPropertiesThumbnailImageFilesFile = {
  readonly expiry_time: Maybe<Scalars['Date']>;
  readonly url: Maybe<Scalars['String']>;
};


type NotionRawPropertiesThumbnailImageFilesFile_expiry_timeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type NotionRawPropertiesThumbnailImageFilesFileFieldSelector = {
  readonly expiry_time: InputMaybe<FieldSelectorEnum>;
  readonly url: InputMaybe<FieldSelectorEnum>;
};

type NotionRawPropertiesThumbnailImageFilesFileFilterInput = {
  readonly expiry_time: InputMaybe<DateQueryOperatorInput>;
  readonly url: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawPropertiesThumbnailImageFilesFileSortInput = {
  readonly expiry_time: InputMaybe<SortOrderEnum>;
  readonly url: InputMaybe<SortOrderEnum>;
};

type NotionRawPropertiesThumbnailImageFilesFilterInput = {
  readonly file: InputMaybe<NotionRawPropertiesThumbnailImageFilesFileFilterInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawPropertiesThumbnailImageFilesFilterListInput = {
  readonly elemMatch: InputMaybe<NotionRawPropertiesThumbnailImageFilesFilterInput>;
};

type NotionRawPropertiesThumbnailImageFilesSortInput = {
  readonly file: InputMaybe<NotionRawPropertiesThumbnailImageFilesFileSortInput>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type NotionRawPropertiesThumbnailImageFilterInput = {
  readonly files: InputMaybe<NotionRawPropertiesThumbnailImageFilesFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly type: InputMaybe<StringQueryOperatorInput>;
};

type NotionRawPropertiesThumbnailImageSortInput = {
  readonly files: InputMaybe<NotionRawPropertiesThumbnailImageFilesSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly type: InputMaybe<SortOrderEnum>;
};

type NotionRawSortInput = {
  readonly archived: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NotionRawChildrenSortInput>;
  readonly created_by: InputMaybe<NotionRawCreated_bySortInput>;
  readonly created_time: InputMaybe<SortOrderEnum>;
  readonly icon: InputMaybe<NotionRawIconSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly last_edited_by: InputMaybe<NotionRawLast_edited_bySortInput>;
  readonly last_edited_time: InputMaybe<SortOrderEnum>;
  readonly object: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NotionRawParentSortInput>;
  readonly properties: InputMaybe<NotionRawPropertiesSortInput>;
  readonly public_url: InputMaybe<SortOrderEnum>;
  readonly url: InputMaybe<SortOrderEnum>;
};

type NotionSortInput = {
  readonly archived: InputMaybe<SortOrderEnum>;
  readonly childMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly childrenMarkdownRemark: InputMaybe<MarkdownRemarkSortInput>;
  readonly createdAt: InputMaybe<SortOrderEnum>;
  readonly fields: InputMaybe<NotionFieldsSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly json: InputMaybe<SortOrderEnum>;
  readonly markdownString: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly properties: InputMaybe<NotionPropertiesSortInput>;
  readonly raw: InputMaybe<NotionRawSortInput>;
  readonly thumbnailImg: InputMaybe<FileSortInput>;
  readonly title: InputMaybe<SortOrderEnum>;
  readonly updatedAt: InputMaybe<SortOrderEnum>;
};

type PNGOptions = {
  readonly compressionSpeed: InputMaybe<Scalars['Int']>;
  readonly quality: InputMaybe<Scalars['Int']>;
};

type PageInfo = {
  readonly currentPage: Scalars['Int'];
  readonly hasNextPage: Scalars['Boolean'];
  readonly hasPreviousPage: Scalars['Boolean'];
  readonly itemCount: Scalars['Int'];
  readonly pageCount: Scalars['Int'];
  readonly perPage: Maybe<Scalars['Int']>;
  readonly totalCount: Scalars['Int'];
};

type Potrace = {
  readonly alphaMax: InputMaybe<Scalars['Float']>;
  readonly background: InputMaybe<Scalars['String']>;
  readonly blackOnWhite: InputMaybe<Scalars['Boolean']>;
  readonly color: InputMaybe<Scalars['String']>;
  readonly optCurve: InputMaybe<Scalars['Boolean']>;
  readonly optTolerance: InputMaybe<Scalars['Float']>;
  readonly threshold: InputMaybe<Scalars['Int']>;
  readonly turdSize: InputMaybe<Scalars['Float']>;
  readonly turnPolicy: InputMaybe<PotraceTurnPolicy>;
};

type PotraceTurnPolicy =
  | 'black'
  | 'left'
  | 'majority'
  | 'minority'
  | 'right'
  | 'white';

type Query = {
  readonly allDirectory: DirectoryConnection;
  readonly allFile: FileConnection;
  readonly allImageSharp: ImageSharpConnection;
  readonly allMarkdownRemark: MarkdownRemarkConnection;
  readonly allNotion: NotionConnection;
  readonly allSite: SiteConnection;
  readonly allSiteBuildMetadata: SiteBuildMetadataConnection;
  readonly allSiteFunction: SiteFunctionConnection;
  readonly allSitePage: SitePageConnection;
  readonly allSitePlugin: SitePluginConnection;
  readonly directory: Maybe<Directory>;
  readonly file: Maybe<File>;
  readonly imageSharp: Maybe<ImageSharp>;
  readonly markdownRemark: Maybe<MarkdownRemark>;
  readonly notion: Maybe<Notion>;
  readonly site: Maybe<Site>;
  readonly siteBuildMetadata: Maybe<SiteBuildMetadata>;
  readonly siteFunction: Maybe<SiteFunction>;
  readonly sitePage: Maybe<SitePage>;
  readonly sitePlugin: Maybe<SitePlugin>;
};


type Query_allDirectoryArgs = {
  filter: InputMaybe<DirectoryFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<DirectorySortInput>>>;
};


type Query_allFileArgs = {
  filter: InputMaybe<FileFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<FileSortInput>>>;
};


type Query_allImageSharpArgs = {
  filter: InputMaybe<ImageSharpFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<ImageSharpSortInput>>>;
};


type Query_allMarkdownRemarkArgs = {
  filter: InputMaybe<MarkdownRemarkFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<MarkdownRemarkSortInput>>>;
};


type Query_allNotionArgs = {
  filter: InputMaybe<NotionFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<NotionSortInput>>>;
};


type Query_allSiteArgs = {
  filter: InputMaybe<SiteFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SiteSortInput>>>;
};


type Query_allSiteBuildMetadataArgs = {
  filter: InputMaybe<SiteBuildMetadataFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SiteBuildMetadataSortInput>>>;
};


type Query_allSiteFunctionArgs = {
  filter: InputMaybe<SiteFunctionFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SiteFunctionSortInput>>>;
};


type Query_allSitePageArgs = {
  filter: InputMaybe<SitePageFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SitePageSortInput>>>;
};


type Query_allSitePluginArgs = {
  filter: InputMaybe<SitePluginFilterInput>;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
  sort: InputMaybe<ReadonlyArray<InputMaybe<SitePluginSortInput>>>;
};


type Query_directoryArgs = {
  absolutePath: InputMaybe<StringQueryOperatorInput>;
  accessTime: InputMaybe<DateQueryOperatorInput>;
  atime: InputMaybe<DateQueryOperatorInput>;
  atimeMs: InputMaybe<FloatQueryOperatorInput>;
  base: InputMaybe<StringQueryOperatorInput>;
  birthTime: InputMaybe<DateQueryOperatorInput>;
  birthtime: InputMaybe<DateQueryOperatorInput>;
  birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  changeTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  ctime: InputMaybe<DateQueryOperatorInput>;
  ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  dev: InputMaybe<IntQueryOperatorInput>;
  dir: InputMaybe<StringQueryOperatorInput>;
  ext: InputMaybe<StringQueryOperatorInput>;
  extension: InputMaybe<StringQueryOperatorInput>;
  gid: InputMaybe<IntQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  ino: InputMaybe<FloatQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  mode: InputMaybe<IntQueryOperatorInput>;
  modifiedTime: InputMaybe<DateQueryOperatorInput>;
  mtime: InputMaybe<DateQueryOperatorInput>;
  mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nlink: InputMaybe<IntQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  prettySize: InputMaybe<StringQueryOperatorInput>;
  rdev: InputMaybe<IntQueryOperatorInput>;
  relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  relativePath: InputMaybe<StringQueryOperatorInput>;
  root: InputMaybe<StringQueryOperatorInput>;
  size: InputMaybe<IntQueryOperatorInput>;
  sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  uid: InputMaybe<IntQueryOperatorInput>;
};


type Query_fileArgs = {
  absolutePath: InputMaybe<StringQueryOperatorInput>;
  accessTime: InputMaybe<DateQueryOperatorInput>;
  atime: InputMaybe<DateQueryOperatorInput>;
  atimeMs: InputMaybe<FloatQueryOperatorInput>;
  base: InputMaybe<StringQueryOperatorInput>;
  birthTime: InputMaybe<DateQueryOperatorInput>;
  birthtime: InputMaybe<DateQueryOperatorInput>;
  birthtimeMs: InputMaybe<FloatQueryOperatorInput>;
  blksize: InputMaybe<IntQueryOperatorInput>;
  blocks: InputMaybe<IntQueryOperatorInput>;
  changeTime: InputMaybe<DateQueryOperatorInput>;
  childImageSharp: InputMaybe<ImageSharpFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenImageSharp: InputMaybe<ImageSharpFilterListInput>;
  ctime: InputMaybe<DateQueryOperatorInput>;
  ctimeMs: InputMaybe<FloatQueryOperatorInput>;
  dev: InputMaybe<IntQueryOperatorInput>;
  dir: InputMaybe<StringQueryOperatorInput>;
  ext: InputMaybe<StringQueryOperatorInput>;
  extension: InputMaybe<StringQueryOperatorInput>;
  gid: InputMaybe<IntQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  ino: InputMaybe<FloatQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  mode: InputMaybe<IntQueryOperatorInput>;
  modifiedTime: InputMaybe<DateQueryOperatorInput>;
  mtime: InputMaybe<DateQueryOperatorInput>;
  mtimeMs: InputMaybe<FloatQueryOperatorInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nlink: InputMaybe<IntQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  prettySize: InputMaybe<StringQueryOperatorInput>;
  publicURL: InputMaybe<StringQueryOperatorInput>;
  rdev: InputMaybe<IntQueryOperatorInput>;
  relativeDirectory: InputMaybe<StringQueryOperatorInput>;
  relativePath: InputMaybe<StringQueryOperatorInput>;
  root: InputMaybe<StringQueryOperatorInput>;
  size: InputMaybe<IntQueryOperatorInput>;
  sourceInstanceName: InputMaybe<StringQueryOperatorInput>;
  uid: InputMaybe<IntQueryOperatorInput>;
  url: InputMaybe<StringQueryOperatorInput>;
};


type Query_imageSharpArgs = {
  children: InputMaybe<NodeFilterListInput>;
  fixed: InputMaybe<ImageSharpFixedFilterInput>;
  fluid: InputMaybe<ImageSharpFluidFilterInput>;
  gatsbyImageData: InputMaybe<GatsbyImageDataQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  original: InputMaybe<ImageSharpOriginalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  resize: InputMaybe<ImageSharpResizeFilterInput>;
};


type Query_markdownRemarkArgs = {
  children: InputMaybe<NodeFilterListInput>;
  excerpt: InputMaybe<StringQueryOperatorInput>;
  excerptAst: InputMaybe<JSONQueryOperatorInput>;
  frontmatter: InputMaybe<MarkdownRemarkFrontmatterFilterInput>;
  headings: InputMaybe<MarkdownHeadingFilterListInput>;
  html: InputMaybe<StringQueryOperatorInput>;
  htmlAst: InputMaybe<JSONQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
  rawMarkdownBody: InputMaybe<StringQueryOperatorInput>;
  tableOfContents: InputMaybe<StringQueryOperatorInput>;
  timeToRead: InputMaybe<IntQueryOperatorInput>;
  wordCount: InputMaybe<MarkdownWordCountFilterInput>;
};


type Query_notionArgs = {
  archived: InputMaybe<BooleanQueryOperatorInput>;
  childMarkdownRemark: InputMaybe<MarkdownRemarkFilterInput>;
  children: InputMaybe<NodeFilterListInput>;
  childrenMarkdownRemark: InputMaybe<MarkdownRemarkFilterListInput>;
  createdAt: InputMaybe<DateQueryOperatorInput>;
  fields: InputMaybe<NotionFieldsFilterInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  json: InputMaybe<StringQueryOperatorInput>;
  markdownString: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  properties: InputMaybe<NotionPropertiesFilterInput>;
  raw: InputMaybe<NotionRawFilterInput>;
  thumbnailImg: InputMaybe<FileFilterInput>;
  title: InputMaybe<StringQueryOperatorInput>;
  updatedAt: InputMaybe<DateQueryOperatorInput>;
};


type Query_siteArgs = {
  buildTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  flags: InputMaybe<SiteFlagsFilterInput>;
  graphqlTypegen: InputMaybe<SiteGraphqlTypegenFilterInput>;
  host: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  jsxRuntime: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  pathPrefix: InputMaybe<StringQueryOperatorInput>;
  polyfill: InputMaybe<BooleanQueryOperatorInput>;
  port: InputMaybe<IntQueryOperatorInput>;
  siteMetadata: InputMaybe<SiteSiteMetadataFilterInput>;
  trailingSlash: InputMaybe<StringQueryOperatorInput>;
};


type Query_siteBuildMetadataArgs = {
  buildTime: InputMaybe<DateQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  parent: InputMaybe<NodeFilterInput>;
};


type Query_siteFunctionArgs = {
  absoluteCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  functionRoute: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  matchPath: InputMaybe<StringQueryOperatorInput>;
  originalAbsoluteFilePath: InputMaybe<StringQueryOperatorInput>;
  originalRelativeFilePath: InputMaybe<StringQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  pluginName: InputMaybe<StringQueryOperatorInput>;
  relativeCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
};


type Query_sitePageArgs = {
  children: InputMaybe<NodeFilterListInput>;
  component: InputMaybe<StringQueryOperatorInput>;
  componentChunkName: InputMaybe<StringQueryOperatorInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  internalComponentName: InputMaybe<StringQueryOperatorInput>;
  matchPath: InputMaybe<StringQueryOperatorInput>;
  pageContext: InputMaybe<JSONQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  path: InputMaybe<StringQueryOperatorInput>;
  pluginCreator: InputMaybe<SitePluginFilterInput>;
};


type Query_sitePluginArgs = {
  browserAPIs: InputMaybe<StringQueryOperatorInput>;
  children: InputMaybe<NodeFilterListInput>;
  id: InputMaybe<StringQueryOperatorInput>;
  internal: InputMaybe<InternalFilterInput>;
  name: InputMaybe<StringQueryOperatorInput>;
  nodeAPIs: InputMaybe<StringQueryOperatorInput>;
  packageJson: InputMaybe<JSONQueryOperatorInput>;
  parent: InputMaybe<NodeFilterInput>;
  pluginFilepath: InputMaybe<StringQueryOperatorInput>;
  pluginOptions: InputMaybe<JSONQueryOperatorInput>;
  resolve: InputMaybe<StringQueryOperatorInput>;
  ssrAPIs: InputMaybe<StringQueryOperatorInput>;
  version: InputMaybe<StringQueryOperatorInput>;
};

type Site = Node & {
  readonly buildTime: Maybe<Scalars['Date']>;
  readonly children: ReadonlyArray<Node>;
  readonly flags: Maybe<SiteFlags>;
  readonly graphqlTypegen: Maybe<SiteGraphqlTypegen>;
  readonly host: Maybe<Scalars['String']>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly jsxRuntime: Maybe<Scalars['String']>;
  readonly parent: Maybe<Node>;
  readonly pathPrefix: Maybe<Scalars['String']>;
  readonly polyfill: Maybe<Scalars['Boolean']>;
  readonly port: Maybe<Scalars['Int']>;
  readonly siteMetadata: Maybe<SiteSiteMetadata>;
  readonly trailingSlash: Maybe<Scalars['String']>;
};


type Site_buildTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type SiteBuildMetadata = Node & {
  readonly buildTime: Maybe<Scalars['Date']>;
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly parent: Maybe<Node>;
};


type SiteBuildMetadata_buildTimeArgs = {
  difference: InputMaybe<Scalars['String']>;
  formatString: InputMaybe<Scalars['String']>;
  fromNow: InputMaybe<Scalars['Boolean']>;
  locale: InputMaybe<Scalars['String']>;
};

type SiteBuildMetadataConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteBuildMetadataEdge>;
  readonly group: ReadonlyArray<SiteBuildMetadataGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteBuildMetadata>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteBuildMetadataConnection_distinctArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataConnection_groupArgs = {
  field: SiteBuildMetadataFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteBuildMetadataConnection_maxArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataConnection_minArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataConnection_sumArgs = {
  field: SiteBuildMetadataFieldSelector;
};

type SiteBuildMetadataEdge = {
  readonly next: Maybe<SiteBuildMetadata>;
  readonly node: SiteBuildMetadata;
  readonly previous: Maybe<SiteBuildMetadata>;
};

type SiteBuildMetadataFieldSelector = {
  readonly buildTime: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly parent: InputMaybe<NodeFieldSelector>;
};

type SiteBuildMetadataFilterInput = {
  readonly buildTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
};

type SiteBuildMetadataGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteBuildMetadataEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteBuildMetadataGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteBuildMetadata>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteBuildMetadataGroupConnection_distinctArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataGroupConnection_groupArgs = {
  field: SiteBuildMetadataFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteBuildMetadataGroupConnection_maxArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataGroupConnection_minArgs = {
  field: SiteBuildMetadataFieldSelector;
};


type SiteBuildMetadataGroupConnection_sumArgs = {
  field: SiteBuildMetadataFieldSelector;
};

type SiteBuildMetadataSortInput = {
  readonly buildTime: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly parent: InputMaybe<NodeSortInput>;
};

type SiteConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteEdge>;
  readonly group: ReadonlyArray<SiteGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Site>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteConnection_distinctArgs = {
  field: SiteFieldSelector;
};


type SiteConnection_groupArgs = {
  field: SiteFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteConnection_maxArgs = {
  field: SiteFieldSelector;
};


type SiteConnection_minArgs = {
  field: SiteFieldSelector;
};


type SiteConnection_sumArgs = {
  field: SiteFieldSelector;
};

type SiteEdge = {
  readonly next: Maybe<Site>;
  readonly node: Site;
  readonly previous: Maybe<Site>;
};

type SiteFieldSelector = {
  readonly buildTime: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly flags: InputMaybe<SiteFlagsFieldSelector>;
  readonly graphqlTypegen: InputMaybe<SiteGraphqlTypegenFieldSelector>;
  readonly host: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly jsxRuntime: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly pathPrefix: InputMaybe<FieldSelectorEnum>;
  readonly polyfill: InputMaybe<FieldSelectorEnum>;
  readonly port: InputMaybe<FieldSelectorEnum>;
  readonly siteMetadata: InputMaybe<SiteSiteMetadataFieldSelector>;
  readonly trailingSlash: InputMaybe<FieldSelectorEnum>;
};

type SiteFilterInput = {
  readonly buildTime: InputMaybe<DateQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly flags: InputMaybe<SiteFlagsFilterInput>;
  readonly graphqlTypegen: InputMaybe<SiteGraphqlTypegenFilterInput>;
  readonly host: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly jsxRuntime: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pathPrefix: InputMaybe<StringQueryOperatorInput>;
  readonly polyfill: InputMaybe<BooleanQueryOperatorInput>;
  readonly port: InputMaybe<IntQueryOperatorInput>;
  readonly siteMetadata: InputMaybe<SiteSiteMetadataFilterInput>;
  readonly trailingSlash: InputMaybe<StringQueryOperatorInput>;
};

type SiteFlags = {
  readonly DEV_SSR: Maybe<Scalars['Boolean']>;
};

type SiteFlagsFieldSelector = {
  readonly DEV_SSR: InputMaybe<FieldSelectorEnum>;
};

type SiteFlagsFilterInput = {
  readonly DEV_SSR: InputMaybe<BooleanQueryOperatorInput>;
};

type SiteFlagsSortInput = {
  readonly DEV_SSR: InputMaybe<SortOrderEnum>;
};

type SiteFunction = Node & {
  readonly absoluteCompiledFilePath: Scalars['String'];
  readonly children: ReadonlyArray<Node>;
  readonly functionRoute: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly matchPath: Maybe<Scalars['String']>;
  readonly originalAbsoluteFilePath: Scalars['String'];
  readonly originalRelativeFilePath: Scalars['String'];
  readonly parent: Maybe<Node>;
  readonly pluginName: Scalars['String'];
  readonly relativeCompiledFilePath: Scalars['String'];
};

type SiteFunctionConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteFunctionEdge>;
  readonly group: ReadonlyArray<SiteFunctionGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteFunction>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteFunctionConnection_distinctArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionConnection_groupArgs = {
  field: SiteFunctionFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteFunctionConnection_maxArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionConnection_minArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionConnection_sumArgs = {
  field: SiteFunctionFieldSelector;
};

type SiteFunctionEdge = {
  readonly next: Maybe<SiteFunction>;
  readonly node: SiteFunction;
  readonly previous: Maybe<SiteFunction>;
};

type SiteFunctionFieldSelector = {
  readonly absoluteCompiledFilePath: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly functionRoute: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly matchPath: InputMaybe<FieldSelectorEnum>;
  readonly originalAbsoluteFilePath: InputMaybe<FieldSelectorEnum>;
  readonly originalRelativeFilePath: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly pluginName: InputMaybe<FieldSelectorEnum>;
  readonly relativeCompiledFilePath: InputMaybe<FieldSelectorEnum>;
};

type SiteFunctionFilterInput = {
  readonly absoluteCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly functionRoute: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly matchPath: InputMaybe<StringQueryOperatorInput>;
  readonly originalAbsoluteFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly originalRelativeFilePath: InputMaybe<StringQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pluginName: InputMaybe<StringQueryOperatorInput>;
  readonly relativeCompiledFilePath: InputMaybe<StringQueryOperatorInput>;
};

type SiteFunctionGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteFunctionEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteFunctionGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SiteFunction>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteFunctionGroupConnection_distinctArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionGroupConnection_groupArgs = {
  field: SiteFunctionFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteFunctionGroupConnection_maxArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionGroupConnection_minArgs = {
  field: SiteFunctionFieldSelector;
};


type SiteFunctionGroupConnection_sumArgs = {
  field: SiteFunctionFieldSelector;
};

type SiteFunctionSortInput = {
  readonly absoluteCompiledFilePath: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly functionRoute: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly matchPath: InputMaybe<SortOrderEnum>;
  readonly originalAbsoluteFilePath: InputMaybe<SortOrderEnum>;
  readonly originalRelativeFilePath: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly pluginName: InputMaybe<SortOrderEnum>;
  readonly relativeCompiledFilePath: InputMaybe<SortOrderEnum>;
};

type SiteGraphqlTypegen = {
  readonly documentSearchPaths: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly generateOnBuild: Maybe<Scalars['Boolean']>;
  readonly typesOutputPath: Maybe<Scalars['String']>;
};

type SiteGraphqlTypegenFieldSelector = {
  readonly documentSearchPaths: InputMaybe<FieldSelectorEnum>;
  readonly generateOnBuild: InputMaybe<FieldSelectorEnum>;
  readonly typesOutputPath: InputMaybe<FieldSelectorEnum>;
};

type SiteGraphqlTypegenFilterInput = {
  readonly documentSearchPaths: InputMaybe<StringQueryOperatorInput>;
  readonly generateOnBuild: InputMaybe<BooleanQueryOperatorInput>;
  readonly typesOutputPath: InputMaybe<StringQueryOperatorInput>;
};

type SiteGraphqlTypegenSortInput = {
  readonly documentSearchPaths: InputMaybe<SortOrderEnum>;
  readonly generateOnBuild: InputMaybe<SortOrderEnum>;
  readonly typesOutputPath: InputMaybe<SortOrderEnum>;
};

type SiteGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SiteEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SiteGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<Site>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SiteGroupConnection_distinctArgs = {
  field: SiteFieldSelector;
};


type SiteGroupConnection_groupArgs = {
  field: SiteFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SiteGroupConnection_maxArgs = {
  field: SiteFieldSelector;
};


type SiteGroupConnection_minArgs = {
  field: SiteFieldSelector;
};


type SiteGroupConnection_sumArgs = {
  field: SiteFieldSelector;
};

type SitePage = Node & {
  readonly children: ReadonlyArray<Node>;
  readonly component: Scalars['String'];
  readonly componentChunkName: Scalars['String'];
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly internalComponentName: Scalars['String'];
  readonly matchPath: Maybe<Scalars['String']>;
  readonly pageContext: Maybe<Scalars['JSON']>;
  readonly parent: Maybe<Node>;
  readonly path: Scalars['String'];
  readonly pluginCreator: Maybe<SitePlugin>;
};

type SitePageConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePageEdge>;
  readonly group: ReadonlyArray<SitePageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePageConnection_distinctArgs = {
  field: SitePageFieldSelector;
};


type SitePageConnection_groupArgs = {
  field: SitePageFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePageConnection_maxArgs = {
  field: SitePageFieldSelector;
};


type SitePageConnection_minArgs = {
  field: SitePageFieldSelector;
};


type SitePageConnection_sumArgs = {
  field: SitePageFieldSelector;
};

type SitePageEdge = {
  readonly next: Maybe<SitePage>;
  readonly node: SitePage;
  readonly previous: Maybe<SitePage>;
};

type SitePageFieldSelector = {
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly component: InputMaybe<FieldSelectorEnum>;
  readonly componentChunkName: InputMaybe<FieldSelectorEnum>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly internalComponentName: InputMaybe<FieldSelectorEnum>;
  readonly matchPath: InputMaybe<FieldSelectorEnum>;
  readonly pageContext: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly path: InputMaybe<FieldSelectorEnum>;
  readonly pluginCreator: InputMaybe<SitePluginFieldSelector>;
};

type SitePageFilterInput = {
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly component: InputMaybe<StringQueryOperatorInput>;
  readonly componentChunkName: InputMaybe<StringQueryOperatorInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly internalComponentName: InputMaybe<StringQueryOperatorInput>;
  readonly matchPath: InputMaybe<StringQueryOperatorInput>;
  readonly pageContext: InputMaybe<JSONQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly path: InputMaybe<StringQueryOperatorInput>;
  readonly pluginCreator: InputMaybe<SitePluginFilterInput>;
};

type SitePageGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePageEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SitePageGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePage>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePageGroupConnection_distinctArgs = {
  field: SitePageFieldSelector;
};


type SitePageGroupConnection_groupArgs = {
  field: SitePageFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePageGroupConnection_maxArgs = {
  field: SitePageFieldSelector;
};


type SitePageGroupConnection_minArgs = {
  field: SitePageFieldSelector;
};


type SitePageGroupConnection_sumArgs = {
  field: SitePageFieldSelector;
};

type SitePageSortInput = {
  readonly children: InputMaybe<NodeSortInput>;
  readonly component: InputMaybe<SortOrderEnum>;
  readonly componentChunkName: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly internalComponentName: InputMaybe<SortOrderEnum>;
  readonly matchPath: InputMaybe<SortOrderEnum>;
  readonly pageContext: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly path: InputMaybe<SortOrderEnum>;
  readonly pluginCreator: InputMaybe<SitePluginSortInput>;
};

type SitePlugin = Node & {
  readonly browserAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly children: ReadonlyArray<Node>;
  readonly id: Scalars['ID'];
  readonly internal: Internal;
  readonly name: Maybe<Scalars['String']>;
  readonly nodeAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly packageJson: Maybe<Scalars['JSON']>;
  readonly parent: Maybe<Node>;
  readonly pluginFilepath: Maybe<Scalars['String']>;
  readonly pluginOptions: Maybe<Scalars['JSON']>;
  readonly resolve: Maybe<Scalars['String']>;
  readonly ssrAPIs: Maybe<ReadonlyArray<Maybe<Scalars['String']>>>;
  readonly version: Maybe<Scalars['String']>;
};

type SitePluginConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePluginEdge>;
  readonly group: ReadonlyArray<SitePluginGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePlugin>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePluginConnection_distinctArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginConnection_groupArgs = {
  field: SitePluginFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePluginConnection_maxArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginConnection_minArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginConnection_sumArgs = {
  field: SitePluginFieldSelector;
};

type SitePluginEdge = {
  readonly next: Maybe<SitePlugin>;
  readonly node: SitePlugin;
  readonly previous: Maybe<SitePlugin>;
};

type SitePluginFieldSelector = {
  readonly browserAPIs: InputMaybe<FieldSelectorEnum>;
  readonly children: InputMaybe<NodeFieldSelector>;
  readonly id: InputMaybe<FieldSelectorEnum>;
  readonly internal: InputMaybe<InternalFieldSelector>;
  readonly name: InputMaybe<FieldSelectorEnum>;
  readonly nodeAPIs: InputMaybe<FieldSelectorEnum>;
  readonly packageJson: InputMaybe<FieldSelectorEnum>;
  readonly parent: InputMaybe<NodeFieldSelector>;
  readonly pluginFilepath: InputMaybe<FieldSelectorEnum>;
  readonly pluginOptions: InputMaybe<FieldSelectorEnum>;
  readonly resolve: InputMaybe<FieldSelectorEnum>;
  readonly ssrAPIs: InputMaybe<FieldSelectorEnum>;
  readonly version: InputMaybe<FieldSelectorEnum>;
};

type SitePluginFilterInput = {
  readonly browserAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly children: InputMaybe<NodeFilterListInput>;
  readonly id: InputMaybe<StringQueryOperatorInput>;
  readonly internal: InputMaybe<InternalFilterInput>;
  readonly name: InputMaybe<StringQueryOperatorInput>;
  readonly nodeAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly packageJson: InputMaybe<JSONQueryOperatorInput>;
  readonly parent: InputMaybe<NodeFilterInput>;
  readonly pluginFilepath: InputMaybe<StringQueryOperatorInput>;
  readonly pluginOptions: InputMaybe<JSONQueryOperatorInput>;
  readonly resolve: InputMaybe<StringQueryOperatorInput>;
  readonly ssrAPIs: InputMaybe<StringQueryOperatorInput>;
  readonly version: InputMaybe<StringQueryOperatorInput>;
};

type SitePluginGroupConnection = {
  readonly distinct: ReadonlyArray<Scalars['String']>;
  readonly edges: ReadonlyArray<SitePluginEdge>;
  readonly field: Scalars['String'];
  readonly fieldValue: Maybe<Scalars['String']>;
  readonly group: ReadonlyArray<SitePluginGroupConnection>;
  readonly max: Maybe<Scalars['Float']>;
  readonly min: Maybe<Scalars['Float']>;
  readonly nodes: ReadonlyArray<SitePlugin>;
  readonly pageInfo: PageInfo;
  readonly sum: Maybe<Scalars['Float']>;
  readonly totalCount: Scalars['Int'];
};


type SitePluginGroupConnection_distinctArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginGroupConnection_groupArgs = {
  field: SitePluginFieldSelector;
  limit: InputMaybe<Scalars['Int']>;
  skip: InputMaybe<Scalars['Int']>;
};


type SitePluginGroupConnection_maxArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginGroupConnection_minArgs = {
  field: SitePluginFieldSelector;
};


type SitePluginGroupConnection_sumArgs = {
  field: SitePluginFieldSelector;
};

type SitePluginSortInput = {
  readonly browserAPIs: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly name: InputMaybe<SortOrderEnum>;
  readonly nodeAPIs: InputMaybe<SortOrderEnum>;
  readonly packageJson: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly pluginFilepath: InputMaybe<SortOrderEnum>;
  readonly pluginOptions: InputMaybe<SortOrderEnum>;
  readonly resolve: InputMaybe<SortOrderEnum>;
  readonly ssrAPIs: InputMaybe<SortOrderEnum>;
  readonly version: InputMaybe<SortOrderEnum>;
};

type SiteSiteMetadata = {
  readonly description: Maybe<Scalars['String']>;
  readonly image: Maybe<Scalars['String']>;
  readonly siteUrl: Maybe<Scalars['String']>;
  readonly title: Maybe<Scalars['String']>;
  readonly titleTemplate: Maybe<Scalars['String']>;
};

type SiteSiteMetadataFieldSelector = {
  readonly description: InputMaybe<FieldSelectorEnum>;
  readonly image: InputMaybe<FieldSelectorEnum>;
  readonly siteUrl: InputMaybe<FieldSelectorEnum>;
  readonly title: InputMaybe<FieldSelectorEnum>;
  readonly titleTemplate: InputMaybe<FieldSelectorEnum>;
};

type SiteSiteMetadataFilterInput = {
  readonly description: InputMaybe<StringQueryOperatorInput>;
  readonly image: InputMaybe<StringQueryOperatorInput>;
  readonly siteUrl: InputMaybe<StringQueryOperatorInput>;
  readonly title: InputMaybe<StringQueryOperatorInput>;
  readonly titleTemplate: InputMaybe<StringQueryOperatorInput>;
};

type SiteSiteMetadataSortInput = {
  readonly description: InputMaybe<SortOrderEnum>;
  readonly image: InputMaybe<SortOrderEnum>;
  readonly siteUrl: InputMaybe<SortOrderEnum>;
  readonly title: InputMaybe<SortOrderEnum>;
  readonly titleTemplate: InputMaybe<SortOrderEnum>;
};

type SiteSortInput = {
  readonly buildTime: InputMaybe<SortOrderEnum>;
  readonly children: InputMaybe<NodeSortInput>;
  readonly flags: InputMaybe<SiteFlagsSortInput>;
  readonly graphqlTypegen: InputMaybe<SiteGraphqlTypegenSortInput>;
  readonly host: InputMaybe<SortOrderEnum>;
  readonly id: InputMaybe<SortOrderEnum>;
  readonly internal: InputMaybe<InternalSortInput>;
  readonly jsxRuntime: InputMaybe<SortOrderEnum>;
  readonly parent: InputMaybe<NodeSortInput>;
  readonly pathPrefix: InputMaybe<SortOrderEnum>;
  readonly polyfill: InputMaybe<SortOrderEnum>;
  readonly port: InputMaybe<SortOrderEnum>;
  readonly siteMetadata: InputMaybe<SiteSiteMetadataSortInput>;
  readonly trailingSlash: InputMaybe<SortOrderEnum>;
};

type SortOrderEnum =
  | 'ASC'
  | 'DESC';

type StringQueryOperatorInput = {
  readonly eq: InputMaybe<Scalars['String']>;
  readonly glob: InputMaybe<Scalars['String']>;
  readonly in: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  readonly ne: InputMaybe<Scalars['String']>;
  readonly nin: InputMaybe<ReadonlyArray<InputMaybe<Scalars['String']>>>;
  readonly regex: InputMaybe<Scalars['String']>;
};

type TransformOptions = {
  readonly cropFocus: InputMaybe<ImageCropFocus>;
  readonly duotone: InputMaybe<DuotoneGradient>;
  readonly fit: InputMaybe<ImageFit>;
  readonly grayscale: InputMaybe<Scalars['Boolean']>;
  readonly rotate: InputMaybe<Scalars['Int']>;
  readonly trim: InputMaybe<Scalars['Float']>;
};

type WebPOptions = {
  readonly quality: InputMaybe<Scalars['Int']>;
};

type GatsbyImageSharpFixedFragment = { readonly base64: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string };

type GatsbyImageSharpFixed_noBase64Fragment = { readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string };

type GatsbyImageSharpFixed_tracedSVGFragment = { readonly tracedSVG: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string };

type GatsbyImageSharpFixed_withWebpFragment = { readonly base64: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null };

type GatsbyImageSharpFixed_withWebp_noBase64Fragment = { readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null };

type GatsbyImageSharpFixed_withWebp_tracedSVGFragment = { readonly tracedSVG: string | null, readonly width: number, readonly height: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null };

type GatsbyImageSharpFluidFragment = { readonly base64: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly sizes: string };

type GatsbyImageSharpFluid_noBase64Fragment = { readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly sizes: string };

type GatsbyImageSharpFluid_tracedSVGFragment = { readonly tracedSVG: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly sizes: string };

type GatsbyImageSharpFluid_withWebpFragment = { readonly base64: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null, readonly sizes: string };

type GatsbyImageSharpFluid_withWebp_noBase64Fragment = { readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null, readonly sizes: string };

type GatsbyImageSharpFluid_withWebp_tracedSVGFragment = { readonly tracedSVG: string | null, readonly aspectRatio: number, readonly src: string, readonly srcSet: string, readonly srcWebp: string | null, readonly srcSetWebp: string | null, readonly sizes: string };

type GatsbyImageSharpFluidLimitPresentationSizeFragment = { readonly maxHeight: number, readonly maxWidth: number };

type SiteMetaDataQueryVariables = Exact<{ [key: string]: never; }>;


type SiteMetaDataQuery = { readonly site: { readonly siteMetadata: { readonly title: string | null, readonly description: string | null, readonly siteUrl: string | null, readonly image: string | null } | null } | null };


}
